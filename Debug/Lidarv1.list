
Lidarv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5e0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800a7e0  0800a7e0  0001a7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a844  0800a844  00020334  2**0
                  CONTENTS
  4 .ARM          00000008  0800a844  0800a844  0001a844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a84c  0800a84c  00020334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a84c  0800a84c  0001a84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a850  0800a850  0001a850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  0800a854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  20000334  0800ab88  00020334  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008a4  0800ab88  000208a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020362  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c0e2  00000000  00000000  000203a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030d8  00000000  00000000  0003c487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f0  00000000  00000000  0003f560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001200  00000000  00000000  00040c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000471f  00000000  00000000  00041e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bae4  00000000  00000000  0004656f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108bef  00000000  00000000  00062053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006774  00000000  00000000  0016ac44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001713b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000334 	.word	0x20000334
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a7c8 	.word	0x0800a7c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000338 	.word	0x20000338
 800023c:	0800a7c8 	.word	0x0800a7c8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <measurePoint>:
int move_c3 = 0;
uint8_t Message[12];
uint32_t MessageLen;


void measurePoint(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

	VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 80005e0:	4b2b      	ldr	r3, [pc, #172]	; (8000690 <measurePoint+0xb4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	492b      	ldr	r1, [pc, #172]	; (8000694 <measurePoint+0xb8>)
 80005e6:	4618      	mov	r0, r3
 80005e8:	f005 fd38 	bl	800605c <VL53L0X_PerformSingleRangingMeasurement>

	if(RangingData.RangeStatus == 0){
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <measurePoint+0xb8>)
 80005ee:	7e1b      	ldrb	r3, [r3, #24]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d113      	bne.n	800061c <measurePoint+0x40>
		MessageLen = sprintf((char*)Message, "%i\n", RangingData.RangeMilliMeter); //sensor measurement
 80005f4:	4b27      	ldr	r3, [pc, #156]	; (8000694 <measurePoint+0xb8>)
 80005f6:	891b      	ldrh	r3, [r3, #8]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4927      	ldr	r1, [pc, #156]	; (8000698 <measurePoint+0xbc>)
 80005fc:	4827      	ldr	r0, [pc, #156]	; (800069c <measurePoint+0xc0>)
 80005fe:	f009 fc37 	bl	8009e70 <siprintf>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <measurePoint+0xc4>)
 8000608:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, Message, MessageLen, 6);
 800060a:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <measurePoint+0xc4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	b29a      	uxth	r2, r3
 8000610:	2306      	movs	r3, #6
 8000612:	4922      	ldr	r1, [pc, #136]	; (800069c <measurePoint+0xc0>)
 8000614:	4823      	ldr	r0, [pc, #140]	; (80006a4 <measurePoint+0xc8>)
 8000616:	f003 fcf5 	bl	8004004 <HAL_UART_Transmit>
 800061a:	e00f      	b.n	800063c <measurePoint+0x60>
	} else{
		MessageLen = sprintf((char*)Message, "0\n"); //sensor measurement
 800061c:	4922      	ldr	r1, [pc, #136]	; (80006a8 <measurePoint+0xcc>)
 800061e:	481f      	ldr	r0, [pc, #124]	; (800069c <measurePoint+0xc0>)
 8000620:	f009 fc26 	bl	8009e70 <siprintf>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <measurePoint+0xc4>)
 800062a:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, Message, MessageLen, 6);
 800062c:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <measurePoint+0xc4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	b29a      	uxth	r2, r3
 8000632:	2306      	movs	r3, #6
 8000634:	4919      	ldr	r1, [pc, #100]	; (800069c <measurePoint+0xc0>)
 8000636:	481b      	ldr	r0, [pc, #108]	; (80006a4 <measurePoint+0xc8>)
 8000638:	f003 fce4 	bl	8004004 <HAL_UART_Transmit>
	}

	/*MessageLen = sprintf((char*)Message, "%i\n", RangingData.RangeMilliMeter); //sensor measurement
	HAL_UART_Transmit(&huart3, Message, MessageLen, 6);*/

	MessageLen = sprintf((char*)Message, "%i\n", htim2.Instance->CCR1); //wing angle
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <measurePoint+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000642:	461a      	mov	r2, r3
 8000644:	4914      	ldr	r1, [pc, #80]	; (8000698 <measurePoint+0xbc>)
 8000646:	4815      	ldr	r0, [pc, #84]	; (800069c <measurePoint+0xc0>)
 8000648:	f009 fc12 	bl	8009e70 <siprintf>
 800064c:	4603      	mov	r3, r0
 800064e:	461a      	mov	r2, r3
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <measurePoint+0xc4>)
 8000652:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, Message, MessageLen, 6);
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <measurePoint+0xc4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	b29a      	uxth	r2, r3
 800065a:	2306      	movs	r3, #6
 800065c:	490f      	ldr	r1, [pc, #60]	; (800069c <measurePoint+0xc0>)
 800065e:	4811      	ldr	r0, [pc, #68]	; (80006a4 <measurePoint+0xc8>)
 8000660:	f003 fcd0 	bl	8004004 <HAL_UART_Transmit>

	MessageLen = sprintf((char*)Message, "%i\n", htim2.Instance->CCR3); //base angle
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <measurePoint+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800066a:	461a      	mov	r2, r3
 800066c:	490a      	ldr	r1, [pc, #40]	; (8000698 <measurePoint+0xbc>)
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <measurePoint+0xc0>)
 8000670:	f009 fbfe 	bl	8009e70 <siprintf>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <measurePoint+0xc4>)
 800067a:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, Message, MessageLen, 6);
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <measurePoint+0xc4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	b29a      	uxth	r2, r3
 8000682:	2306      	movs	r3, #6
 8000684:	4905      	ldr	r1, [pc, #20]	; (800069c <measurePoint+0xc0>)
 8000686:	4807      	ldr	r0, [pc, #28]	; (80006a4 <measurePoint+0xc8>)
 8000688:	f003 fcbc 	bl	8004004 <HAL_UART_Transmit>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000000 	.word	0x20000000
 8000694:	20000478 	.word	0x20000478
 8000698:	0800a7e0 	.word	0x0800a7e0
 800069c:	2000064c 	.word	0x2000064c
 80006a0:	20000658 	.word	0x20000658
 80006a4:	200003f0 	.word	0x200003f0
 80006a8:	0800a7e4 	.word	0x0800a7e4
 80006ac:	200003a4 	.word	0x200003a4

080006b0 <moveServo>:

void moveServo(){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0


	htim2.Instance->CCR1 = start_grados_ccr1;
 80006b4:	4b55      	ldr	r3, [pc, #340]	; (800080c <moveServo+0x15c>)
 80006b6:	edd3 7a00 	vldr	s15, [r3]
 80006ba:	4b55      	ldr	r3, [pc, #340]	; (8000810 <moveServo+0x160>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006c2:	ee17 2a90 	vmov	r2, s15
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
	htim2.Instance->CCR3 = start_grados_ccr3;
 80006c8:	4b52      	ldr	r3, [pc, #328]	; (8000814 <moveServo+0x164>)
 80006ca:	edd3 7a00 	vldr	s15, [r3]
 80006ce:	4b50      	ldr	r3, [pc, #320]	; (8000810 <moveServo+0x160>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006d6:	ee17 2a90 	vmov	r2, s15
 80006da:	63da      	str	r2, [r3, #60]	; 0x3c

	MessageLen = sprintf((char*)Message, "5000\n");
 80006dc:	494e      	ldr	r1, [pc, #312]	; (8000818 <moveServo+0x168>)
 80006de:	484f      	ldr	r0, [pc, #316]	; (800081c <moveServo+0x16c>)
 80006e0:	f009 fbc6 	bl	8009e70 <siprintf>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b4d      	ldr	r3, [pc, #308]	; (8000820 <moveServo+0x170>)
 80006ea:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, Message, MessageLen, 6);
 80006ec:	4b4c      	ldr	r3, [pc, #304]	; (8000820 <moveServo+0x170>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	2306      	movs	r3, #6
 80006f4:	4949      	ldr	r1, [pc, #292]	; (800081c <moveServo+0x16c>)
 80006f6:	484b      	ldr	r0, [pc, #300]	; (8000824 <moveServo+0x174>)
 80006f8:	f003 fc84 	bl	8004004 <HAL_UART_Transmit>

	HAL_Delay(1000);
 80006fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000700:	f000 fd12 	bl	8001128 <HAL_Delay>

	while(1){

		if (htim2.Instance->CCR1 >= max_grados_ccr1) {
 8000704:	4b42      	ldr	r3, [pc, #264]	; (8000810 <moveServo+0x160>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800070a:	ee07 3a90 	vmov	s15, r3
 800070e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000712:	4b45      	ldr	r3, [pc, #276]	; (8000828 <moveServo+0x178>)
 8000714:	edd3 7a00 	vldr	s15, [r3]
 8000718:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800071c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000720:	db12      	blt.n	8000748 <moveServo+0x98>
			measurePoint();
 8000722:	f7ff ff5b 	bl	80005dc <measurePoint>
			htim2.Instance->CCR1 = start_grados_ccr1;
 8000726:	4b39      	ldr	r3, [pc, #228]	; (800080c <moveServo+0x15c>)
 8000728:	edd3 7a00 	vldr	s15, [r3]
 800072c:	4b38      	ldr	r3, [pc, #224]	; (8000810 <moveServo+0x160>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000734:	ee17 2a90 	vmov	r2, s15
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
			move_c3 = 1;
 800073a:	4b3c      	ldr	r3, [pc, #240]	; (800082c <moveServo+0x17c>)
 800073c:	2201      	movs	r2, #1
 800073e:	601a      	str	r2, [r3, #0]
			HAL_Delay(100);
 8000740:	2064      	movs	r0, #100	; 0x64
 8000742:	f000 fcf1 	bl	8001128 <HAL_Delay>
 8000746:	e014      	b.n	8000772 <moveServo+0xc2>
		} else {
			measurePoint();
 8000748:	f7ff ff48 	bl	80005dc <measurePoint>
			htim2.Instance->CCR1 += move_length_ccr1;
 800074c:	4b30      	ldr	r3, [pc, #192]	; (8000810 <moveServo+0x160>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000752:	ee07 3a90 	vmov	s15, r3
 8000756:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800075a:	4b35      	ldr	r3, [pc, #212]	; (8000830 <moveServo+0x180>)
 800075c:	edd3 7a00 	vldr	s15, [r3]
 8000760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000764:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <moveServo+0x160>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800076c:	ee17 2a90 	vmov	r2, s15
 8000770:	635a      	str	r2, [r3, #52]	; 0x34
		}

		if (move_c3 == 1){
 8000772:	4b2e      	ldr	r3, [pc, #184]	; (800082c <moveServo+0x17c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d132      	bne.n	80007e0 <moveServo+0x130>
			if (htim2.Instance->CCR3 >= max_grados_ccr3){
 800077a:	4b25      	ldr	r3, [pc, #148]	; (8000810 <moveServo+0x160>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000780:	ee07 3a90 	vmov	s15, r3
 8000784:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000788:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <moveServo+0x184>)
 800078a:	edd3 7a00 	vldr	s15, [r3]
 800078e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000796:	db0d      	blt.n	80007b4 <moveServo+0x104>

				htim2.Instance->CCR3 = start_grados_ccr3;
 8000798:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <moveServo+0x164>)
 800079a:	edd3 7a00 	vldr	s15, [r3]
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <moveServo+0x160>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007a6:	ee17 2a90 	vmov	r2, s15
 80007aa:	63da      	str	r2, [r3, #60]	; 0x3c
				move_c3 = 0;
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <moveServo+0x17c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
				break;
 80007b2:	e019      	b.n	80007e8 <moveServo+0x138>

			} else {
				htim2.Instance->CCR3 += move_length_ccr3;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <moveServo+0x160>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007ba:	ee07 3a90 	vmov	s15, r3
 80007be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <moveServo+0x188>)
 80007c4:	edd3 7a00 	vldr	s15, [r3]
 80007c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007cc:	4b10      	ldr	r3, [pc, #64]	; (8000810 <moveServo+0x160>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007d4:	ee17 2a90 	vmov	r2, s15
 80007d8:	63da      	str	r2, [r3, #60]	; 0x3c
			}

			move_c3 = 0;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <moveServo+0x17c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
		}

		  HAL_Delay(60);
 80007e0:	203c      	movs	r0, #60	; 0x3c
 80007e2:	f000 fca1 	bl	8001128 <HAL_Delay>
		if (htim2.Instance->CCR1 >= max_grados_ccr1) {
 80007e6:	e78d      	b.n	8000704 <moveServo+0x54>

	}

	MessageLen = sprintf((char*)Message, "6000\n");
 80007e8:	4914      	ldr	r1, [pc, #80]	; (800083c <moveServo+0x18c>)
 80007ea:	480c      	ldr	r0, [pc, #48]	; (800081c <moveServo+0x16c>)
 80007ec:	f009 fb40 	bl	8009e70 <siprintf>
 80007f0:	4603      	mov	r3, r0
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <moveServo+0x170>)
 80007f6:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, Message, MessageLen, 6);
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <moveServo+0x170>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	2306      	movs	r3, #6
 8000800:	4906      	ldr	r1, [pc, #24]	; (800081c <moveServo+0x16c>)
 8000802:	4808      	ldr	r0, [pc, #32]	; (8000824 <moveServo+0x174>)
 8000804:	f003 fbfe 	bl	8004004 <HAL_UART_Transmit>

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000004 	.word	0x20000004
 8000810:	200003a4 	.word	0x200003a4
 8000814:	20000010 	.word	0x20000010
 8000818:	0800a7e8 	.word	0x0800a7e8
 800081c:	2000064c 	.word	0x2000064c
 8000820:	20000658 	.word	0x20000658
 8000824:	200003f0 	.word	0x200003f0
 8000828:	20000008 	.word	0x20000008
 800082c:	20000648 	.word	0x20000648
 8000830:	2000000c 	.word	0x2000000c
 8000834:	20000014 	.word	0x20000014
 8000838:	20000018 	.word	0x20000018
 800083c:	0800a7f0 	.word	0x0800a7f0

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f000 fc12 	bl	800106e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f891 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f000 f9bf 	bl	8000bd0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000852:	f000 f8e9 	bl	8000a28 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000856:	f000 f98b 	bl	8000b70 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800085a:	f000 f925 	bl	8000aa8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Dev->I2cHandle = &hi2c2;
 800085e:	4b40      	ldr	r3, [pc, #256]	; (8000960 <main+0x120>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a40      	ldr	r2, [pc, #256]	; (8000964 <main+0x124>)
 8000864:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  Dev->I2cDevAddr = 0x52;
 8000868:	4b3d      	ldr	r3, [pc, #244]	; (8000960 <main+0x120>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2252      	movs	r2, #82	; 0x52
 800086e:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000872:	2100      	movs	r1, #0
 8000874:	483c      	ldr	r0, [pc, #240]	; (8000968 <main+0x128>)
 8000876:	f002 fdb7 	bl	80033e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800087a:	2108      	movs	r1, #8
 800087c:	483a      	ldr	r0, [pc, #232]	; (8000968 <main+0x128>)
 800087e:	f002 fdb3 	bl	80033e8 <HAL_TIM_PWM_Start>

  //Primero ponemos el cervo así para checar que está bien puesta
  //la 'ala' del cervo
  htim2.Instance->CCR1 = 1500; //1500 == 90 grados
 8000882:	4b39      	ldr	r3, [pc, #228]	; (8000968 <main+0x128>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800088a:	635a      	str	r2, [r3, #52]	; 0x34
  htim2.Instance->CCR3 = 1500;
 800088c:	4b36      	ldr	r3, [pc, #216]	; (8000968 <main+0x128>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000894:	63da      	str	r2, [r3, #60]	; 0x3c

  //
  // VL53L0X init for Single Measurement
  //

  VL53L0X_WaitDeviceBooted( Dev );
 8000896:	4b32      	ldr	r3, [pc, #200]	; (8000960 <main+0x120>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f004 fb6c 	bl	8004f78 <VL53L0X_WaitDeviceBooted>
  VL53L0X_DataInit( Dev );
 80008a0:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <main+0x120>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f004 f85d 	bl	8004964 <VL53L0X_DataInit>
  VL53L0X_StaticInit( Dev );
 80008aa:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <main+0x120>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f004 f9de 	bl	8004c70 <VL53L0X_StaticInit>
  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 80008b4:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <main+0x120>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	1d7a      	adds	r2, r7, #5
 80008ba:	1db9      	adds	r1, r7, #6
 80008bc:	4618      	mov	r0, r3
 80008be:	f005 f89f 	bl	8005a00 <VL53L0X_PerformRefCalibration>
  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 80008c2:	4b27      	ldr	r3, [pc, #156]	; (8000960 <main+0x120>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	1dfa      	adds	r2, r7, #7
 80008c8:	f107 0108 	add.w	r1, r7, #8
 80008cc:	4618      	mov	r0, r3
 80008ce:	f005 fdaf 	bl	8006430 <VL53L0X_PerformRefSpadManagement>
  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80008d2:	4b23      	ldr	r3, [pc, #140]	; (8000960 <main+0x120>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f004 fc11 	bl	8005100 <VL53L0X_SetDeviceMode>

  // Enable/Disable Sigma and Signal check
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <main+0x120>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2201      	movs	r2, #1
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f004 fe84 	bl	80055f4 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80008ec:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <main+0x120>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2201      	movs	r2, #1
 80008f2:	2101      	movs	r1, #1
 80008f4:	4618      	mov	r0, r3
 80008f6:	f004 fe7d 	bl	80055f4 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <main+0x120>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f641 1299 	movw	r2, #6553	; 0x1999
 8000902:	2101      	movs	r1, #1
 8000904:	4618      	mov	r0, r3
 8000906:	f004 ff25 	bl	8005754 <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <main+0x120>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f004 ff1d 	bl	8005754 <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <main+0x120>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8000922:	4618      	mov	r0, r3
 8000924:	f004 fc4a 	bl	80051bc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <main+0x120>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2212      	movs	r2, #18
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f004 fc69 	bl	8005208 <VL53L0X_SetVcselPulsePeriod>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <main+0x120>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	220e      	movs	r2, #14
 800093c:	2101      	movs	r1, #1
 800093e:	4618      	mov	r0, r3
 8000940:	f004 fc62 	bl	8005208 <VL53L0X_SetVcselPulsePeriod>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  GPIO_PinState buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000948:	4808      	ldr	r0, [pc, #32]	; (800096c <main+0x12c>)
 800094a:	f000 fea3 	bl	8001694 <HAL_GPIO_ReadPin>
 800094e:	4603      	mov	r3, r0
 8000950:	73fb      	strb	r3, [r7, #15]
	  if (buttonState == GPIO_PIN_SET) {
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d1f5      	bne.n	8000944 <main+0x104>
	  		  moveServo();
 8000958:	f7ff feaa 	bl	80006b0 <moveServo>
  {
 800095c:	e7f2      	b.n	8000944 <main+0x104>
 800095e:	bf00      	nop
 8000960:	20000000 	.word	0x20000000
 8000964:	20000350 	.word	0x20000350
 8000968:	200003a4 	.word	0x200003a4
 800096c:	40020800 	.word	0x40020800

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	; 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2234      	movs	r2, #52	; 0x34
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f009 fa96 	bl	8009eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <SystemClock_Config+0xb0>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	4a21      	ldr	r2, [pc, #132]	; (8000a20 <SystemClock_Config+0xb0>)
 800099a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099e:	6413      	str	r3, [r2, #64]	; 0x40
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <SystemClock_Config+0xb0>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <SystemClock_Config+0xb4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b4:	4a1b      	ldr	r2, [pc, #108]	; (8000a24 <SystemClock_Config+0xb4>)
 80009b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <SystemClock_Config+0xb4>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009cc:	2301      	movs	r3, #1
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d0:	2310      	movs	r3, #16
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fbef 	bl	80021c0 <HAL_RCC_OscConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80009e8:	f000 f94e 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ec:	230f      	movs	r3, #15
 80009ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 fe88 	bl	800271c <HAL_RCC_ClockConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a12:	f000 f939 	bl	8000c88 <Error_Handler>
  }
}
 8000a16:	bf00      	nop
 8000a18:	3750      	adds	r7, #80	; 0x50
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40007000 	.word	0x40007000

08000a28 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_I2C2_Init+0x74>)
 8000a2e:	4a1c      	ldr	r2, [pc, #112]	; (8000aa0 <MX_I2C2_Init+0x78>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_I2C2_Init+0x74>)
 8000a34:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <MX_I2C2_Init+0x7c>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_I2C2_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_I2C2_Init+0x74>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <MX_I2C2_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_I2C2_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_I2C2_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_I2C2_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_I2C2_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a62:	480e      	ldr	r0, [pc, #56]	; (8000a9c <MX_I2C2_Init+0x74>)
 8000a64:	f000 fe2e 	bl	80016c4 <HAL_I2C_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a6e:	f000 f90b 	bl	8000c88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a72:	2100      	movs	r1, #0
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <MX_I2C2_Init+0x74>)
 8000a76:	f001 fb0b 	bl	8002090 <HAL_I2CEx_ConfigAnalogFilter>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a80:	f000 f902 	bl	8000c88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a84:	2100      	movs	r1, #0
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_I2C2_Init+0x74>)
 8000a88:	f001 fb4d 	bl	8002126 <HAL_I2CEx_ConfigDigitalFilter>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a92:	f000 f8f9 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000350 	.word	0x20000350
 8000aa0:	40005800 	.word	0x40005800
 8000aa4:	00303d5b 	.word	0x00303d5b

08000aa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aba:	463b      	mov	r3, r7
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
 8000ac8:	615a      	str	r2, [r3, #20]
 8000aca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000acc:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <MX_TIM2_Init+0xc4>)
 8000ace:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000ad4:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <MX_TIM2_Init+0xc4>)
 8000ad6:	220f      	movs	r2, #15
 8000ad8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ada:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <MX_TIM2_Init+0xc4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <MX_TIM2_Init+0xc4>)
 8000ae2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ae6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae8:	4b20      	ldr	r3, [pc, #128]	; (8000b6c <MX_TIM2_Init+0xc4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_TIM2_Init+0xc4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000af4:	481d      	ldr	r0, [pc, #116]	; (8000b6c <MX_TIM2_Init+0xc4>)
 8000af6:	f002 fc1f 	bl	8003338 <HAL_TIM_PWM_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000b00:	f000 f8c2 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4816      	ldr	r0, [pc, #88]	; (8000b6c <MX_TIM2_Init+0xc4>)
 8000b14:	f003 f99a 	bl	8003e4c <HAL_TIMEx_MasterConfigSynchronization>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000b1e:	f000 f8b3 	bl	8000c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b22:	2360      	movs	r3, #96	; 0x60
 8000b24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b32:	463b      	mov	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	4619      	mov	r1, r3
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <MX_TIM2_Init+0xc4>)
 8000b3a:	f002 fd4f 	bl	80035dc <HAL_TIM_PWM_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b44:	f000 f8a0 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2208      	movs	r2, #8
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4807      	ldr	r0, [pc, #28]	; (8000b6c <MX_TIM2_Init+0xc4>)
 8000b50:	f002 fd44 	bl	80035dc <HAL_TIM_PWM_ConfigChannel>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000b5a:	f000 f895 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b5e:	4803      	ldr	r0, [pc, #12]	; (8000b6c <MX_TIM2_Init+0xc4>)
 8000b60:	f000 f93c 	bl	8000ddc <HAL_TIM_MspPostInit>

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200003a4 	.word	0x200003a4

08000b70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b76:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <MX_USART3_UART_Init+0x5c>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000bb4:	f003 f9d8 	bl	8003f68 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bbe:	f000 f863 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200003f0 	.word	0x200003f0
 8000bcc:	40004800 	.word	0x40004800

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <MX_GPIO_Init+0xb0>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a25      	ldr	r2, [pc, #148]	; (8000c80 <MX_GPIO_Init+0xb0>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <MX_GPIO_Init+0xb0>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bfe:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <MX_GPIO_Init+0xb0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a1f      	ldr	r2, [pc, #124]	; (8000c80 <MX_GPIO_Init+0xb0>)
 8000c04:	f043 0320 	orr.w	r3, r3, #32
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <MX_GPIO_Init+0xb0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0320 	and.w	r3, r3, #32
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_GPIO_Init+0xb0>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <MX_GPIO_Init+0xb0>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <MX_GPIO_Init+0xb0>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_GPIO_Init+0xb0>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <MX_GPIO_Init+0xb0>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_GPIO_Init+0xb0>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_GPIO_Init+0xb0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <MX_GPIO_Init+0xb0>)
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MX_GPIO_Init+0xb0>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0308 	and.w	r3, r3, #8
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MX_GPIO_Init+0xb4>)
 8000c74:	f000 fb62 	bl	800133c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c78:	bf00      	nop
 8000c7a:	3728      	adds	r7, #40	; 0x28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020800 	.word	0x40020800

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <Error_Handler+0x8>
	...

08000c94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	210f      	movs	r1, #15
 8000cce:	f06f 0001 	mvn.w	r0, #1
 8000cd2:	f000 fb0a 	bl	80012ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0ae      	sub	sp, #184	; 0xb8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2290      	movs	r2, #144	; 0x90
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f009 f8d3 	bl	8009eb0 <memset>
  if(hi2c->Instance==I2C2)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <HAL_I2C_MspInit+0xb0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d13b      	bne.n	8000d8c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d18:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 fee0 	bl	8002ae8 <HAL_RCCEx_PeriphCLKConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d2e:	f7ff ffab 	bl	8000c88 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_I2C_MspInit+0xb4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <HAL_I2C_MspInit+0xb4>)
 8000d38:	f043 0320 	orr.w	r3, r3, #32
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <HAL_I2C_MspInit+0xb4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0320 	and.w	r3, r3, #32
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d50:	2312      	movs	r3, #18
 8000d52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d62:	2304      	movs	r3, #4
 8000d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480b      	ldr	r0, [pc, #44]	; (8000d9c <HAL_I2C_MspInit+0xb8>)
 8000d70:	f000 fae4 	bl	800133c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_I2C_MspInit+0xb4>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <HAL_I2C_MspInit+0xb4>)
 8000d7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <HAL_I2C_MspInit+0xb4>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d8c:	bf00      	nop
 8000d8e:	37b8      	adds	r7, #184	; 0xb8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40005800 	.word	0x40005800
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40021400 	.word	0x40021400

08000da0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db0:	d10b      	bne.n	8000dca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x38>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x38>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x38>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800

08000ddc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dfc:	d138      	bne.n	8000e70 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <HAL_TIM_MspPostInit+0x9c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <HAL_TIM_MspPostInit+0x9c>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <HAL_TIM_MspPostInit+0x9c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <HAL_TIM_MspPostInit+0x9c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <HAL_TIM_MspPostInit+0x9c>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_TIM_MspPostInit+0x9c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	480c      	ldr	r0, [pc, #48]	; (8000e7c <HAL_TIM_MspPostInit+0xa0>)
 8000e4a:	f000 fa77 	bl	800133c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e60:	2301      	movs	r3, #1
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <HAL_TIM_MspPostInit+0xa4>)
 8000e6c:	f000 fa66 	bl	800133c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	; 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40020400 	.word	0x40020400

08000e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0ae      	sub	sp, #184	; 0xb8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2290      	movs	r2, #144	; 0x90
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f009 f803 	bl	8009eb0 <memset>
  if(huart->Instance==USART3)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <HAL_UART_MspInit+0xb4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d13c      	bne.n	8000f2e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 fe10 	bl	8002ae8 <HAL_RCCEx_PeriphCLKConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ece:	f7ff fedb 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <HAL_UART_MspInit+0xb8>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <HAL_UART_MspInit+0xb8>)
 8000ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_UART_MspInit+0xb8>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_UART_MspInit+0xb8>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a13      	ldr	r2, [pc, #76]	; (8000f3c <HAL_UART_MspInit+0xb8>)
 8000ef0:	f043 0308 	orr.w	r3, r3, #8
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_UART_MspInit+0xb8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f22:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_UART_MspInit+0xbc>)
 8000f2a:	f000 fa07 	bl	800133c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	37b8      	adds	r7, #184	; 0xb8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40004800 	.word	0x40004800
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020c00 	.word	0x40020c00

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 f8b8 	bl	80010e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f78:	f008 fee6 	bl	8009d48 <xTaskGetSchedulerState>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d001      	beq.n	8000f86 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f82:	f008 ff51 	bl	8009e28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f94:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <_sbrk+0x5c>)
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <_sbrk+0x60>)
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <_sbrk+0x64>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <_sbrk+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d207      	bcs.n	8000fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fbc:	f008 ff80 	bl	8009ec0 <__errno>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	e009      	b.n	8000fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <_sbrk+0x64>)
 8000fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20080000 	.word	0x20080000
 8000fec:	00000400 	.word	0x00000400
 8000ff0:	2000065c 	.word	0x2000065c
 8000ff4:	200008a8 	.word	0x200008a8

08000ff8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001022:	490e      	ldr	r1, [pc, #56]	; (800105c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001024:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001038:	4c0b      	ldr	r4, [pc, #44]	; (8001068 <LoopFillZerobss+0x26>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001046:	f7ff ffd7 	bl	8000ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104a:	f008 ff3f 	bl	8009ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104e:	f7ff fbf7 	bl	8000840 <main>
  bx  lr    
 8001052:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001054:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8001060:	0800a854 	.word	0x0800a854
  ldr r2, =_sbss
 8001064:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8001068:	200008a4 	.word	0x200008a4

0800106c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC_IRQHandler>

0800106e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001072:	2003      	movs	r0, #3
 8001074:	f000 f92e 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001078:	200f      	movs	r0, #15
 800107a:	f000 f805 	bl	8001088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800107e:	f7ff fe09 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_InitTick+0x54>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_InitTick+0x58>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f93b 	bl	8001322 <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00e      	b.n	80010d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d80a      	bhi.n	80010d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f000 f911 	bl	80012ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_InitTick+0x5c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000001c 	.word	0x2000001c
 80010e0:	20000024 	.word	0x20000024
 80010e4:	20000020 	.word	0x20000020

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000024 	.word	0x20000024
 800110c:	20000660 	.word	0x20000660

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000660 	.word	0x20000660

08001128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff ffee 	bl	8001110 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d005      	beq.n	800114e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_Delay+0x44>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114e:	bf00      	nop
 8001150:	f7ff ffde 	bl	8001110 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8f7      	bhi.n	8001150 <HAL_Delay+0x28>
  {
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000024 	.word	0x20000024

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 800119a:	4313      	orrs	r3, r2
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <__NVIC_SetPriorityGrouping+0x40>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00
 80011b4:	05fa0000 	.word	0x05fa0000

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	; (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
         );
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f7ff ff8e 	bl	80011d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff47 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012fc:	f7ff ff5c 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 8001300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff ff8e 	bl	8001228 <NVIC_EncodePriority>
 800130c:	4602      	mov	r2, r0
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff5d 	bl	80011d4 <__NVIC_SetPriority>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ffb0 	bl	8001290 <SysTick_Config>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
 800135a:	e175      	b.n	8001648 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800135c:	2201      	movs	r2, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	429a      	cmp	r2, r3
 8001376:	f040 8164 	bne.w	8001642 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	2b01      	cmp	r3, #1
 8001384:	d005      	beq.n	8001392 <HAL_GPIO_Init+0x56>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d130      	bne.n	80013f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	2203      	movs	r2, #3
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013c8:	2201      	movs	r2, #1
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	091b      	lsrs	r3, r3, #4
 80013de:	f003 0201 	and.w	r2, r3, #1
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d017      	beq.n	8001430 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d123      	bne.n	8001484 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	08da      	lsrs	r2, r3, #3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3208      	adds	r2, #8
 8001444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	220f      	movs	r2, #15
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	691a      	ldr	r2, [r3, #16]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	08da      	lsrs	r2, r3, #3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3208      	adds	r2, #8
 800147e:	69b9      	ldr	r1, [r7, #24]
 8001480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0203 	and.w	r2, r3, #3
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80be 	beq.w	8001642 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	4b66      	ldr	r3, [pc, #408]	; (8001660 <HAL_GPIO_Init+0x324>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	4a65      	ldr	r2, [pc, #404]	; (8001660 <HAL_GPIO_Init+0x324>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
 80014d2:	4b63      	ldr	r3, [pc, #396]	; (8001660 <HAL_GPIO_Init+0x324>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014de:	4a61      	ldr	r2, [pc, #388]	; (8001664 <HAL_GPIO_Init+0x328>)
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	3302      	adds	r3, #2
 80014e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	220f      	movs	r2, #15
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a58      	ldr	r2, [pc, #352]	; (8001668 <HAL_GPIO_Init+0x32c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d037      	beq.n	800157a <HAL_GPIO_Init+0x23e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a57      	ldr	r2, [pc, #348]	; (800166c <HAL_GPIO_Init+0x330>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d031      	beq.n	8001576 <HAL_GPIO_Init+0x23a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a56      	ldr	r2, [pc, #344]	; (8001670 <HAL_GPIO_Init+0x334>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d02b      	beq.n	8001572 <HAL_GPIO_Init+0x236>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a55      	ldr	r2, [pc, #340]	; (8001674 <HAL_GPIO_Init+0x338>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d025      	beq.n	800156e <HAL_GPIO_Init+0x232>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a54      	ldr	r2, [pc, #336]	; (8001678 <HAL_GPIO_Init+0x33c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d01f      	beq.n	800156a <HAL_GPIO_Init+0x22e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a53      	ldr	r2, [pc, #332]	; (800167c <HAL_GPIO_Init+0x340>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d019      	beq.n	8001566 <HAL_GPIO_Init+0x22a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a52      	ldr	r2, [pc, #328]	; (8001680 <HAL_GPIO_Init+0x344>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0x226>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a51      	ldr	r2, [pc, #324]	; (8001684 <HAL_GPIO_Init+0x348>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d00d      	beq.n	800155e <HAL_GPIO_Init+0x222>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a50      	ldr	r2, [pc, #320]	; (8001688 <HAL_GPIO_Init+0x34c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d007      	beq.n	800155a <HAL_GPIO_Init+0x21e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4f      	ldr	r2, [pc, #316]	; (800168c <HAL_GPIO_Init+0x350>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_GPIO_Init+0x21a>
 8001552:	2309      	movs	r3, #9
 8001554:	e012      	b.n	800157c <HAL_GPIO_Init+0x240>
 8001556:	230a      	movs	r3, #10
 8001558:	e010      	b.n	800157c <HAL_GPIO_Init+0x240>
 800155a:	2308      	movs	r3, #8
 800155c:	e00e      	b.n	800157c <HAL_GPIO_Init+0x240>
 800155e:	2307      	movs	r3, #7
 8001560:	e00c      	b.n	800157c <HAL_GPIO_Init+0x240>
 8001562:	2306      	movs	r3, #6
 8001564:	e00a      	b.n	800157c <HAL_GPIO_Init+0x240>
 8001566:	2305      	movs	r3, #5
 8001568:	e008      	b.n	800157c <HAL_GPIO_Init+0x240>
 800156a:	2304      	movs	r3, #4
 800156c:	e006      	b.n	800157c <HAL_GPIO_Init+0x240>
 800156e:	2303      	movs	r3, #3
 8001570:	e004      	b.n	800157c <HAL_GPIO_Init+0x240>
 8001572:	2302      	movs	r3, #2
 8001574:	e002      	b.n	800157c <HAL_GPIO_Init+0x240>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <HAL_GPIO_Init+0x240>
 800157a:	2300      	movs	r3, #0
 800157c:	69fa      	ldr	r2, [r7, #28]
 800157e:	f002 0203 	and.w	r2, r2, #3
 8001582:	0092      	lsls	r2, r2, #2
 8001584:	4093      	lsls	r3, r2
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800158c:	4935      	ldr	r1, [pc, #212]	; (8001664 <HAL_GPIO_Init+0x328>)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	089b      	lsrs	r3, r3, #2
 8001592:	3302      	adds	r3, #2
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159a:	4b3d      	ldr	r3, [pc, #244]	; (8001690 <HAL_GPIO_Init+0x354>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015be:	4a34      	ldr	r2, [pc, #208]	; (8001690 <HAL_GPIO_Init+0x354>)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <HAL_GPIO_Init+0x354>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e8:	4a29      	ldr	r2, [pc, #164]	; (8001690 <HAL_GPIO_Init+0x354>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ee:	4b28      	ldr	r3, [pc, #160]	; (8001690 <HAL_GPIO_Init+0x354>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001612:	4a1f      	ldr	r2, [pc, #124]	; (8001690 <HAL_GPIO_Init+0x354>)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <HAL_GPIO_Init+0x354>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800163c:	4a14      	ldr	r2, [pc, #80]	; (8001690 <HAL_GPIO_Init+0x354>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3301      	adds	r3, #1
 8001646:	61fb      	str	r3, [r7, #28]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	2b0f      	cmp	r3, #15
 800164c:	f67f ae86 	bls.w	800135c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	3724      	adds	r7, #36	; 0x24
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	40013800 	.word	0x40013800
 8001668:	40020000 	.word	0x40020000
 800166c:	40020400 	.word	0x40020400
 8001670:	40020800 	.word	0x40020800
 8001674:	40020c00 	.word	0x40020c00
 8001678:	40021000 	.word	0x40021000
 800167c:	40021400 	.word	0x40021400
 8001680:	40021800 	.word	0x40021800
 8001684:	40021c00 	.word	0x40021c00
 8001688:	40022000 	.word	0x40022000
 800168c:	40022400 	.word	0x40022400
 8001690:	40013c00 	.word	0x40013c00

08001694 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691a      	ldr	r2, [r3, #16]
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	e001      	b.n	80016b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e07f      	b.n	80017d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d106      	bne.n	80016f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff fafa 	bl	8000ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2224      	movs	r2, #36	; 0x24
 80016f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0201 	bic.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001714:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001724:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d107      	bne.n	800173e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	e006      	b.n	800174c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800174a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d104      	bne.n	800175e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800175c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <HAL_I2C_Init+0x11c>)
 800176a:	430b      	orrs	r3, r1
 800176c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800177c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691a      	ldr	r2, [r3, #16]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69d9      	ldr	r1, [r3, #28]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a1a      	ldr	r2, [r3, #32]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0201 	orr.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2220      	movs	r2, #32
 80017c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	02008000 	.word	0x02008000

080017e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	461a      	mov	r2, r3
 80017f0:	460b      	mov	r3, r1
 80017f2:	817b      	strh	r3, [r7, #10]
 80017f4:	4613      	mov	r3, r2
 80017f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b20      	cmp	r3, #32
 8001802:	f040 80da 	bne.w	80019ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_I2C_Master_Transmit+0x30>
 8001810:	2302      	movs	r3, #2
 8001812:	e0d3      	b.n	80019bc <HAL_I2C_Master_Transmit+0x1d8>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800181c:	f7ff fc78 	bl	8001110 <HAL_GetTick>
 8001820:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2319      	movs	r3, #25
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 f9e6 	bl	8001c00 <I2C_WaitOnFlagUntilTimeout>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e0be      	b.n	80019bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2221      	movs	r2, #33	; 0x21
 8001842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2210      	movs	r2, #16
 800184a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	893a      	ldrh	r2, [r7, #8]
 800185e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186a:	b29b      	uxth	r3, r3
 800186c:	2bff      	cmp	r3, #255	; 0xff
 800186e:	d90e      	bls.n	800188e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	22ff      	movs	r2, #255	; 0xff
 8001874:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187a:	b2da      	uxtb	r2, r3
 800187c:	8979      	ldrh	r1, [r7, #10]
 800187e:	4b51      	ldr	r3, [pc, #324]	; (80019c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 fbd0 	bl	800202c <I2C_TransferConfig>
 800188c:	e06c      	b.n	8001968 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189c:	b2da      	uxtb	r2, r3
 800189e:	8979      	ldrh	r1, [r7, #10]
 80018a0:	4b48      	ldr	r3, [pc, #288]	; (80019c4 <HAL_I2C_Master_Transmit+0x1e0>)
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 fbbf 	bl	800202c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80018ae:	e05b      	b.n	8001968 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	6a39      	ldr	r1, [r7, #32]
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f9e3 	bl	8001c80 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e07b      	b.n	80019bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	781a      	ldrb	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018de:	b29b      	uxth	r3, r3
 80018e0:	3b01      	subs	r3, #1
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d034      	beq.n	8001968 <HAL_I2C_Master_Transmit+0x184>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001902:	2b00      	cmp	r3, #0
 8001904:	d130      	bne.n	8001968 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	2200      	movs	r2, #0
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 f975 	bl	8001c00 <I2C_WaitOnFlagUntilTimeout>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e04d      	b.n	80019bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001924:	b29b      	uxth	r3, r3
 8001926:	2bff      	cmp	r3, #255	; 0xff
 8001928:	d90e      	bls.n	8001948 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	22ff      	movs	r2, #255	; 0xff
 800192e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001934:	b2da      	uxtb	r2, r3
 8001936:	8979      	ldrh	r1, [r7, #10]
 8001938:	2300      	movs	r3, #0
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 fb73 	bl	800202c <I2C_TransferConfig>
 8001946:	e00f      	b.n	8001968 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001956:	b2da      	uxtb	r2, r3
 8001958:	8979      	ldrh	r1, [r7, #10]
 800195a:	2300      	movs	r3, #0
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 fb62 	bl	800202c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196c:	b29b      	uxth	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d19e      	bne.n	80018b0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	6a39      	ldr	r1, [r7, #32]
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 f9c2 	bl	8001d00 <I2C_WaitOnSTOPFlagUntilTimeout>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e01a      	b.n	80019bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2220      	movs	r2, #32
 800198c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6859      	ldr	r1, [r3, #4]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800199a:	400b      	ands	r3, r1
 800199c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2220      	movs	r2, #32
 80019a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80019ba:	2302      	movs	r3, #2
  }
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	80002000 	.word	0x80002000
 80019c8:	fe00e800 	.word	0xfe00e800

080019cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	461a      	mov	r2, r3
 80019d8:	460b      	mov	r3, r1
 80019da:	817b      	strh	r3, [r7, #10]
 80019dc:	4613      	mov	r3, r2
 80019de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b20      	cmp	r3, #32
 80019ea:	f040 80db 	bne.w	8001ba4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_I2C_Master_Receive+0x30>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e0d4      	b.n	8001ba6 <HAL_I2C_Master_Receive+0x1da>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a04:	f7ff fb84 	bl	8001110 <HAL_GetTick>
 8001a08:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2319      	movs	r3, #25
 8001a10:	2201      	movs	r2, #1
 8001a12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 f8f2 	bl	8001c00 <I2C_WaitOnFlagUntilTimeout>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0bf      	b.n	8001ba6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2222      	movs	r2, #34	; 0x22
 8001a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2210      	movs	r2, #16
 8001a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	893a      	ldrh	r2, [r7, #8]
 8001a46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	2bff      	cmp	r3, #255	; 0xff
 8001a56:	d90e      	bls.n	8001a76 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	22ff      	movs	r2, #255	; 0xff
 8001a5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	8979      	ldrh	r1, [r7, #10]
 8001a66:	4b52      	ldr	r3, [pc, #328]	; (8001bb0 <HAL_I2C_Master_Receive+0x1e4>)
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 fadc 	bl	800202c <I2C_TransferConfig>
 8001a74:	e06d      	b.n	8001b52 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	8979      	ldrh	r1, [r7, #10]
 8001a88:	4b49      	ldr	r3, [pc, #292]	; (8001bb0 <HAL_I2C_Master_Receive+0x1e4>)
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 facb 	bl	800202c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001a96:	e05c      	b.n	8001b52 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	6a39      	ldr	r1, [r7, #32]
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f000 f96b 	bl	8001d78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e07c      	b.n	8001ba6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d034      	beq.n	8001b52 <HAL_I2C_Master_Receive+0x186>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d130      	bne.n	8001b52 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	2200      	movs	r2, #0
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 f880 	bl	8001c00 <I2C_WaitOnFlagUntilTimeout>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e04d      	b.n	8001ba6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	2bff      	cmp	r3, #255	; 0xff
 8001b12:	d90e      	bls.n	8001b32 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	22ff      	movs	r2, #255	; 0xff
 8001b18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	8979      	ldrh	r1, [r7, #10]
 8001b22:	2300      	movs	r3, #0
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 fa7e 	bl	800202c <I2C_TransferConfig>
 8001b30:	e00f      	b.n	8001b52 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	8979      	ldrh	r1, [r7, #10]
 8001b44:	2300      	movs	r3, #0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 fa6d 	bl	800202c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d19d      	bne.n	8001a98 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	6a39      	ldr	r1, [r7, #32]
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 f8cd 	bl	8001d00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e01a      	b.n	8001ba6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2220      	movs	r2, #32
 8001b76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6859      	ldr	r1, [r3, #4]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_I2C_Master_Receive+0x1e8>)
 8001b84:	400b      	ands	r3, r1
 8001b86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e000      	b.n	8001ba6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001ba4:	2302      	movs	r3, #2
  }
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	80002400 	.word	0x80002400
 8001bb4:	fe00e800 	.word	0xfe00e800

08001bb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d103      	bne.n	8001bd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d007      	beq.n	8001bf4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	619a      	str	r2, [r3, #24]
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c10:	e022      	b.n	8001c58 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d01e      	beq.n	8001c58 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c1a:	f7ff fa79 	bl	8001110 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d302      	bcc.n	8001c30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d113      	bne.n	8001c58 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	f043 0220 	orr.w	r2, r3, #32
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e00f      	b.n	8001c78 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699a      	ldr	r2, [r3, #24]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4013      	ands	r3, r2
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	bf0c      	ite	eq
 8001c68:	2301      	moveq	r3, #1
 8001c6a:	2300      	movne	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d0cd      	beq.n	8001c12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c8c:	e02c      	b.n	8001ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f8ea 	bl	8001e6c <I2C_IsErrorOccurred>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e02a      	b.n	8001cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d01e      	beq.n	8001ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001caa:	f7ff fa31 	bl	8001110 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d302      	bcc.n	8001cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d113      	bne.n	8001ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	f043 0220 	orr.w	r2, r3, #32
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e007      	b.n	8001cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d1cb      	bne.n	8001c8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d0c:	e028      	b.n	8001d60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68b9      	ldr	r1, [r7, #8]
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 f8aa 	bl	8001e6c <I2C_IsErrorOccurred>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e026      	b.n	8001d70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d22:	f7ff f9f5 	bl	8001110 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d302      	bcc.n	8001d38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d113      	bne.n	8001d60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3c:	f043 0220 	orr.w	r2, r3, #32
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e007      	b.n	8001d70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	d1cf      	bne.n	8001d0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d84:	e064      	b.n	8001e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f86e 	bl	8001e6c <I2C_IsErrorOccurred>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e062      	b.n	8001e60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	2b20      	cmp	r3, #32
 8001da6:	d138      	bne.n	8001e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d105      	bne.n	8001dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e04e      	b.n	8001e60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b10      	cmp	r3, #16
 8001dce:	d107      	bne.n	8001de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2210      	movs	r2, #16
 8001dd6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2204      	movs	r2, #4
 8001ddc:	645a      	str	r2, [r3, #68]	; 0x44
 8001dde:	e002      	b.n	8001de6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2220      	movs	r2, #32
 8001dec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001dfa:	400b      	ands	r3, r1
 8001dfc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2220      	movs	r2, #32
 8001e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e022      	b.n	8001e60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e1a:	f7ff f979 	bl	8001110 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d302      	bcc.n	8001e30 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10f      	bne.n	8001e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	f043 0220 	orr.w	r2, r3, #32
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e007      	b.n	8001e60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d193      	bne.n	8001d86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	fe00e800 	.word	0xfe00e800

08001e6c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d068      	beq.n	8001f6a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ea0:	e049      	b.n	8001f36 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea8:	d045      	beq.n	8001f36 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001eaa:	f7ff f931 	bl	8001110 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d302      	bcc.n	8001ec0 <I2C_IsErrorOccurred+0x54>
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d13a      	bne.n	8001f36 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ed2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ee2:	d121      	bne.n	8001f28 <I2C_IsErrorOccurred+0xbc>
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eea:	d01d      	beq.n	8001f28 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001eec:	7cfb      	ldrb	r3, [r7, #19]
 8001eee:	2b20      	cmp	r3, #32
 8001ef0:	d01a      	beq.n	8001f28 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f00:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f02:	f7ff f905 	bl	8001110 <HAL_GetTick>
 8001f06:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f08:	e00e      	b.n	8001f28 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f0a:	f7ff f901 	bl	8001110 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b19      	cmp	r3, #25
 8001f16:	d907      	bls.n	8001f28 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	f043 0320 	orr.w	r3, r3, #32
 8001f1e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001f26:	e006      	b.n	8001f36 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f003 0320 	and.w	r3, r3, #32
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	d1e9      	bne.n	8001f0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b20      	cmp	r3, #32
 8001f42:	d003      	beq.n	8001f4c <I2C_IsErrorOccurred+0xe0>
 8001f44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0aa      	beq.n	8001ea2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d103      	bne.n	8001f5c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	f043 0304 	orr.w	r3, r3, #4
 8001f62:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00b      	beq.n	8001f94 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	f043 0308 	orr.w	r3, r3, #8
 8001fa4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00b      	beq.n	8001fd8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
 8001fc6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d01c      	beq.n	800201a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f7ff fde9 	bl	8001bb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6859      	ldr	r1, [r3, #4]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <I2C_IsErrorOccurred+0x1bc>)
 8001ff2:	400b      	ands	r3, r1
 8001ff4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2220      	movs	r2, #32
 8002006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800201a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800201e:	4618      	mov	r0, r3
 8002020:	3728      	adds	r7, #40	; 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	fe00e800 	.word	0xfe00e800

0800202c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	460b      	mov	r3, r1
 8002038:	817b      	strh	r3, [r7, #10]
 800203a:	4613      	mov	r3, r2
 800203c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800203e:	897b      	ldrh	r3, [r7, #10]
 8002040:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002044:	7a7b      	ldrb	r3, [r7, #9]
 8002046:	041b      	lsls	r3, r3, #16
 8002048:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800204c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	4313      	orrs	r3, r2
 8002056:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800205a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	0d5b      	lsrs	r3, r3, #21
 8002066:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <I2C_TransferConfig+0x60>)
 800206c:	430b      	orrs	r3, r1
 800206e:	43db      	mvns	r3, r3
 8002070:	ea02 0103 	and.w	r1, r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800207e:	bf00      	nop
 8002080:	371c      	adds	r7, #28
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	03ff63ff 	.word	0x03ff63ff

08002090 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d138      	bne.n	8002118 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e032      	b.n	800211a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2224      	movs	r2, #36	; 0x24
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6819      	ldr	r1, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	e000      	b.n	800211a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002118:	2302      	movs	r3, #2
  }
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b20      	cmp	r3, #32
 800213a:	d139      	bne.n	80021b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002146:	2302      	movs	r3, #2
 8002148:	e033      	b.n	80021b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2224      	movs	r2, #36	; 0x24
 8002156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0201 	bic.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002178:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e000      	b.n	80021b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
  }
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80021c8:	2300      	movs	r3, #0
 80021ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e29b      	b.n	800270e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8087 	beq.w	80022f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021e4:	4b96      	ldr	r3, [pc, #600]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d00c      	beq.n	800220a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f0:	4b93      	ldr	r3, [pc, #588]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d112      	bne.n	8002222 <HAL_RCC_OscConfig+0x62>
 80021fc:	4b90      	ldr	r3, [pc, #576]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002208:	d10b      	bne.n	8002222 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220a:	4b8d      	ldr	r3, [pc, #564]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d06c      	beq.n	80022f0 <HAL_RCC_OscConfig+0x130>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d168      	bne.n	80022f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e275      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x7a>
 800222c:	4b84      	ldr	r3, [pc, #528]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a83      	ldr	r2, [pc, #524]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	e02e      	b.n	8002298 <HAL_RCC_OscConfig+0xd8>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x9c>
 8002242:	4b7f      	ldr	r3, [pc, #508]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a7e      	ldr	r2, [pc, #504]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b7c      	ldr	r3, [pc, #496]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a7b      	ldr	r2, [pc, #492]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e01d      	b.n	8002298 <HAL_RCC_OscConfig+0xd8>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0xc0>
 8002266:	4b76      	ldr	r3, [pc, #472]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a75      	ldr	r2, [pc, #468]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800226c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b73      	ldr	r3, [pc, #460]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a72      	ldr	r2, [pc, #456]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0xd8>
 8002280:	4b6f      	ldr	r3, [pc, #444]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a6e      	ldr	r2, [pc, #440]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b6c      	ldr	r3, [pc, #432]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a6b      	ldr	r2, [pc, #428]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe ff36 	bl	8001110 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a8:	f7fe ff32 	bl	8001110 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e229      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	4b61      	ldr	r3, [pc, #388]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0xe8>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe ff22 	bl	8001110 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7fe ff1e 	bl	8001110 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e215      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e2:	4b57      	ldr	r3, [pc, #348]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x110>
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d069      	beq.n	80023d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022fe:	4b50      	ldr	r3, [pc, #320]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230a:	4b4d      	ldr	r3, [pc, #308]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b08      	cmp	r3, #8
 8002314:	d11c      	bne.n	8002350 <HAL_RCC_OscConfig+0x190>
 8002316:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d116      	bne.n	8002350 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_RCC_OscConfig+0x17a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e1e9      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233a:	4b41      	ldr	r3, [pc, #260]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	493d      	ldr	r1, [pc, #244]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	e040      	b.n	80023d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d023      	beq.n	80023a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002358:	4b39      	ldr	r3, [pc, #228]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a38      	ldr	r2, [pc, #224]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7fe fed4 	bl	8001110 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236c:	f7fe fed0 	bl	8001110 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e1c7      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237e:	4b30      	ldr	r3, [pc, #192]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238a:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4929      	ldr	r1, [pc, #164]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]
 800239e:	e018      	b.n	80023d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a0:	4b27      	ldr	r3, [pc, #156]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a26      	ldr	r2, [pc, #152]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7fe feb0 	bl	8001110 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b4:	f7fe feac 	bl	8001110 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e1a3      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c6:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d038      	beq.n	8002450 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d019      	beq.n	800241a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80023e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ea:	4a15      	ldr	r2, [pc, #84]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f2:	f7fe fe8d 	bl	8001110 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fa:	f7fe fe89 	bl	8001110 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e180      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800240e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x23a>
 8002418:	e01a      	b.n	8002450 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800241c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800241e:	4a08      	ldr	r2, [pc, #32]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002426:	f7fe fe73 	bl	8001110 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242e:	f7fe fe6f 	bl	8001110 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d903      	bls.n	8002444 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e166      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
 8002440:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002444:	4b92      	ldr	r3, [pc, #584]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1ee      	bne.n	800242e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80a4 	beq.w	80025a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245e:	4b8c      	ldr	r3, [pc, #560]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10d      	bne.n	8002486 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	4b89      	ldr	r3, [pc, #548]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a88      	ldr	r2, [pc, #544]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b86      	ldr	r3, [pc, #536]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002482:	2301      	movs	r3, #1
 8002484:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002486:	4b83      	ldr	r3, [pc, #524]	; (8002694 <HAL_RCC_OscConfig+0x4d4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d118      	bne.n	80024c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002492:	4b80      	ldr	r3, [pc, #512]	; (8002694 <HAL_RCC_OscConfig+0x4d4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a7f      	ldr	r2, [pc, #508]	; (8002694 <HAL_RCC_OscConfig+0x4d4>)
 8002498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249e:	f7fe fe37 	bl	8001110 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a6:	f7fe fe33 	bl	8001110 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b64      	cmp	r3, #100	; 0x64
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e12a      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b8:	4b76      	ldr	r3, [pc, #472]	; (8002694 <HAL_RCC_OscConfig+0x4d4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x31a>
 80024cc:	4b70      	ldr	r3, [pc, #448]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	4a6f      	ldr	r2, [pc, #444]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6713      	str	r3, [r2, #112]	; 0x70
 80024d8:	e02d      	b.n	8002536 <HAL_RCC_OscConfig+0x376>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x33c>
 80024e2:	4b6b      	ldr	r3, [pc, #428]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e6:	4a6a      	ldr	r2, [pc, #424]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	6713      	str	r3, [r2, #112]	; 0x70
 80024ee:	4b68      	ldr	r3, [pc, #416]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	4a67      	ldr	r2, [pc, #412]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80024f4:	f023 0304 	bic.w	r3, r3, #4
 80024f8:	6713      	str	r3, [r2, #112]	; 0x70
 80024fa:	e01c      	b.n	8002536 <HAL_RCC_OscConfig+0x376>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b05      	cmp	r3, #5
 8002502:	d10c      	bne.n	800251e <HAL_RCC_OscConfig+0x35e>
 8002504:	4b62      	ldr	r3, [pc, #392]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002508:	4a61      	ldr	r2, [pc, #388]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800250a:	f043 0304 	orr.w	r3, r3, #4
 800250e:	6713      	str	r3, [r2, #112]	; 0x70
 8002510:	4b5f      	ldr	r3, [pc, #380]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002514:	4a5e      	ldr	r2, [pc, #376]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6713      	str	r3, [r2, #112]	; 0x70
 800251c:	e00b      	b.n	8002536 <HAL_RCC_OscConfig+0x376>
 800251e:	4b5c      	ldr	r3, [pc, #368]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002522:	4a5b      	ldr	r2, [pc, #364]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	6713      	str	r3, [r2, #112]	; 0x70
 800252a:	4b59      	ldr	r3, [pc, #356]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	4a58      	ldr	r2, [pc, #352]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002530:	f023 0304 	bic.w	r3, r3, #4
 8002534:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d015      	beq.n	800256a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253e:	f7fe fde7 	bl	8001110 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002544:	e00a      	b.n	800255c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002546:	f7fe fde3 	bl	8001110 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	f241 3288 	movw	r2, #5000	; 0x1388
 8002554:	4293      	cmp	r3, r2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e0d8      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255c:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0ee      	beq.n	8002546 <HAL_RCC_OscConfig+0x386>
 8002568:	e014      	b.n	8002594 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256a:	f7fe fdd1 	bl	8001110 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002570:	e00a      	b.n	8002588 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f7fe fdcd 	bl	8001110 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002580:	4293      	cmp	r3, r2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e0c2      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002588:	4b41      	ldr	r3, [pc, #260]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1ee      	bne.n	8002572 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002594:	7dfb      	ldrb	r3, [r7, #23]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d105      	bne.n	80025a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	4a3c      	ldr	r2, [pc, #240]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80025a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 80ae 	beq.w	800270c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b0:	4b37      	ldr	r3, [pc, #220]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d06d      	beq.n	8002698 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d14b      	bne.n	800265c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c4:	4b32      	ldr	r3, [pc, #200]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a31      	ldr	r2, [pc, #196]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80025ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe fd9e 	bl	8001110 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fe fd9a 	bl	8001110 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e091      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ea:	4b29      	ldr	r3, [pc, #164]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69da      	ldr	r2, [r3, #28]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	019b      	lsls	r3, r3, #6
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	085b      	lsrs	r3, r3, #1
 800260e:	3b01      	subs	r3, #1
 8002610:	041b      	lsls	r3, r3, #16
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	061b      	lsls	r3, r3, #24
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	071b      	lsls	r3, r3, #28
 8002622:	491b      	ldr	r1, [pc, #108]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a18      	ldr	r2, [pc, #96]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800262e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe fd6c 	bl	8001110 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263c:	f7fe fd68 	bl	8001110 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e05f      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x47c>
 800265a:	e057      	b.n	800270c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fd52 	bl	8001110 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fd4e 	bl	8001110 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e045      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002682:	4b03      	ldr	r3, [pc, #12]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x4b0>
 800268e:	e03d      	b.n	800270c <HAL_RCC_OscConfig+0x54c>
 8002690:	40023800 	.word	0x40023800
 8002694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002698:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <HAL_RCC_OscConfig+0x558>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d030      	beq.n	8002708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d129      	bne.n	8002708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d122      	bne.n	8002708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026c8:	4013      	ands	r3, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d119      	bne.n	8002708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	3b01      	subs	r3, #1
 80026e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d10f      	bne.n	8002708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800

0800271c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0d0      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002734:	4b6a      	ldr	r3, [pc, #424]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d910      	bls.n	8002764 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b67      	ldr	r3, [pc, #412]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 020f 	bic.w	r2, r3, #15
 800274a:	4965      	ldr	r1, [pc, #404]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b63      	ldr	r3, [pc, #396]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0b8      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800277c:	4b59      	ldr	r3, [pc, #356]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a58      	ldr	r2, [pc, #352]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002786:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002794:	4b53      	ldr	r3, [pc, #332]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 800279a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800279e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a0:	4b50      	ldr	r3, [pc, #320]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	494d      	ldr	r1, [pc, #308]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d040      	beq.n	8002840 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	4b47      	ldr	r3, [pc, #284]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d115      	bne.n	80027fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e07f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027de:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e073      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ee:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e06b      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f023 0203 	bic.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4936      	ldr	r1, [pc, #216]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 800280c:	4313      	orrs	r3, r2
 800280e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002810:	f7fe fc7e 	bl	8001110 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	e00a      	b.n	800282e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7fe fc7a 	bl	8001110 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e053      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 020c 	and.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	429a      	cmp	r2, r3
 800283e:	d1eb      	bne.n	8002818 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d210      	bcs.n	8002870 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 020f 	bic.w	r2, r3, #15
 8002856:	4922      	ldr	r1, [pc, #136]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e032      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4916      	ldr	r1, [pc, #88]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	490e      	ldr	r1, [pc, #56]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ae:	f000 f821 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 80028b2:	4602      	mov	r2, r0
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	490a      	ldr	r1, [pc, #40]	; (80028e8 <HAL_RCC_ClockConfig+0x1cc>)
 80028c0:	5ccb      	ldrb	r3, [r1, r3]
 80028c2:	fa22 f303 	lsr.w	r3, r2, r3
 80028c6:	4a09      	ldr	r2, [pc, #36]	; (80028ec <HAL_RCC_ClockConfig+0x1d0>)
 80028c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_ClockConfig+0x1d4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fbda 	bl	8001088 <HAL_InitTick>

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023c00 	.word	0x40023c00
 80028e4:	40023800 	.word	0x40023800
 80028e8:	0800a7f8 	.word	0x0800a7f8
 80028ec:	2000001c 	.word	0x2000001c
 80028f0:	20000020 	.word	0x20000020

080028f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028f8:	b090      	sub	sp, #64	; 0x40
 80028fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002900:	2300      	movs	r3, #0
 8002902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002904:	2300      	movs	r3, #0
 8002906:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800290c:	4b59      	ldr	r3, [pc, #356]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x180>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 030c 	and.w	r3, r3, #12
 8002914:	2b08      	cmp	r3, #8
 8002916:	d00d      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x40>
 8002918:	2b08      	cmp	r3, #8
 800291a:	f200 80a1 	bhi.w	8002a60 <HAL_RCC_GetSysClockFreq+0x16c>
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x34>
 8002922:	2b04      	cmp	r3, #4
 8002924:	d003      	beq.n	800292e <HAL_RCC_GetSysClockFreq+0x3a>
 8002926:	e09b      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002928:	4b53      	ldr	r3, [pc, #332]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x184>)
 800292a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800292c:	e09b      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800292e:	4b53      	ldr	r3, [pc, #332]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002930:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002932:	e098      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002934:	4b4f      	ldr	r3, [pc, #316]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800293c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800293e:	4b4d      	ldr	r3, [pc, #308]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d028      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294a:	4b4a      	ldr	r3, [pc, #296]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x180>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	099b      	lsrs	r3, r3, #6
 8002950:	2200      	movs	r2, #0
 8002952:	623b      	str	r3, [r7, #32]
 8002954:	627a      	str	r2, [r7, #36]	; 0x24
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800295c:	2100      	movs	r1, #0
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002960:	fb03 f201 	mul.w	r2, r3, r1
 8002964:	2300      	movs	r3, #0
 8002966:	fb00 f303 	mul.w	r3, r0, r3
 800296a:	4413      	add	r3, r2
 800296c:	4a43      	ldr	r2, [pc, #268]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x188>)
 800296e:	fba0 1202 	umull	r1, r2, r0, r2
 8002972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002974:	460a      	mov	r2, r1
 8002976:	62ba      	str	r2, [r7, #40]	; 0x28
 8002978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800297a:	4413      	add	r3, r2
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800297e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002980:	2200      	movs	r2, #0
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	61fa      	str	r2, [r7, #28]
 8002986:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800298a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800298e:	f7fd fca7 	bl	80002e0 <__aeabi_uldivmod>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4613      	mov	r3, r2
 8002998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800299a:	e053      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800299c:	4b35      	ldr	r3, [pc, #212]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x180>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	099b      	lsrs	r3, r3, #6
 80029a2:	2200      	movs	r2, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	617a      	str	r2, [r7, #20]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029ae:	f04f 0b00 	mov.w	fp, #0
 80029b2:	4652      	mov	r2, sl
 80029b4:	465b      	mov	r3, fp
 80029b6:	f04f 0000 	mov.w	r0, #0
 80029ba:	f04f 0100 	mov.w	r1, #0
 80029be:	0159      	lsls	r1, r3, #5
 80029c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029c4:	0150      	lsls	r0, r2, #5
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	ebb2 080a 	subs.w	r8, r2, sl
 80029ce:	eb63 090b 	sbc.w	r9, r3, fp
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029e6:	ebb2 0408 	subs.w	r4, r2, r8
 80029ea:	eb63 0509 	sbc.w	r5, r3, r9
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	00eb      	lsls	r3, r5, #3
 80029f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029fc:	00e2      	lsls	r2, r4, #3
 80029fe:	4614      	mov	r4, r2
 8002a00:	461d      	mov	r5, r3
 8002a02:	eb14 030a 	adds.w	r3, r4, sl
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	eb45 030b 	adc.w	r3, r5, fp
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a1a:	4629      	mov	r1, r5
 8002a1c:	028b      	lsls	r3, r1, #10
 8002a1e:	4621      	mov	r1, r4
 8002a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a24:	4621      	mov	r1, r4
 8002a26:	028a      	lsls	r2, r1, #10
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2e:	2200      	movs	r2, #0
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	60fa      	str	r2, [r7, #12]
 8002a34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a38:	f7fd fc52 	bl	80002e0 <__aeabi_uldivmod>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4613      	mov	r3, r2
 8002a42:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002a54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a5e:	e002      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3740      	adds	r7, #64	; 0x40
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
 8002a78:	00f42400 	.word	0x00f42400
 8002a7c:	017d7840 	.word	0x017d7840

08002a80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	2000001c 	.word	0x2000001c

08002a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a9c:	f7ff fff0 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	0a9b      	lsrs	r3, r3, #10
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	4903      	ldr	r1, [pc, #12]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aae:	5ccb      	ldrb	r3, [r1, r3]
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	0800a808 	.word	0x0800a808

08002ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ac4:	f7ff ffdc 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	0b5b      	lsrs	r3, r3, #13
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4903      	ldr	r1, [pc, #12]	; (8002ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	0800a808 	.word	0x0800a808

08002ae8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d012      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b10:	4b69      	ldr	r3, [pc, #420]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4a68      	ldr	r2, [pc, #416]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b1a:	6093      	str	r3, [r2, #8]
 8002b1c:	4b66      	ldr	r3, [pc, #408]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b24:	4964      	ldr	r1, [pc, #400]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d017      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b42:	4b5d      	ldr	r3, [pc, #372]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b50:	4959      	ldr	r1, [pc, #356]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b60:	d101      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b62:	2301      	movs	r3, #1
 8002b64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d017      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b7e:	4b4e      	ldr	r3, [pc, #312]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	494a      	ldr	r1, [pc, #296]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002baa:	2301      	movs	r3, #1
 8002bac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 808b 	beq.w	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bcc:	4b3a      	ldr	r3, [pc, #232]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	4a39      	ldr	r2, [pc, #228]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd8:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002be4:	4b35      	ldr	r3, [pc, #212]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a34      	ldr	r2, [pc, #208]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf0:	f7fe fa8e 	bl	8001110 <HAL_GetTick>
 8002bf4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf8:	f7fe fa8a 	bl	8001110 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e38f      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c0a:	4b2c      	ldr	r3, [pc, #176]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c16:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d035      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d02e      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c34:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a1d      	ldr	r2, [pc, #116]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c4a:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a1a      	ldr	r2, [pc, #104]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c56:	4a18      	ldr	r2, [pc, #96]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c5c:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d114      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe fa52 	bl	8001110 <HAL_GetTick>
 8002c6c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c70:	f7fe fa4e 	bl	8001110 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e351      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c86:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0ee      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c9e:	d111      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cac:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cae:	400b      	ands	r3, r1
 8002cb0:	4901      	ldr	r1, [pc, #4]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
 8002cb6:	e00b      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	0ffffcff 	.word	0x0ffffcff
 8002cc4:	4bac      	ldr	r3, [pc, #688]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4aab      	ldr	r2, [pc, #684]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cce:	6093      	str	r3, [r2, #8]
 8002cd0:	4ba9      	ldr	r3, [pc, #676]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cdc:	49a6      	ldr	r1, [pc, #664]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d010      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cee:	4ba2      	ldr	r3, [pc, #648]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cf4:	4aa0      	ldr	r2, [pc, #640]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cfa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cfe:	4b9e      	ldr	r3, [pc, #632]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d00:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d08:	499b      	ldr	r1, [pc, #620]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d1c:	4b96      	ldr	r3, [pc, #600]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d2a:	4993      	ldr	r1, [pc, #588]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d3e:	4b8e      	ldr	r3, [pc, #568]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d4c:	498a      	ldr	r1, [pc, #552]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d60:	4b85      	ldr	r3, [pc, #532]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6e:	4982      	ldr	r1, [pc, #520]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d82:	4b7d      	ldr	r3, [pc, #500]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	4979      	ldr	r1, [pc, #484]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002da4:	4b74      	ldr	r3, [pc, #464]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f023 0203 	bic.w	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	4971      	ldr	r1, [pc, #452]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dc6:	4b6c      	ldr	r3, [pc, #432]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	f023 020c 	bic.w	r2, r3, #12
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd4:	4968      	ldr	r1, [pc, #416]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002de8:	4b63      	ldr	r3, [pc, #396]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	4960      	ldr	r1, [pc, #384]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e0a:	4b5b      	ldr	r3, [pc, #364]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e18:	4957      	ldr	r1, [pc, #348]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e2c:	4b52      	ldr	r3, [pc, #328]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3a:	494f      	ldr	r1, [pc, #316]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e4e:	4b4a      	ldr	r3, [pc, #296]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5c:	4946      	ldr	r1, [pc, #280]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e70:	4b41      	ldr	r3, [pc, #260]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7e:	493e      	ldr	r1, [pc, #248]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e92:	4b39      	ldr	r3, [pc, #228]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea0:	4935      	ldr	r1, [pc, #212]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002eb4:	4b30      	ldr	r3, [pc, #192]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ec2:	492d      	ldr	r1, [pc, #180]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d011      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ed6:	4b28      	ldr	r3, [pc, #160]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ee4:	4924      	ldr	r1, [pc, #144]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ef0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ef4:	d101      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f06:	2301      	movs	r3, #1
 8002f08:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f16:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f24:	4914      	ldr	r1, [pc, #80]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00b      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f38:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f48:	490b      	ldr	r1, [pc, #44]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00f      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f6c:	4902      	ldr	r1, [pc, #8]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f74:	e002      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00b      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f88:	4b8a      	ldr	r3, [pc, #552]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f98:	4986      	ldr	r1, [pc, #536]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fac:	4b81      	ldr	r3, [pc, #516]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fbc:	497d      	ldr	r1, [pc, #500]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d006      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80d6 	beq.w	8003184 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fd8:	4b76      	ldr	r3, [pc, #472]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a75      	ldr	r2, [pc, #468]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe4:	f7fe f894 	bl	8001110 <HAL_GetTick>
 8002fe8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fec:	f7fe f890 	bl	8001110 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e195      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ffe:	4b6d      	ldr	r3, [pc, #436]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d021      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301a:	2b00      	cmp	r3, #0
 800301c:	d11d      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800301e:	4b65      	ldr	r3, [pc, #404]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800302c:	4b61      	ldr	r3, [pc, #388]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003032:	0e1b      	lsrs	r3, r3, #24
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	019a      	lsls	r2, r3, #6
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	041b      	lsls	r3, r3, #16
 8003044:	431a      	orrs	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	061b      	lsls	r3, r3, #24
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	071b      	lsls	r3, r3, #28
 8003052:	4958      	ldr	r1, [pc, #352]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d004      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800306e:	d00a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003078:	2b00      	cmp	r3, #0
 800307a:	d02e      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003084:	d129      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003086:	4b4b      	ldr	r3, [pc, #300]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800308c:	0c1b      	lsrs	r3, r3, #16
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003094:	4b47      	ldr	r3, [pc, #284]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800309a:	0f1b      	lsrs	r3, r3, #28
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	019a      	lsls	r2, r3, #6
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	041b      	lsls	r3, r3, #16
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	061b      	lsls	r3, r3, #24
 80030b4:	431a      	orrs	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	071b      	lsls	r3, r3, #28
 80030ba:	493e      	ldr	r1, [pc, #248]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030c2:	4b3c      	ldr	r3, [pc, #240]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c8:	f023 021f 	bic.w	r2, r3, #31
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	3b01      	subs	r3, #1
 80030d2:	4938      	ldr	r1, [pc, #224]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01d      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030e6:	4b33      	ldr	r3, [pc, #204]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ec:	0e1b      	lsrs	r3, r3, #24
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030f4:	4b2f      	ldr	r3, [pc, #188]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fa:	0f1b      	lsrs	r3, r3, #28
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	019a      	lsls	r2, r3, #6
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	041b      	lsls	r3, r3, #16
 800310e:	431a      	orrs	r2, r3
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	061b      	lsls	r3, r3, #24
 8003114:	431a      	orrs	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	071b      	lsls	r3, r3, #28
 800311a:	4926      	ldr	r1, [pc, #152]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d011      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	019a      	lsls	r2, r3, #6
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	041b      	lsls	r3, r3, #16
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	061b      	lsls	r3, r3, #24
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	071b      	lsls	r3, r3, #28
 800314a:	491a      	ldr	r1, [pc, #104]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003152:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a17      	ldr	r2, [pc, #92]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003158:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800315c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800315e:	f7fd ffd7 	bl	8001110 <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003166:	f7fd ffd3 	bl	8001110 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b64      	cmp	r3, #100	; 0x64
 8003172:	d901      	bls.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e0d8      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003178:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b01      	cmp	r3, #1
 8003188:	f040 80ce 	bne.w	8003328 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a08      	ldr	r2, [pc, #32]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003196:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003198:	f7fd ffba 	bl	8001110 <HAL_GetTick>
 800319c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800319e:	e00b      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031a0:	f7fd ffb6 	bl	8001110 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	; 0x64
 80031ac:	d904      	bls.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e0bb      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031b8:	4b5e      	ldr	r3, [pc, #376]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031c4:	d0ec      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d02e      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d12a      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031ee:	4b51      	ldr	r3, [pc, #324]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031fc:	4b4d      	ldr	r3, [pc, #308]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	0f1b      	lsrs	r3, r3, #28
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	019a      	lsls	r2, r3, #6
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	041b      	lsls	r3, r3, #16
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	061b      	lsls	r3, r3, #24
 800321c:	431a      	orrs	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	071b      	lsls	r3, r3, #28
 8003222:	4944      	ldr	r1, [pc, #272]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800322a:	4b42      	ldr	r3, [pc, #264]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800322c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003230:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	3b01      	subs	r3, #1
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	493d      	ldr	r1, [pc, #244]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d022      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003258:	d11d      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800325a:	4b36      	ldr	r3, [pc, #216]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003260:	0e1b      	lsrs	r3, r3, #24
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003268:	4b32      	ldr	r3, [pc, #200]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	0f1b      	lsrs	r3, r3, #28
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	019a      	lsls	r2, r3, #6
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	431a      	orrs	r2, r3
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	061b      	lsls	r3, r3, #24
 8003288:	431a      	orrs	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	071b      	lsls	r3, r3, #28
 800328e:	4929      	ldr	r1, [pc, #164]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d028      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032a2:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a8:	0e1b      	lsrs	r3, r3, #24
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032b0:	4b20      	ldr	r3, [pc, #128]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	0c1b      	lsrs	r3, r3, #16
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	019a      	lsls	r2, r3, #6
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	041b      	lsls	r3, r3, #16
 80032c8:	431a      	orrs	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	061b      	lsls	r3, r3, #24
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	071b      	lsls	r3, r3, #28
 80032d6:	4917      	ldr	r1, [pc, #92]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	4911      	ldr	r1, [pc, #68]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032f4:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a0e      	ldr	r2, [pc, #56]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003300:	f7fd ff06 	bl	8001110 <HAL_GetTick>
 8003304:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003308:	f7fd ff02 	bl	8001110 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	; 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e007      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003326:	d1ef      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3720      	adds	r7, #32
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800

08003338 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e049      	b.n	80033de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fd fd1e 	bl	8000da0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3304      	adds	r3, #4
 8003374:	4619      	mov	r1, r3
 8003376:	4610      	mov	r0, r2
 8003378:	f000 fa44 	bl	8003804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d109      	bne.n	800340c <HAL_TIM_PWM_Start+0x24>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	bf14      	ite	ne
 8003404:	2301      	movne	r3, #1
 8003406:	2300      	moveq	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	e03c      	b.n	8003486 <HAL_TIM_PWM_Start+0x9e>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b04      	cmp	r3, #4
 8003410:	d109      	bne.n	8003426 <HAL_TIM_PWM_Start+0x3e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b01      	cmp	r3, #1
 800341c:	bf14      	ite	ne
 800341e:	2301      	movne	r3, #1
 8003420:	2300      	moveq	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	e02f      	b.n	8003486 <HAL_TIM_PWM_Start+0x9e>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b08      	cmp	r3, #8
 800342a:	d109      	bne.n	8003440 <HAL_TIM_PWM_Start+0x58>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b01      	cmp	r3, #1
 8003436:	bf14      	ite	ne
 8003438:	2301      	movne	r3, #1
 800343a:	2300      	moveq	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	e022      	b.n	8003486 <HAL_TIM_PWM_Start+0x9e>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b0c      	cmp	r3, #12
 8003444:	d109      	bne.n	800345a <HAL_TIM_PWM_Start+0x72>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	bf14      	ite	ne
 8003452:	2301      	movne	r3, #1
 8003454:	2300      	moveq	r3, #0
 8003456:	b2db      	uxtb	r3, r3
 8003458:	e015      	b.n	8003486 <HAL_TIM_PWM_Start+0x9e>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b10      	cmp	r3, #16
 800345e:	d109      	bne.n	8003474 <HAL_TIM_PWM_Start+0x8c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	bf14      	ite	ne
 800346c:	2301      	movne	r3, #1
 800346e:	2300      	moveq	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	e008      	b.n	8003486 <HAL_TIM_PWM_Start+0x9e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e092      	b.n	80035b4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d104      	bne.n	800349e <HAL_TIM_PWM_Start+0xb6>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800349c:	e023      	b.n	80034e6 <HAL_TIM_PWM_Start+0xfe>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d104      	bne.n	80034ae <HAL_TIM_PWM_Start+0xc6>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034ac:	e01b      	b.n	80034e6 <HAL_TIM_PWM_Start+0xfe>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d104      	bne.n	80034be <HAL_TIM_PWM_Start+0xd6>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034bc:	e013      	b.n	80034e6 <HAL_TIM_PWM_Start+0xfe>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b0c      	cmp	r3, #12
 80034c2:	d104      	bne.n	80034ce <HAL_TIM_PWM_Start+0xe6>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034cc:	e00b      	b.n	80034e6 <HAL_TIM_PWM_Start+0xfe>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d104      	bne.n	80034de <HAL_TIM_PWM_Start+0xf6>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034dc:	e003      	b.n	80034e6 <HAL_TIM_PWM_Start+0xfe>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2202      	movs	r2, #2
 80034e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2201      	movs	r2, #1
 80034ec:	6839      	ldr	r1, [r7, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fc86 	bl	8003e00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a30      	ldr	r2, [pc, #192]	; (80035bc <HAL_TIM_PWM_Start+0x1d4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d004      	beq.n	8003508 <HAL_TIM_PWM_Start+0x120>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a2f      	ldr	r2, [pc, #188]	; (80035c0 <HAL_TIM_PWM_Start+0x1d8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d101      	bne.n	800350c <HAL_TIM_PWM_Start+0x124>
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <HAL_TIM_PWM_Start+0x126>
 800350c:	2300      	movs	r3, #0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003520:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a25      	ldr	r2, [pc, #148]	; (80035bc <HAL_TIM_PWM_Start+0x1d4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d022      	beq.n	8003572 <HAL_TIM_PWM_Start+0x18a>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003534:	d01d      	beq.n	8003572 <HAL_TIM_PWM_Start+0x18a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a22      	ldr	r2, [pc, #136]	; (80035c4 <HAL_TIM_PWM_Start+0x1dc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d018      	beq.n	8003572 <HAL_TIM_PWM_Start+0x18a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a20      	ldr	r2, [pc, #128]	; (80035c8 <HAL_TIM_PWM_Start+0x1e0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d013      	beq.n	8003572 <HAL_TIM_PWM_Start+0x18a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1f      	ldr	r2, [pc, #124]	; (80035cc <HAL_TIM_PWM_Start+0x1e4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00e      	beq.n	8003572 <HAL_TIM_PWM_Start+0x18a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a19      	ldr	r2, [pc, #100]	; (80035c0 <HAL_TIM_PWM_Start+0x1d8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d009      	beq.n	8003572 <HAL_TIM_PWM_Start+0x18a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1b      	ldr	r2, [pc, #108]	; (80035d0 <HAL_TIM_PWM_Start+0x1e8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d004      	beq.n	8003572 <HAL_TIM_PWM_Start+0x18a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a19      	ldr	r2, [pc, #100]	; (80035d4 <HAL_TIM_PWM_Start+0x1ec>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d115      	bne.n	800359e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	4b17      	ldr	r3, [pc, #92]	; (80035d8 <HAL_TIM_PWM_Start+0x1f0>)
 800357a:	4013      	ands	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2b06      	cmp	r3, #6
 8003582:	d015      	beq.n	80035b0 <HAL_TIM_PWM_Start+0x1c8>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358a:	d011      	beq.n	80035b0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359c:	e008      	b.n	80035b0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0201 	orr.w	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	e000      	b.n	80035b2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40010000 	.word	0x40010000
 80035c0:	40010400 	.word	0x40010400
 80035c4:	40000400 	.word	0x40000400
 80035c8:	40000800 	.word	0x40000800
 80035cc:	40000c00 	.word	0x40000c00
 80035d0:	40014000 	.word	0x40014000
 80035d4:	40001800 	.word	0x40001800
 80035d8:	00010007 	.word	0x00010007

080035dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e0ff      	b.n	80037fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b14      	cmp	r3, #20
 8003606:	f200 80f0 	bhi.w	80037ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800360a:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	08003665 	.word	0x08003665
 8003614:	080037eb 	.word	0x080037eb
 8003618:	080037eb 	.word	0x080037eb
 800361c:	080037eb 	.word	0x080037eb
 8003620:	080036a5 	.word	0x080036a5
 8003624:	080037eb 	.word	0x080037eb
 8003628:	080037eb 	.word	0x080037eb
 800362c:	080037eb 	.word	0x080037eb
 8003630:	080036e7 	.word	0x080036e7
 8003634:	080037eb 	.word	0x080037eb
 8003638:	080037eb 	.word	0x080037eb
 800363c:	080037eb 	.word	0x080037eb
 8003640:	08003727 	.word	0x08003727
 8003644:	080037eb 	.word	0x080037eb
 8003648:	080037eb 	.word	0x080037eb
 800364c:	080037eb 	.word	0x080037eb
 8003650:	08003769 	.word	0x08003769
 8003654:	080037eb 	.word	0x080037eb
 8003658:	080037eb 	.word	0x080037eb
 800365c:	080037eb 	.word	0x080037eb
 8003660:	080037a9 	.word	0x080037a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	4618      	mov	r0, r3
 800366c:	f000 f96a 	bl	8003944 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0208 	orr.w	r2, r2, #8
 800367e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0204 	bic.w	r2, r2, #4
 800368e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6999      	ldr	r1, [r3, #24]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	619a      	str	r2, [r3, #24]
      break;
 80036a2:	e0a5      	b.n	80037f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 f9bc 	bl	8003a28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6999      	ldr	r1, [r3, #24]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	021a      	lsls	r2, r3, #8
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	619a      	str	r2, [r3, #24]
      break;
 80036e4:	e084      	b.n	80037f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fa13 	bl	8003b18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0208 	orr.w	r2, r2, #8
 8003700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0204 	bic.w	r2, r2, #4
 8003710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69d9      	ldr	r1, [r3, #28]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	61da      	str	r2, [r3, #28]
      break;
 8003724:	e064      	b.n	80037f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fa69 	bl	8003c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69d9      	ldr	r1, [r3, #28]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	021a      	lsls	r2, r3, #8
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	61da      	str	r2, [r3, #28]
      break;
 8003766:	e043      	b.n	80037f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	4618      	mov	r0, r3
 8003770:	f000 faa0 	bl	8003cb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0208 	orr.w	r2, r2, #8
 8003782:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0204 	bic.w	r2, r2, #4
 8003792:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037a6:	e023      	b.n	80037f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fad2 	bl	8003d58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	021a      	lsls	r2, r3, #8
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037e8:	e002      	b.n	80037f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	75fb      	strb	r3, [r7, #23]
      break;
 80037ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop

08003804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a40      	ldr	r2, [pc, #256]	; (8003918 <TIM_Base_SetConfig+0x114>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d013      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d00f      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a3d      	ldr	r2, [pc, #244]	; (800391c <TIM_Base_SetConfig+0x118>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00b      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a3c      	ldr	r2, [pc, #240]	; (8003920 <TIM_Base_SetConfig+0x11c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d007      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a3b      	ldr	r2, [pc, #236]	; (8003924 <TIM_Base_SetConfig+0x120>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a3a      	ldr	r2, [pc, #232]	; (8003928 <TIM_Base_SetConfig+0x124>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d108      	bne.n	8003856 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2f      	ldr	r2, [pc, #188]	; (8003918 <TIM_Base_SetConfig+0x114>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d02b      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003864:	d027      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a2c      	ldr	r2, [pc, #176]	; (800391c <TIM_Base_SetConfig+0x118>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d023      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a2b      	ldr	r2, [pc, #172]	; (8003920 <TIM_Base_SetConfig+0x11c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01f      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a2a      	ldr	r2, [pc, #168]	; (8003924 <TIM_Base_SetConfig+0x120>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d01b      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a29      	ldr	r2, [pc, #164]	; (8003928 <TIM_Base_SetConfig+0x124>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d017      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a28      	ldr	r2, [pc, #160]	; (800392c <TIM_Base_SetConfig+0x128>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d013      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a27      	ldr	r2, [pc, #156]	; (8003930 <TIM_Base_SetConfig+0x12c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00f      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a26      	ldr	r2, [pc, #152]	; (8003934 <TIM_Base_SetConfig+0x130>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00b      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a25      	ldr	r2, [pc, #148]	; (8003938 <TIM_Base_SetConfig+0x134>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d007      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a24      	ldr	r2, [pc, #144]	; (800393c <TIM_Base_SetConfig+0x138>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d003      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a23      	ldr	r2, [pc, #140]	; (8003940 <TIM_Base_SetConfig+0x13c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d108      	bne.n	80038c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <TIM_Base_SetConfig+0x114>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_Base_SetConfig+0xf8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a0c      	ldr	r2, [pc, #48]	; (8003928 <TIM_Base_SetConfig+0x124>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d103      	bne.n	8003904 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	615a      	str	r2, [r3, #20]
}
 800390a:	bf00      	nop
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40010000 	.word	0x40010000
 800391c:	40000400 	.word	0x40000400
 8003920:	40000800 	.word	0x40000800
 8003924:	40000c00 	.word	0x40000c00
 8003928:	40010400 	.word	0x40010400
 800392c:	40014000 	.word	0x40014000
 8003930:	40014400 	.word	0x40014400
 8003934:	40014800 	.word	0x40014800
 8003938:	40001800 	.word	0x40001800
 800393c:	40001c00 	.word	0x40001c00
 8003940:	40002000 	.word	0x40002000

08003944 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	f023 0201 	bic.w	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <TIM_OC1_SetConfig+0xd8>)
 8003970:	4013      	ands	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0303 	bic.w	r3, r3, #3
 800397a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f023 0302 	bic.w	r3, r3, #2
 800398c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a21      	ldr	r2, [pc, #132]	; (8003a20 <TIM_OC1_SetConfig+0xdc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_OC1_SetConfig+0x64>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a20      	ldr	r2, [pc, #128]	; (8003a24 <TIM_OC1_SetConfig+0xe0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d10c      	bne.n	80039c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f023 0308 	bic.w	r3, r3, #8
 80039ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f023 0304 	bic.w	r3, r3, #4
 80039c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a16      	ldr	r2, [pc, #88]	; (8003a20 <TIM_OC1_SetConfig+0xdc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d003      	beq.n	80039d2 <TIM_OC1_SetConfig+0x8e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a15      	ldr	r2, [pc, #84]	; (8003a24 <TIM_OC1_SetConfig+0xe0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d111      	bne.n	80039f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	621a      	str	r2, [r3, #32]
}
 8003a10:	bf00      	nop
 8003a12:	371c      	adds	r7, #28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	fffeff8f 	.word	0xfffeff8f
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40010400 	.word	0x40010400

08003a28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	f023 0210 	bic.w	r2, r3, #16
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4b2e      	ldr	r3, [pc, #184]	; (8003b0c <TIM_OC2_SetConfig+0xe4>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	021b      	lsls	r3, r3, #8
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f023 0320 	bic.w	r3, r3, #32
 8003a72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a23      	ldr	r2, [pc, #140]	; (8003b10 <TIM_OC2_SetConfig+0xe8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d003      	beq.n	8003a90 <TIM_OC2_SetConfig+0x68>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a22      	ldr	r2, [pc, #136]	; (8003b14 <TIM_OC2_SetConfig+0xec>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d10d      	bne.n	8003aac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a18      	ldr	r2, [pc, #96]	; (8003b10 <TIM_OC2_SetConfig+0xe8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d003      	beq.n	8003abc <TIM_OC2_SetConfig+0x94>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a17      	ldr	r2, [pc, #92]	; (8003b14 <TIM_OC2_SetConfig+0xec>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d113      	bne.n	8003ae4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ac2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003aca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	621a      	str	r2, [r3, #32]
}
 8003afe:	bf00      	nop
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	feff8fff 	.word	0xfeff8fff
 8003b10:	40010000 	.word	0x40010000
 8003b14:	40010400 	.word	0x40010400

08003b18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4b2d      	ldr	r3, [pc, #180]	; (8003bf8 <TIM_OC3_SetConfig+0xe0>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0303 	bic.w	r3, r3, #3
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	021b      	lsls	r3, r3, #8
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <TIM_OC3_SetConfig+0xe4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d003      	beq.n	8003b7e <TIM_OC3_SetConfig+0x66>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <TIM_OC3_SetConfig+0xe8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d10d      	bne.n	8003b9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a17      	ldr	r2, [pc, #92]	; (8003bfc <TIM_OC3_SetConfig+0xe4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d003      	beq.n	8003baa <TIM_OC3_SetConfig+0x92>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a16      	ldr	r2, [pc, #88]	; (8003c00 <TIM_OC3_SetConfig+0xe8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d113      	bne.n	8003bd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	621a      	str	r2, [r3, #32]
}
 8003bec:	bf00      	nop
 8003bee:	371c      	adds	r7, #28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	fffeff8f 	.word	0xfffeff8f
 8003bfc:	40010000 	.word	0x40010000
 8003c00:	40010400 	.word	0x40010400

08003c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ca8 <TIM_OC4_SetConfig+0xa4>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	021b      	lsls	r3, r3, #8
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	031b      	lsls	r3, r3, #12
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a13      	ldr	r2, [pc, #76]	; (8003cac <TIM_OC4_SetConfig+0xa8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d003      	beq.n	8003c6c <TIM_OC4_SetConfig+0x68>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a12      	ldr	r2, [pc, #72]	; (8003cb0 <TIM_OC4_SetConfig+0xac>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d109      	bne.n	8003c80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	019b      	lsls	r3, r3, #6
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	621a      	str	r2, [r3, #32]
}
 8003c9a:	bf00      	nop
 8003c9c:	371c      	adds	r7, #28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	feff8fff 	.word	0xfeff8fff
 8003cac:	40010000 	.word	0x40010000
 8003cb0:	40010400 	.word	0x40010400

08003cb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4b1b      	ldr	r3, [pc, #108]	; (8003d4c <TIM_OC5_SetConfig+0x98>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003cf4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	041b      	lsls	r3, r3, #16
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <TIM_OC5_SetConfig+0x9c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d003      	beq.n	8003d12 <TIM_OC5_SetConfig+0x5e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a11      	ldr	r2, [pc, #68]	; (8003d54 <TIM_OC5_SetConfig+0xa0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d109      	bne.n	8003d26 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	621a      	str	r2, [r3, #32]
}
 8003d40:	bf00      	nop
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	fffeff8f 	.word	0xfffeff8f
 8003d50:	40010000 	.word	0x40010000
 8003d54:	40010400 	.word	0x40010400

08003d58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4b1c      	ldr	r3, [pc, #112]	; (8003df4 <TIM_OC6_SetConfig+0x9c>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	021b      	lsls	r3, r3, #8
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	051b      	lsls	r3, r3, #20
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a13      	ldr	r2, [pc, #76]	; (8003df8 <TIM_OC6_SetConfig+0xa0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d003      	beq.n	8003db8 <TIM_OC6_SetConfig+0x60>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <TIM_OC6_SetConfig+0xa4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d109      	bne.n	8003dcc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	029b      	lsls	r3, r3, #10
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	621a      	str	r2, [r3, #32]
}
 8003de6:	bf00      	nop
 8003de8:	371c      	adds	r7, #28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	feff8fff 	.word	0xfeff8fff
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	40010400 	.word	0x40010400

08003e00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	2201      	movs	r2, #1
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a1a      	ldr	r2, [r3, #32]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	43db      	mvns	r3, r3
 8003e22:	401a      	ands	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a1a      	ldr	r2, [r3, #32]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f003 031f 	and.w	r3, r3, #31
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	fa01 f303 	lsl.w	r3, r1, r3
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	621a      	str	r2, [r3, #32]
}
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
	...

08003e4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e06d      	b.n	8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a30      	ldr	r2, [pc, #192]	; (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2f      	ldr	r2, [pc, #188]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d108      	bne.n	8003eaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a20      	ldr	r2, [pc, #128]	; (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d022      	beq.n	8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed6:	d01d      	beq.n	8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d018      	beq.n	8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1c      	ldr	r2, [pc, #112]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d013      	beq.n	8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a1a      	ldr	r2, [pc, #104]	; (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00e      	beq.n	8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a15      	ldr	r2, [pc, #84]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d009      	beq.n	8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a16      	ldr	r2, [pc, #88]	; (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d004      	beq.n	8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a15      	ldr	r2, [pc, #84]	; (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d10c      	bne.n	8003f2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	40010000 	.word	0x40010000
 8003f50:	40010400 	.word	0x40010400
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000800 	.word	0x40000800
 8003f5c:	40000c00 	.word	0x40000c00
 8003f60:	40014000 	.word	0x40014000
 8003f64:	40001800 	.word	0x40001800

08003f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e040      	b.n	8003ffc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fc ff7a 	bl	8000e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2224      	movs	r2, #36	; 0x24
 8003f94:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f8b0 	bl	800410c <UART_SetConfig>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e022      	b.n	8003ffc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fb08 	bl	80045d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fb8f 	bl	8004718 <UART_CheckIdleState>
 8003ffa:	4603      	mov	r3, r0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004018:	2b20      	cmp	r3, #32
 800401a:	d171      	bne.n	8004100 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_UART_Transmit+0x24>
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e06a      	b.n	8004102 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2221      	movs	r2, #33	; 0x21
 8004038:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800403a:	f7fd f869 	bl	8001110 <HAL_GetTick>
 800403e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	88fa      	ldrh	r2, [r7, #6]
 8004044:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004058:	d108      	bne.n	800406c <HAL_UART_Transmit+0x68>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d104      	bne.n	800406c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	61bb      	str	r3, [r7, #24]
 800406a:	e003      	b.n	8004074 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004070:	2300      	movs	r3, #0
 8004072:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004074:	e02c      	b.n	80040d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2200      	movs	r2, #0
 800407e:	2180      	movs	r1, #128	; 0x80
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 fb96 	bl	80047b2 <UART_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e038      	b.n	8004102 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10b      	bne.n	80040ae <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	3302      	adds	r3, #2
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	e007      	b.n	80040be <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	781a      	ldrb	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	3301      	adds	r3, #1
 80040bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1cc      	bne.n	8004076 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2200      	movs	r2, #0
 80040e4:	2140      	movs	r1, #64	; 0x40
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fb63 	bl	80047b2 <UART_WaitOnFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e005      	b.n	8004102 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2220      	movs	r2, #32
 80040fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e000      	b.n	8004102 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
  }
}
 8004102:	4618      	mov	r0, r3
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4ba6      	ldr	r3, [pc, #664]	; (80043d0 <UART_SetConfig+0x2c4>)
 8004138:	4013      	ands	r3, r2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	6979      	ldr	r1, [r7, #20]
 8004140:	430b      	orrs	r3, r1
 8004142:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	430a      	orrs	r2, r1
 800417c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a94      	ldr	r2, [pc, #592]	; (80043d4 <UART_SetConfig+0x2c8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d120      	bne.n	80041ca <UART_SetConfig+0xbe>
 8004188:	4b93      	ldr	r3, [pc, #588]	; (80043d8 <UART_SetConfig+0x2cc>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	2b03      	cmp	r3, #3
 8004194:	d816      	bhi.n	80041c4 <UART_SetConfig+0xb8>
 8004196:	a201      	add	r2, pc, #4	; (adr r2, 800419c <UART_SetConfig+0x90>)
 8004198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419c:	080041ad 	.word	0x080041ad
 80041a0:	080041b9 	.word	0x080041b9
 80041a4:	080041b3 	.word	0x080041b3
 80041a8:	080041bf 	.word	0x080041bf
 80041ac:	2301      	movs	r3, #1
 80041ae:	77fb      	strb	r3, [r7, #31]
 80041b0:	e150      	b.n	8004454 <UART_SetConfig+0x348>
 80041b2:	2302      	movs	r3, #2
 80041b4:	77fb      	strb	r3, [r7, #31]
 80041b6:	e14d      	b.n	8004454 <UART_SetConfig+0x348>
 80041b8:	2304      	movs	r3, #4
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e14a      	b.n	8004454 <UART_SetConfig+0x348>
 80041be:	2308      	movs	r3, #8
 80041c0:	77fb      	strb	r3, [r7, #31]
 80041c2:	e147      	b.n	8004454 <UART_SetConfig+0x348>
 80041c4:	2310      	movs	r3, #16
 80041c6:	77fb      	strb	r3, [r7, #31]
 80041c8:	e144      	b.n	8004454 <UART_SetConfig+0x348>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a83      	ldr	r2, [pc, #524]	; (80043dc <UART_SetConfig+0x2d0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d132      	bne.n	800423a <UART_SetConfig+0x12e>
 80041d4:	4b80      	ldr	r3, [pc, #512]	; (80043d8 <UART_SetConfig+0x2cc>)
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041da:	f003 030c 	and.w	r3, r3, #12
 80041de:	2b0c      	cmp	r3, #12
 80041e0:	d828      	bhi.n	8004234 <UART_SetConfig+0x128>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <UART_SetConfig+0xdc>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	0800421d 	.word	0x0800421d
 80041ec:	08004235 	.word	0x08004235
 80041f0:	08004235 	.word	0x08004235
 80041f4:	08004235 	.word	0x08004235
 80041f8:	08004229 	.word	0x08004229
 80041fc:	08004235 	.word	0x08004235
 8004200:	08004235 	.word	0x08004235
 8004204:	08004235 	.word	0x08004235
 8004208:	08004223 	.word	0x08004223
 800420c:	08004235 	.word	0x08004235
 8004210:	08004235 	.word	0x08004235
 8004214:	08004235 	.word	0x08004235
 8004218:	0800422f 	.word	0x0800422f
 800421c:	2300      	movs	r3, #0
 800421e:	77fb      	strb	r3, [r7, #31]
 8004220:	e118      	b.n	8004454 <UART_SetConfig+0x348>
 8004222:	2302      	movs	r3, #2
 8004224:	77fb      	strb	r3, [r7, #31]
 8004226:	e115      	b.n	8004454 <UART_SetConfig+0x348>
 8004228:	2304      	movs	r3, #4
 800422a:	77fb      	strb	r3, [r7, #31]
 800422c:	e112      	b.n	8004454 <UART_SetConfig+0x348>
 800422e:	2308      	movs	r3, #8
 8004230:	77fb      	strb	r3, [r7, #31]
 8004232:	e10f      	b.n	8004454 <UART_SetConfig+0x348>
 8004234:	2310      	movs	r3, #16
 8004236:	77fb      	strb	r3, [r7, #31]
 8004238:	e10c      	b.n	8004454 <UART_SetConfig+0x348>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a68      	ldr	r2, [pc, #416]	; (80043e0 <UART_SetConfig+0x2d4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d120      	bne.n	8004286 <UART_SetConfig+0x17a>
 8004244:	4b64      	ldr	r3, [pc, #400]	; (80043d8 <UART_SetConfig+0x2cc>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800424e:	2b30      	cmp	r3, #48	; 0x30
 8004250:	d013      	beq.n	800427a <UART_SetConfig+0x16e>
 8004252:	2b30      	cmp	r3, #48	; 0x30
 8004254:	d814      	bhi.n	8004280 <UART_SetConfig+0x174>
 8004256:	2b20      	cmp	r3, #32
 8004258:	d009      	beq.n	800426e <UART_SetConfig+0x162>
 800425a:	2b20      	cmp	r3, #32
 800425c:	d810      	bhi.n	8004280 <UART_SetConfig+0x174>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <UART_SetConfig+0x15c>
 8004262:	2b10      	cmp	r3, #16
 8004264:	d006      	beq.n	8004274 <UART_SetConfig+0x168>
 8004266:	e00b      	b.n	8004280 <UART_SetConfig+0x174>
 8004268:	2300      	movs	r3, #0
 800426a:	77fb      	strb	r3, [r7, #31]
 800426c:	e0f2      	b.n	8004454 <UART_SetConfig+0x348>
 800426e:	2302      	movs	r3, #2
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e0ef      	b.n	8004454 <UART_SetConfig+0x348>
 8004274:	2304      	movs	r3, #4
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e0ec      	b.n	8004454 <UART_SetConfig+0x348>
 800427a:	2308      	movs	r3, #8
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e0e9      	b.n	8004454 <UART_SetConfig+0x348>
 8004280:	2310      	movs	r3, #16
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	e0e6      	b.n	8004454 <UART_SetConfig+0x348>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a56      	ldr	r2, [pc, #344]	; (80043e4 <UART_SetConfig+0x2d8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d120      	bne.n	80042d2 <UART_SetConfig+0x1c6>
 8004290:	4b51      	ldr	r3, [pc, #324]	; (80043d8 <UART_SetConfig+0x2cc>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800429a:	2bc0      	cmp	r3, #192	; 0xc0
 800429c:	d013      	beq.n	80042c6 <UART_SetConfig+0x1ba>
 800429e:	2bc0      	cmp	r3, #192	; 0xc0
 80042a0:	d814      	bhi.n	80042cc <UART_SetConfig+0x1c0>
 80042a2:	2b80      	cmp	r3, #128	; 0x80
 80042a4:	d009      	beq.n	80042ba <UART_SetConfig+0x1ae>
 80042a6:	2b80      	cmp	r3, #128	; 0x80
 80042a8:	d810      	bhi.n	80042cc <UART_SetConfig+0x1c0>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <UART_SetConfig+0x1a8>
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d006      	beq.n	80042c0 <UART_SetConfig+0x1b4>
 80042b2:	e00b      	b.n	80042cc <UART_SetConfig+0x1c0>
 80042b4:	2300      	movs	r3, #0
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e0cc      	b.n	8004454 <UART_SetConfig+0x348>
 80042ba:	2302      	movs	r3, #2
 80042bc:	77fb      	strb	r3, [r7, #31]
 80042be:	e0c9      	b.n	8004454 <UART_SetConfig+0x348>
 80042c0:	2304      	movs	r3, #4
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e0c6      	b.n	8004454 <UART_SetConfig+0x348>
 80042c6:	2308      	movs	r3, #8
 80042c8:	77fb      	strb	r3, [r7, #31]
 80042ca:	e0c3      	b.n	8004454 <UART_SetConfig+0x348>
 80042cc:	2310      	movs	r3, #16
 80042ce:	77fb      	strb	r3, [r7, #31]
 80042d0:	e0c0      	b.n	8004454 <UART_SetConfig+0x348>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a44      	ldr	r2, [pc, #272]	; (80043e8 <UART_SetConfig+0x2dc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d125      	bne.n	8004328 <UART_SetConfig+0x21c>
 80042dc:	4b3e      	ldr	r3, [pc, #248]	; (80043d8 <UART_SetConfig+0x2cc>)
 80042de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ea:	d017      	beq.n	800431c <UART_SetConfig+0x210>
 80042ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f0:	d817      	bhi.n	8004322 <UART_SetConfig+0x216>
 80042f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f6:	d00b      	beq.n	8004310 <UART_SetConfig+0x204>
 80042f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042fc:	d811      	bhi.n	8004322 <UART_SetConfig+0x216>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <UART_SetConfig+0x1fe>
 8004302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004306:	d006      	beq.n	8004316 <UART_SetConfig+0x20a>
 8004308:	e00b      	b.n	8004322 <UART_SetConfig+0x216>
 800430a:	2300      	movs	r3, #0
 800430c:	77fb      	strb	r3, [r7, #31]
 800430e:	e0a1      	b.n	8004454 <UART_SetConfig+0x348>
 8004310:	2302      	movs	r3, #2
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e09e      	b.n	8004454 <UART_SetConfig+0x348>
 8004316:	2304      	movs	r3, #4
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	e09b      	b.n	8004454 <UART_SetConfig+0x348>
 800431c:	2308      	movs	r3, #8
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e098      	b.n	8004454 <UART_SetConfig+0x348>
 8004322:	2310      	movs	r3, #16
 8004324:	77fb      	strb	r3, [r7, #31]
 8004326:	e095      	b.n	8004454 <UART_SetConfig+0x348>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a2f      	ldr	r2, [pc, #188]	; (80043ec <UART_SetConfig+0x2e0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d125      	bne.n	800437e <UART_SetConfig+0x272>
 8004332:	4b29      	ldr	r3, [pc, #164]	; (80043d8 <UART_SetConfig+0x2cc>)
 8004334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004338:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800433c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004340:	d017      	beq.n	8004372 <UART_SetConfig+0x266>
 8004342:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004346:	d817      	bhi.n	8004378 <UART_SetConfig+0x26c>
 8004348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434c:	d00b      	beq.n	8004366 <UART_SetConfig+0x25a>
 800434e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004352:	d811      	bhi.n	8004378 <UART_SetConfig+0x26c>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <UART_SetConfig+0x254>
 8004358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435c:	d006      	beq.n	800436c <UART_SetConfig+0x260>
 800435e:	e00b      	b.n	8004378 <UART_SetConfig+0x26c>
 8004360:	2301      	movs	r3, #1
 8004362:	77fb      	strb	r3, [r7, #31]
 8004364:	e076      	b.n	8004454 <UART_SetConfig+0x348>
 8004366:	2302      	movs	r3, #2
 8004368:	77fb      	strb	r3, [r7, #31]
 800436a:	e073      	b.n	8004454 <UART_SetConfig+0x348>
 800436c:	2304      	movs	r3, #4
 800436e:	77fb      	strb	r3, [r7, #31]
 8004370:	e070      	b.n	8004454 <UART_SetConfig+0x348>
 8004372:	2308      	movs	r3, #8
 8004374:	77fb      	strb	r3, [r7, #31]
 8004376:	e06d      	b.n	8004454 <UART_SetConfig+0x348>
 8004378:	2310      	movs	r3, #16
 800437a:	77fb      	strb	r3, [r7, #31]
 800437c:	e06a      	b.n	8004454 <UART_SetConfig+0x348>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1b      	ldr	r2, [pc, #108]	; (80043f0 <UART_SetConfig+0x2e4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d138      	bne.n	80043fa <UART_SetConfig+0x2ee>
 8004388:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <UART_SetConfig+0x2cc>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004392:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004396:	d017      	beq.n	80043c8 <UART_SetConfig+0x2bc>
 8004398:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800439c:	d82a      	bhi.n	80043f4 <UART_SetConfig+0x2e8>
 800439e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a2:	d00b      	beq.n	80043bc <UART_SetConfig+0x2b0>
 80043a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a8:	d824      	bhi.n	80043f4 <UART_SetConfig+0x2e8>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <UART_SetConfig+0x2aa>
 80043ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b2:	d006      	beq.n	80043c2 <UART_SetConfig+0x2b6>
 80043b4:	e01e      	b.n	80043f4 <UART_SetConfig+0x2e8>
 80043b6:	2300      	movs	r3, #0
 80043b8:	77fb      	strb	r3, [r7, #31]
 80043ba:	e04b      	b.n	8004454 <UART_SetConfig+0x348>
 80043bc:	2302      	movs	r3, #2
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e048      	b.n	8004454 <UART_SetConfig+0x348>
 80043c2:	2304      	movs	r3, #4
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e045      	b.n	8004454 <UART_SetConfig+0x348>
 80043c8:	2308      	movs	r3, #8
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e042      	b.n	8004454 <UART_SetConfig+0x348>
 80043ce:	bf00      	nop
 80043d0:	efff69f3 	.word	0xefff69f3
 80043d4:	40011000 	.word	0x40011000
 80043d8:	40023800 	.word	0x40023800
 80043dc:	40004400 	.word	0x40004400
 80043e0:	40004800 	.word	0x40004800
 80043e4:	40004c00 	.word	0x40004c00
 80043e8:	40005000 	.word	0x40005000
 80043ec:	40011400 	.word	0x40011400
 80043f0:	40007800 	.word	0x40007800
 80043f4:	2310      	movs	r3, #16
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e02c      	b.n	8004454 <UART_SetConfig+0x348>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a72      	ldr	r2, [pc, #456]	; (80045c8 <UART_SetConfig+0x4bc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d125      	bne.n	8004450 <UART_SetConfig+0x344>
 8004404:	4b71      	ldr	r3, [pc, #452]	; (80045cc <UART_SetConfig+0x4c0>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800440e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004412:	d017      	beq.n	8004444 <UART_SetConfig+0x338>
 8004414:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004418:	d817      	bhi.n	800444a <UART_SetConfig+0x33e>
 800441a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441e:	d00b      	beq.n	8004438 <UART_SetConfig+0x32c>
 8004420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004424:	d811      	bhi.n	800444a <UART_SetConfig+0x33e>
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <UART_SetConfig+0x326>
 800442a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800442e:	d006      	beq.n	800443e <UART_SetConfig+0x332>
 8004430:	e00b      	b.n	800444a <UART_SetConfig+0x33e>
 8004432:	2300      	movs	r3, #0
 8004434:	77fb      	strb	r3, [r7, #31]
 8004436:	e00d      	b.n	8004454 <UART_SetConfig+0x348>
 8004438:	2302      	movs	r3, #2
 800443a:	77fb      	strb	r3, [r7, #31]
 800443c:	e00a      	b.n	8004454 <UART_SetConfig+0x348>
 800443e:	2304      	movs	r3, #4
 8004440:	77fb      	strb	r3, [r7, #31]
 8004442:	e007      	b.n	8004454 <UART_SetConfig+0x348>
 8004444:	2308      	movs	r3, #8
 8004446:	77fb      	strb	r3, [r7, #31]
 8004448:	e004      	b.n	8004454 <UART_SetConfig+0x348>
 800444a:	2310      	movs	r3, #16
 800444c:	77fb      	strb	r3, [r7, #31]
 800444e:	e001      	b.n	8004454 <UART_SetConfig+0x348>
 8004450:	2310      	movs	r3, #16
 8004452:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800445c:	d15b      	bne.n	8004516 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800445e:	7ffb      	ldrb	r3, [r7, #31]
 8004460:	2b08      	cmp	r3, #8
 8004462:	d828      	bhi.n	80044b6 <UART_SetConfig+0x3aa>
 8004464:	a201      	add	r2, pc, #4	; (adr r2, 800446c <UART_SetConfig+0x360>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	08004491 	.word	0x08004491
 8004470:	08004499 	.word	0x08004499
 8004474:	080044a1 	.word	0x080044a1
 8004478:	080044b7 	.word	0x080044b7
 800447c:	080044a7 	.word	0x080044a7
 8004480:	080044b7 	.word	0x080044b7
 8004484:	080044b7 	.word	0x080044b7
 8004488:	080044b7 	.word	0x080044b7
 800448c:	080044af 	.word	0x080044af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004490:	f7fe fb02 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 8004494:	61b8      	str	r0, [r7, #24]
        break;
 8004496:	e013      	b.n	80044c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004498:	f7fe fb12 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
 800449c:	61b8      	str	r0, [r7, #24]
        break;
 800449e:	e00f      	b.n	80044c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a0:	4b4b      	ldr	r3, [pc, #300]	; (80045d0 <UART_SetConfig+0x4c4>)
 80044a2:	61bb      	str	r3, [r7, #24]
        break;
 80044a4:	e00c      	b.n	80044c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044a6:	f7fe fa25 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 80044aa:	61b8      	str	r0, [r7, #24]
        break;
 80044ac:	e008      	b.n	80044c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b2:	61bb      	str	r3, [r7, #24]
        break;
 80044b4:	e004      	b.n	80044c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	77bb      	strb	r3, [r7, #30]
        break;
 80044be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d074      	beq.n	80045b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	005a      	lsls	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	085b      	lsrs	r3, r3, #1
 80044d0:	441a      	add	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	2b0f      	cmp	r3, #15
 80044e0:	d916      	bls.n	8004510 <UART_SetConfig+0x404>
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e8:	d212      	bcs.n	8004510 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f023 030f 	bic.w	r3, r3, #15
 80044f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	b29a      	uxth	r2, r3
 8004500:	89fb      	ldrh	r3, [r7, #14]
 8004502:	4313      	orrs	r3, r2
 8004504:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	89fa      	ldrh	r2, [r7, #14]
 800450c:	60da      	str	r2, [r3, #12]
 800450e:	e04f      	b.n	80045b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	77bb      	strb	r3, [r7, #30]
 8004514:	e04c      	b.n	80045b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004516:	7ffb      	ldrb	r3, [r7, #31]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d828      	bhi.n	800456e <UART_SetConfig+0x462>
 800451c:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <UART_SetConfig+0x418>)
 800451e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004522:	bf00      	nop
 8004524:	08004549 	.word	0x08004549
 8004528:	08004551 	.word	0x08004551
 800452c:	08004559 	.word	0x08004559
 8004530:	0800456f 	.word	0x0800456f
 8004534:	0800455f 	.word	0x0800455f
 8004538:	0800456f 	.word	0x0800456f
 800453c:	0800456f 	.word	0x0800456f
 8004540:	0800456f 	.word	0x0800456f
 8004544:	08004567 	.word	0x08004567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004548:	f7fe faa6 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 800454c:	61b8      	str	r0, [r7, #24]
        break;
 800454e:	e013      	b.n	8004578 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004550:	f7fe fab6 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
 8004554:	61b8      	str	r0, [r7, #24]
        break;
 8004556:	e00f      	b.n	8004578 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004558:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <UART_SetConfig+0x4c4>)
 800455a:	61bb      	str	r3, [r7, #24]
        break;
 800455c:	e00c      	b.n	8004578 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800455e:	f7fe f9c9 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 8004562:	61b8      	str	r0, [r7, #24]
        break;
 8004564:	e008      	b.n	8004578 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800456a:	61bb      	str	r3, [r7, #24]
        break;
 800456c:	e004      	b.n	8004578 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	77bb      	strb	r3, [r7, #30]
        break;
 8004576:	bf00      	nop
    }

    if (pclk != 0U)
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d018      	beq.n	80045b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	085a      	lsrs	r2, r3, #1
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	441a      	add	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b0f      	cmp	r3, #15
 8004596:	d909      	bls.n	80045ac <UART_SetConfig+0x4a0>
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459e:	d205      	bcs.n	80045ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60da      	str	r2, [r3, #12]
 80045aa:	e001      	b.n	80045b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3720      	adds	r7, #32
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40007c00 	.word	0x40007c00
 80045cc:	40023800 	.word	0x40023800
 80045d0:	00f42400 	.word	0x00f42400

080045d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	f003 0310 	and.w	r3, r3, #16
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01a      	beq.n	80046ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d2:	d10a      	bne.n	80046ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	605a      	str	r2, [r3, #4]
  }
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af02      	add	r7, sp, #8
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004728:	f7fc fcf2 	bl	8001110 <HAL_GetTick>
 800472c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b08      	cmp	r3, #8
 800473a:	d10e      	bne.n	800475a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800473c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f831 	bl	80047b2 <UART_WaitOnFlagUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e027      	b.n	80047aa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b04      	cmp	r3, #4
 8004766:	d10e      	bne.n	8004786 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f81b 	bl	80047b2 <UART_WaitOnFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e011      	b.n	80047aa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b09c      	sub	sp, #112	; 0x70
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	4613      	mov	r3, r2
 80047c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c2:	e0a7      	b.n	8004914 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	f000 80a3 	beq.w	8004914 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ce:	f7fc fc9f 	bl	8001110 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047da:	429a      	cmp	r2, r3
 80047dc:	d302      	bcc.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80047de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d13f      	bne.n	8004864 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047f8:	667b      	str	r3, [r7, #100]	; 0x64
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004802:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004804:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004808:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e6      	bne.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3308      	adds	r3, #8
 800481c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004828:	f023 0301 	bic.w	r3, r3, #1
 800482c:	663b      	str	r3, [r7, #96]	; 0x60
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3308      	adds	r3, #8
 8004834:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004836:	64ba      	str	r2, [r7, #72]	; 0x48
 8004838:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800483c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e5      	bne.n	8004816 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e068      	b.n	8004936 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d050      	beq.n	8004914 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800487c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004880:	d148      	bne.n	8004914 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800488a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048aa:	637b      	str	r3, [r7, #52]	; 0x34
 80048ac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e6      	bne.n	800488c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3308      	adds	r3, #8
 80048c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	613b      	str	r3, [r7, #16]
   return(result);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3308      	adds	r3, #8
 80048dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048de:	623a      	str	r2, [r7, #32]
 80048e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	69f9      	ldr	r1, [r7, #28]
 80048e4:	6a3a      	ldr	r2, [r7, #32]
 80048e6:	e841 2300 	strex	r3, r2, [r1]
 80048ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1e5      	bne.n	80048be <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2220      	movs	r2, #32
 80048f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e010      	b.n	8004936 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	69da      	ldr	r2, [r3, #28]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	4013      	ands	r3, r2
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	429a      	cmp	r2, r3
 8004922:	bf0c      	ite	eq
 8004924:	2301      	moveq	r3, #1
 8004926:	2300      	movne	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	461a      	mov	r2, r3
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	429a      	cmp	r2, r3
 8004930:	f43f af48 	beq.w	80047c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3770      	adds	r7, #112	; 0x70
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004948:	2300      	movs	r3, #0
 800494a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800494c:	6839      	ldr	r1, [r7, #0]
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f001 fd83 	bl	800645a <VL53L0X_get_offset_calibration_data_micro_meter>
 8004954:	4603      	mov	r3, r0
 8004956:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004958:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b0a4      	sub	sp, #144	; 0x90
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800496c:	2300      	movs	r3, #0
 800496e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8004972:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004976:	2b00      	cmp	r3, #0
 8004978:	d107      	bne.n	800498a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800497a:	2200      	movs	r2, #0
 800497c:	2188      	movs	r1, #136	; 0x88
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f004 ff2c 	bl	80097dc <VL53L0X_WrByte>
 8004984:	4603      	mov	r3, r0
 8004986:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004998:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660
	 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4aae      	ldr	r2, [pc, #696]	; (8004c58 <VL53L0X_DataInit+0x2f4>)
 80049a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	619a      	str	r2, [r3, #24]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80049aa:	f107 0310 	add.w	r3, r7, #16
 80049ae:	4619      	mov	r1, r3
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 faef 	bl	8004f94 <VL53L0X_GetDeviceParameters>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (Status == VL53L0X_ERROR_NONE) {
 80049bc:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d130      	bne.n	8004a26 <VL53L0X_DataInit+0xc2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode =
 80049c4:	2300      	movs	r3, #0
 80049c6:	743b      	strb	r3, [r7, #16]
					VL53L0X_DEVICEMODE_SINGLE_RANGING;
		CurrentParameters.HistogramMode =
 80049c8:	2300      	movs	r3, #0
 80049ca:	747b      	strb	r3, [r7, #17]
					VL53L0X_HISTOGRAMMODE_DISABLED;

		/* Dmax lookup table */
	/* 0.0 */
	CurrentParameters.dmax_lut.ambRate_mcps[0] = (FixPoint1616_t)0x00000000;
 80049cc:	2300      	movs	r3, #0
 80049ce:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* 1200 */
	CurrentParameters.dmax_lut.dmax_mm[0]      = (FixPoint1616_t)0x04B00000;
 80049d0:	f04f 6396 	mov.w	r3, #78643200	; 0x4b00000
 80049d4:	66bb      	str	r3, [r7, #104]	; 0x68
	/* 0.7 */
	CurrentParameters.dmax_lut.ambRate_mcps[1] = (FixPoint1616_t)0x0000B333;
 80049d6:	f24b 3333 	movw	r3, #45875	; 0xb333
 80049da:	653b      	str	r3, [r7, #80]	; 0x50
	/* 1100 */
	CurrentParameters.dmax_lut.dmax_mm[1]      = (FixPoint1616_t)0x044C0000;
 80049dc:	4b9f      	ldr	r3, [pc, #636]	; (8004c5c <VL53L0X_DataInit+0x2f8>)
 80049de:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* 2 */
	CurrentParameters.dmax_lut.ambRate_mcps[2] = (FixPoint1616_t)0x00020000;
 80049e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049e4:	657b      	str	r3, [r7, #84]	; 0x54
	/* 900 */
	CurrentParameters.dmax_lut.dmax_mm[2]      = (FixPoint1616_t)0x03840000;
 80049e6:	f04f 7361 	mov.w	r3, #58982400	; 0x3840000
 80049ea:	673b      	str	r3, [r7, #112]	; 0x70
	/* 3.8 */
	CurrentParameters.dmax_lut.ambRate_mcps[3] = (FixPoint1616_t)0x0003CCCC;
 80049ec:	4b9c      	ldr	r3, [pc, #624]	; (8004c60 <VL53L0X_DataInit+0x2fc>)
 80049ee:	65bb      	str	r3, [r7, #88]	; 0x58
	/* 750 */
	CurrentParameters.dmax_lut.dmax_mm[3]      = (FixPoint1616_t)0x02EE0000;
 80049f0:	4b9c      	ldr	r3, [pc, #624]	; (8004c64 <VL53L0X_DataInit+0x300>)
 80049f2:	677b      	str	r3, [r7, #116]	; 0x74
	/* 7.3 */
	CurrentParameters.dmax_lut.ambRate_mcps[4] = (FixPoint1616_t)0x00074CCC;
 80049f4:	4b9c      	ldr	r3, [pc, #624]	; (8004c68 <VL53L0X_DataInit+0x304>)
 80049f6:	65fb      	str	r3, [r7, #92]	; 0x5c
	/* 550 */
	CurrentParameters.dmax_lut.dmax_mm[4]      = (FixPoint1616_t)0x02260000;
 80049f8:	4b9c      	ldr	r3, [pc, #624]	; (8004c6c <VL53L0X_DataInit+0x308>)
 80049fa:	67bb      	str	r3, [r7, #120]	; 0x78
	/* 10 */
	CurrentParameters.dmax_lut.ambRate_mcps[5] = (FixPoint1616_t)0x000A0000;
 80049fc:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8004a00:	663b      	str	r3, [r7, #96]	; 0x60
	/* 500 */
	CurrentParameters.dmax_lut.dmax_mm[5]      = (FixPoint1616_t)0x01F40000;
 8004a02:	f04f 73fa 	mov.w	r3, #32768000	; 0x1f40000
 8004a06:	67fb      	str	r3, [r7, #124]	; 0x7c
	/* 15 */
	CurrentParameters.dmax_lut.ambRate_mcps[6] = (FixPoint1616_t)0x000F0000;
 8004a08:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8004a0c:	667b      	str	r3, [r7, #100]	; 0x64
	/* 400 */
	CurrentParameters.dmax_lut.dmax_mm[6]      = (FixPoint1616_t)0x01900000;
 8004a0e:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
 8004a12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3308      	adds	r3, #8
 8004a1a:	f107 0110 	add.w	r1, r7, #16
 8004a1e:	2278      	movs	r2, #120	; 0x78
 8004a20:	4618      	mov	r0, r3
 8004a22:	f005 fa81 	bl	8009f28 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2264      	movs	r2, #100	; 0x64
 8004a2a:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004a34:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004a3e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004a48:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004a54:	2201      	movs	r2, #1
 8004a56:	2180      	movs	r1, #128	; 0x80
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f004 febf 	bl	80097dc <VL53L0X_WrByte>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	461a      	mov	r2, r3
 8004a62:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	21ff      	movs	r1, #255	; 0xff
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f004 feb3 	bl	80097dc <VL53L0X_WrByte>
 8004a76:	4603      	mov	r3, r0
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004a84:	2200      	movs	r2, #0
 8004a86:	2100      	movs	r1, #0
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f004 fea7 	bl	80097dc <VL53L0X_WrByte>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	461a      	mov	r2, r3
 8004a92:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004a9c:	f107 030f 	add.w	r3, r7, #15
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2191      	movs	r1, #145	; 0x91
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f004 ff1b 	bl	80098e0 <VL53L0X_RdByte>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	461a      	mov	r2, r3
 8004aae:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004ab8:	7bfa      	ldrb	r2, [r7, #15]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f004 fe89 	bl	80097dc <VL53L0X_WrByte>
 8004aca:	4603      	mov	r3, r0
 8004acc:	461a      	mov	r2, r3
 8004ace:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004ad8:	2200      	movs	r2, #0
 8004ada:	21ff      	movs	r1, #255	; 0xff
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f004 fe7d 	bl	80097dc <VL53L0X_WrByte>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004af0:	2200      	movs	r2, #0
 8004af2:	2180      	movs	r1, #128	; 0x80
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f004 fe71 	bl	80097dc <VL53L0X_WrByte>
 8004afa:	4603      	mov	r3, r0
 8004afc:	461a      	mov	r2, r3
 8004afe:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b0e:	e017      	b.n	8004b40 <VL53L0X_DataInit+0x1dc>
		if (Status == VL53L0X_ERROR_NONE)
 8004b10:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d118      	bne.n	8004b4a <VL53L0X_DataInit+0x1e6>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004b18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2201      	movs	r2, #1
 8004b20:	4619      	mov	r1, r3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fd66 	bl	80055f4 <VL53L0X_SetLimitCheckEnable>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b44:	2b05      	cmp	r3, #5
 8004b46:	dde3      	ble.n	8004b10 <VL53L0X_DataInit+0x1ac>
 8004b48:	e000      	b.n	8004b4c <VL53L0X_DataInit+0x1e8>
		else
			break;
 8004b4a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004b4c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d107      	bne.n	8004b64 <VL53L0X_DataInit+0x200>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004b54:	2200      	movs	r2, #0
 8004b56:	2102      	movs	r1, #2
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fd4b 	bl	80055f4 <VL53L0X_SetLimitCheckEnable>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004b64:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d107      	bne.n	8004b7c <VL53L0X_DataInit+0x218>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2103      	movs	r1, #3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fd3f 	bl	80055f4 <VL53L0X_SetLimitCheckEnable>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004b7c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d107      	bne.n	8004b94 <VL53L0X_DataInit+0x230>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004b84:	2200      	movs	r2, #0
 8004b86:	2104      	movs	r1, #4
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fd33 	bl	80055f4 <VL53L0X_SetLimitCheckEnable>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004b94:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d107      	bne.n	8004bac <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2105      	movs	r1, #5
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fd27 	bl	80055f4 <VL53L0X_SetLimitCheckEnable>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004bac:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d108      	bne.n	8004bc6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004bb4:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8004bb8:	2100      	movs	r1, #0
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fdca 	bl	8005754 <VL53L0X_SetLimitCheckValue>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004bc6:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d108      	bne.n	8004be0 <VL53L0X_DataInit+0x27c>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fdbd 	bl	8005754 <VL53L0X_SetLimitCheckValue>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004be0:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d108      	bne.n	8004bfa <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004be8:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8004bec:	2102      	movs	r1, #2
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fdb0 	bl	8005754 <VL53L0X_SetLimitCheckValue>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004bfa:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d107      	bne.n	8004c12 <VL53L0X_DataInit+0x2ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004c02:	2200      	movs	r2, #0
 8004c04:	2103      	movs	r1, #3
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fda4 	bl	8005754 <VL53L0X_SetLimitCheckValue>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004c12:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10f      	bne.n	8004c3a <VL53L0X_DataInit+0x2d6>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	22ff      	movs	r2, #255	; 0xff
 8004c1e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004c22:	22ff      	movs	r2, #255	; 0xff
 8004c24:	2101      	movs	r1, #1
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f004 fdd8 	bl	80097dc <VL53L0X_WrByte>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit
		 */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004c3a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d103      	bne.n	8004c4a <VL53L0X_DataInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141


	LOG_FUNCTION_END(Status);
	return Status;
 8004c4a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3790      	adds	r7, #144	; 0x90
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	000970a4 	.word	0x000970a4
 8004c5c:	044c0000 	.word	0x044c0000
 8004c60:	0003cccc 	.word	0x0003cccc
 8004c64:	02ee0000 	.word	0x02ee0000
 8004c68:	00074ccc 	.word	0x00074ccc
 8004c6c:	02260000 	.word	0x02260000

08004c70 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b0ac      	sub	sp, #176	; 0xb0
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8004c7e:	f107 031c 	add.w	r3, r7, #28
 8004c82:	2278      	movs	r2, #120	; 0x78
 8004c84:	2100      	movs	r1, #0
 8004c86:	4618      	mov	r0, r3
 8004c88:	f005 f912 	bl	8009eb0 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	uint32_t count = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint8_t isApertureSpads = 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8004cae:	2101      	movs	r1, #1
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f002 fb28 	bl	8007306 <VL53L0X_get_info_from_device>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8004cc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8004ccc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004cd0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d80f      	bhi.n	8004cf8 <VL53L0X_StaticInit+0x88>
 8004cd8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d103      	bne.n	8004ce8 <VL53L0X_StaticInit+0x78>
		((ApertureSpads == 1) && (count > 32)) ||
 8004ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d807      	bhi.n	8004cf8 <VL53L0X_StaticInit+0x88>
 8004ce8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10f      	bne.n	8004d10 <VL53L0X_StaticInit+0xa0>
		((ApertureSpads == 0) && (count > 12)))
 8004cf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cf4:	2b0c      	cmp	r3, #12
 8004cf6:	d90b      	bls.n	8004d10 <VL53L0X_StaticInit+0xa0>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8004cf8:	f107 0218 	add.w	r2, r7, #24
 8004cfc:	f107 0314 	add.w	r3, r7, #20
 8004d00:	4619      	mov	r1, r3
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f001 fda4 	bl	8006850 <VL53L0X_perform_ref_spad_management>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8004d0e:	e00a      	b.n	8004d26 <VL53L0X_StaticInit+0xb6>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8004d10:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004d14:	461a      	mov	r2, r3
 8004d16:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f001 ffa4 	bl	8006c68 <VL53L0X_set_reference_spads>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8004d26:	4b93      	ldr	r3, [pc, #588]	; (8004f74 <VL53L0X_StaticInit+0x304>)
 8004d28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8004d2c:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d111      	bne.n	8004d58 <VL53L0X_StaticInit+0xe8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004d3a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004d3e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d105      	bne.n	8004d52 <VL53L0X_StaticInit+0xe2>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8004d4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d50:	e002      	b.n	8004d58 <VL53L0X_StaticInit+0xe8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8004d52:	4b88      	ldr	r3, [pc, #544]	; (8004f74 <VL53L0X_StaticInit+0x304>)
 8004d54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004d58:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d107      	bne.n	8004d70 <VL53L0X_StaticInit+0x100>
		Status = VL53L0X_load_tuning_settings(Dev,
 8004d60:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f003 fe67 	bl	8008a38 <VL53L0X_load_tuning_settings>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						      pTuningSettingBuffer);


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8004d70:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <VL53L0X_StaticInit+0x11e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8004d78:	2300      	movs	r3, #0
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2100      	movs	r1, #0
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f001 f99a 	bl	80060bc <VL53L0X_SetGpioConfig>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d8e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d121      	bne.n	8004dda <VL53L0X_StaticInit+0x16a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004d96:	2201      	movs	r2, #1
 8004d98:	21ff      	movs	r1, #255	; 0xff
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f004 fd1e 	bl	80097dc <VL53L0X_WrByte>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8004da6:	f107 031a 	add.w	r3, r7, #26
 8004daa:	461a      	mov	r2, r3
 8004dac:	2184      	movs	r1, #132	; 0x84
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f004 fdc0 	bl	8009934 <VL53L0X_RdWord>
 8004db4:	4603      	mov	r3, r0
 8004db6:	461a      	mov	r2, r3
 8004db8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	21ff      	movs	r1, #255	; 0xff
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f004 fd08 	bl	80097dc <VL53L0X_WrByte>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004dda:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d105      	bne.n	8004dee <VL53L0X_StaticInit+0x17e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8004de2:	8b7b      	ldrh	r3, [r7, #26]
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	461a      	mov	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}

	/* After static init, some device parameters may be changed,
	 * so update them
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8004dee:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d108      	bne.n	8004e08 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004df6:	f107 031c 	add.w	r3, r7, #28
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f8c9 	bl	8004f94 <VL53L0X_GetDeviceParameters>
 8004e02:	4603      	mov	r3, r0
 8004e04:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	if (Status == VL53L0X_ERROR_NONE) {
 8004e08:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d110      	bne.n	8004e32 <VL53L0X_StaticInit+0x1c2>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8004e10:	f107 0319 	add.w	r3, r7, #25
 8004e14:	4619      	mov	r1, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f9b1 	bl	800517e <VL53L0X_GetFractionEnable>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (Status == VL53L0X_ERROR_NONE)
 8004e22:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d103      	bne.n	8004e32 <VL53L0X_StaticInit+0x1c2>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8004e2a:	7e7a      	ldrb	r2, [r7, #25]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004e32:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d107      	bne.n	8004e4a <VL53L0X_StaticInit+0x1da>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	f107 011c 	add.w	r1, r7, #28
 8004e42:	2278      	movs	r2, #120	; 0x78
 8004e44:	4618      	mov	r0, r3
 8004e46:	f005 f86f 	bl	8009f28 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8004e4a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d111      	bne.n	8004e76 <VL53L0X_StaticInit+0x206>
		Status = VL53L0X_RdByte(Dev,
 8004e52:	f107 0319 	add.w	r3, r7, #25
 8004e56:	461a      	mov	r2, r3
 8004e58:	2101      	movs	r1, #1
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f004 fd40 	bl	80098e0 <VL53L0X_RdByte>
 8004e60:	4603      	mov	r3, r0
 8004e62:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8004e66:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d103      	bne.n	8004e76 <VL53L0X_StaticInit+0x206>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8004e6e:	7e7a      	ldrb	r2, [r7, #25]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8004e76:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d107      	bne.n	8004e8e <VL53L0X_StaticInit+0x21e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2100      	movs	r1, #0
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f9f0 	bl	8005268 <VL53L0X_SetSequenceStepEnable>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004e8e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d107      	bne.n	8004ea6 <VL53L0X_StaticInit+0x236>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004e96:	2200      	movs	r2, #0
 8004e98:	2102      	movs	r1, #2
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f9e4 	bl	8005268 <VL53L0X_SetSequenceStepEnable>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8004ea6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <VL53L0X_StaticInit+0x246>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2203      	movs	r2, #3
 8004eb2:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004eb6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d109      	bne.n	8004ed2 <VL53L0X_StaticInit+0x262>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004ebe:	f107 0313 	add.w	r3, r7, #19
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f9b6 	bl	8005238 <VL53L0X_GetVcselPulsePeriod>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004ed2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <VL53L0X_StaticInit+0x272>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004eda:	7cfa      	ldrb	r2, [r7, #19]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			PreRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004ee2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d109      	bne.n	8004efe <VL53L0X_StaticInit+0x28e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004eea:	f107 0313 	add.w	r3, r7, #19
 8004eee:	461a      	mov	r2, r3
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f9a0 	bl	8005238 <VL53L0X_GetVcselPulsePeriod>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004efe:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d103      	bne.n	8004f0e <VL53L0X_StaticInit+0x29e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004f06:	7cfa      	ldrb	r2, [r7, #19]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
			FinalRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004f0e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d109      	bne.n	8004f2a <VL53L0X_StaticInit+0x2ba>
		Status = get_sequence_step_timeout(
 8004f16:	f107 030c 	add.w	r3, r7, #12
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	2103      	movs	r1, #3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f002 ff74 	bl	8007e0c <get_sequence_step_timeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004f2a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d103      	bne.n	8004f3a <VL53L0X_StaticInit+0x2ca>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004f3a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d109      	bne.n	8004f56 <VL53L0X_StaticInit+0x2e6>
		Status = get_sequence_step_timeout(
 8004f42:	f107 030c 	add.w	r3, r7, #12
 8004f46:	461a      	mov	r2, r3
 8004f48:	2104      	movs	r1, #4
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f002 ff5e 	bl	8007e0c <get_sequence_step_timeout>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004f56:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d103      	bne.n	8004f66 <VL53L0X_StaticInit+0x2f6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004f66:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	37a8      	adds	r7, #168	; 0xa8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000028 	.word	0x20000028

08004f78 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8004f80:	239d      	movs	r3, #157	; 0x9d
 8004f82:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8004f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f8d6 	bl	8005158 <VL53L0X_GetDeviceMode>
 8004fac:	4603      	mov	r3, r0
 8004fae:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d107      	bne.n	8004fc8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	3308      	adds	r3, #8
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fa9c 	bl	80054fc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8004fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d102      	bne.n	8004fd6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8004fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d107      	bne.n	8004fee <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	3310      	adds	r3, #16
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fad2 	bl	800558e <VL53L0X_GetXTalkCompensationRateMegaCps>
 8004fea:	4603      	mov	r3, r0
 8004fec:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8004fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d107      	bne.n	8005006 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	3314      	adds	r3, #20
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff fc9e 	bl	800493e <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8005002:	4603      	mov	r3, r0
 8005004:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8005006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d134      	bne.n	8005078 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	e02a      	b.n	800506a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d12a      	bne.n	8005072 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	b299      	uxth	r1, r3
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	3308      	adds	r3, #8
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	4413      	add	r3, r2
 800502a:	3304      	adds	r3, #4
 800502c:	461a      	mov	r2, r3
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fbf2 	bl	8005818 <VL53L0X_GetLimitCheckValue>
 8005034:	4603      	mov	r3, r0
 8005036:	461a      	mov	r2, r3
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	4313      	orrs	r3, r2
 800503c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800503e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d117      	bne.n	8005076 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	b299      	uxth	r1, r3
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	3318      	adds	r3, #24
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	4413      	add	r3, r2
 8005052:	461a      	mov	r2, r3
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fb59 	bl	800570c <VL53L0X_GetLimitCheckEnable>
 800505a:	4603      	mov	r3, r0
 800505c:	461a      	mov	r2, r3
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	4313      	orrs	r3, r2
 8005062:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	3301      	adds	r3, #1
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b05      	cmp	r3, #5
 800506e:	ddd1      	ble.n	8005014 <VL53L0X_GetDeviceParameters+0x80>
 8005070:	e002      	b.n	8005078 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005072:	bf00      	nop
 8005074:	e000      	b.n	8005078 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8005076:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d107      	bne.n	8005090 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	3374      	adds	r3, #116	; 0x74
 8005084:	4619      	mov	r1, r3
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fc54 	bl	8005934 <VL53L0X_GetWrapAroundCheckEnable>
 800508c:	4603      	mov	r3, r0
 800508e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8005090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d107      	bne.n	80050a8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	3304      	adds	r3, #4
 800509c:	4619      	mov	r1, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f89f 	bl	80051e2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80050a4:	4603      	mov	r3, r0
 80050a6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80050a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d120      	bne.n	80050f2 <VL53L0X_GetDeviceParameters+0x15e>
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 80050b0:	2300      	movs	r3, #0
 80050b2:	60bb      	str	r3, [r7, #8]
 80050b4:	e01a      	b.n	80050ec <VL53L0X_GetDeviceParameters+0x158>
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
			   Dev->Data.CurrentParameters.dmax_lut.ambRate_mcps[i];
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	3310      	adds	r3, #16
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	685a      	ldr	r2, [r3, #4]
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	330e      	adds	r3, #14
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	605a      	str	r2, [r3, #4]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
			   Dev->Data.CurrentParameters.dmax_lut.dmax_mm[i];
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	3316      	adds	r3, #22
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	689a      	ldr	r2, [r3, #8]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
 80050da:	6839      	ldr	r1, [r7, #0]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	3314      	adds	r3, #20
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	609a      	str	r2, [r3, #8]
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	3301      	adds	r3, #1
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b06      	cmp	r3, #6
 80050f0:	dde1      	ble.n	80050b6 <VL53L0X_GetDeviceParameters+0x122>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80050f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
				    VL53L0X_DeviceModes DeviceMode)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800510c:	2300      	movs	r3, #0
 800510e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	2b15      	cmp	r3, #21
 8005114:	bf8c      	ite	hi
 8005116:	2201      	movhi	r2, #1
 8005118:	2200      	movls	r2, #0
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	2a00      	cmp	r2, #0
 800511e:	d10f      	bne.n	8005140 <VL53L0X_SetDeviceMode+0x40>
 8005120:	4a0c      	ldr	r2, [pc, #48]	; (8005154 <VL53L0X_SetDeviceMode+0x54>)
 8005122:	fa22 f303 	lsr.w	r3, r2, r3
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	bf14      	ite	ne
 800512e:	2301      	movne	r3, #1
 8005130:	2300      	moveq	r3, #0
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	78fa      	ldrb	r2, [r7, #3]
 800513c:	721a      	strb	r2, [r3, #8]
		break;
 800513e:	e001      	b.n	8005144 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005140:	23f8      	movs	r3, #248	; 0xf8
 8005142:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005144:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	0030000b 	.word	0x0030000b

08005158 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	7a1a      	ldrb	r2, [r3, #8]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800516e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005188:	2300      	movs	r3, #0
 800518a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	2109      	movs	r1, #9
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f004 fba5 	bl	80098e0 <VL53L0X_RdByte>
 8005196:	4603      	mov	r3, r0
 8005198:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800519a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80051b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80051ca:	6839      	ldr	r1, [r7, #0]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f003 faae 	bl	800872e <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80051d2:	4603      	mov	r3, r0
 80051d4:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80051d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051ec:	2300      	movs	r3, #0
 80051ee:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80051f0:	6839      	ldr	r1, [r7, #0]
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f003 fb6e 	bl	80088d4 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80051f8:	4603      	mov	r3, r0
 80051fa:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80051fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	70fb      	strb	r3, [r7, #3]
 8005214:	4613      	mov	r3, r2
 8005216:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005218:	2300      	movs	r3, #0
 800521a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800521c:	78ba      	ldrb	r2, [r7, #2]
 800521e:	78fb      	ldrb	r3, [r7, #3]
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f002 ffc5 	bl	80081b2 <VL53L0X_set_vcsel_pulse_period>
 8005228:	4603      	mov	r3, r0
 800522a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800522c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	460b      	mov	r3, r1
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005246:	2300      	movs	r3, #0
 8005248:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800524a:	7afb      	ldrb	r3, [r7, #11]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	4619      	mov	r1, r3
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f003 fa35 	bl	80086c0 <VL53L0X_get_vcsel_pulse_period>
 8005256:	4603      	mov	r3, r0
 8005258:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800525a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	460b      	mov	r3, r1
 8005272:	70fb      	strb	r3, [r7, #3]
 8005274:	4613      	mov	r3, r2
 8005276:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005278:	2300      	movs	r3, #0
 800527a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8005280:	2300      	movs	r3, #0
 8005282:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005284:	f107 030f 	add.w	r3, r7, #15
 8005288:	461a      	mov	r2, r3
 800528a:	2101      	movs	r1, #1
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f004 fb27 	bl	80098e0 <VL53L0X_RdByte>
 8005292:	4603      	mov	r3, r0
 8005294:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8005296:	7bfb      	ldrb	r3, [r7, #15]
 8005298:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800529a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d159      	bne.n	8005356 <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 80052a2:	78bb      	ldrb	r3, [r7, #2]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d12b      	bne.n	8005300 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d825      	bhi.n	80052fa <VL53L0X_SetSequenceStepEnable+0x92>
 80052ae:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80052b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b4:	080052c9 	.word	0x080052c9
 80052b8:	080052d3 	.word	0x080052d3
 80052bc:	080052dd 	.word	0x080052dd
 80052c0:	080052e7 	.word	0x080052e7
 80052c4:	080052f1 	.word	0x080052f1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80052c8:	7dbb      	ldrb	r3, [r7, #22]
 80052ca:	f043 0310 	orr.w	r3, r3, #16
 80052ce:	75bb      	strb	r3, [r7, #22]
				break;
 80052d0:	e041      	b.n	8005356 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80052d2:	7dbb      	ldrb	r3, [r7, #22]
 80052d4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80052d8:	75bb      	strb	r3, [r7, #22]
				break;
 80052da:	e03c      	b.n	8005356 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80052dc:	7dbb      	ldrb	r3, [r7, #22]
 80052de:	f043 0304 	orr.w	r3, r3, #4
 80052e2:	75bb      	strb	r3, [r7, #22]
				break;
 80052e4:	e037      	b.n	8005356 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80052e6:	7dbb      	ldrb	r3, [r7, #22]
 80052e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ec:	75bb      	strb	r3, [r7, #22]
				break;
 80052ee:	e032      	b.n	8005356 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80052f0:	7dbb      	ldrb	r3, [r7, #22]
 80052f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052f6:	75bb      	strb	r3, [r7, #22]
				break;
 80052f8:	e02d      	b.n	8005356 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80052fa:	23fc      	movs	r3, #252	; 0xfc
 80052fc:	75fb      	strb	r3, [r7, #23]
 80052fe:	e02a      	b.n	8005356 <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	2b04      	cmp	r3, #4
 8005304:	d825      	bhi.n	8005352 <VL53L0X_SetSequenceStepEnable+0xea>
 8005306:	a201      	add	r2, pc, #4	; (adr r2, 800530c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8005308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530c:	08005321 	.word	0x08005321
 8005310:	0800532b 	.word	0x0800532b
 8005314:	08005335 	.word	0x08005335
 8005318:	0800533f 	.word	0x0800533f
 800531c:	08005349 	.word	0x08005349
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8005320:	7dbb      	ldrb	r3, [r7, #22]
 8005322:	f023 0310 	bic.w	r3, r3, #16
 8005326:	75bb      	strb	r3, [r7, #22]
				break;
 8005328:	e015      	b.n	8005356 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800532a:	7dbb      	ldrb	r3, [r7, #22]
 800532c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005330:	75bb      	strb	r3, [r7, #22]
				break;
 8005332:	e010      	b.n	8005356 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8005334:	7dbb      	ldrb	r3, [r7, #22]
 8005336:	f023 0304 	bic.w	r3, r3, #4
 800533a:	75bb      	strb	r3, [r7, #22]
				break;
 800533c:	e00b      	b.n	8005356 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800533e:	7dbb      	ldrb	r3, [r7, #22]
 8005340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005344:	75bb      	strb	r3, [r7, #22]
				break;
 8005346:	e006      	b.n	8005356 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8005348:	7dbb      	ldrb	r3, [r7, #22]
 800534a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800534e:	75bb      	strb	r3, [r7, #22]
				break;
 8005350:	e001      	b.n	8005356 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005352:	23fc      	movs	r3, #252	; 0xfc
 8005354:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	7dba      	ldrb	r2, [r7, #22]
 800535a:	429a      	cmp	r2, r3
 800535c:	d01e      	beq.n	800539c <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800535e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d107      	bne.n	8005376 <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 8005366:	7dbb      	ldrb	r3, [r7, #22]
 8005368:	461a      	mov	r2, r3
 800536a:	2101      	movs	r1, #1
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f004 fa35 	bl	80097dc <VL53L0X_WrByte>
 8005372:	4603      	mov	r3, r0
 8005374:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8005376:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d103      	bne.n	8005386 <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	7dba      	ldrb	r2, [r7, #22]
 8005382:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8005386:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005394:	6939      	ldr	r1, [r7, #16]
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7ff ff10 	bl	80051bc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800539c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3718      	adds	r7, #24
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	607b      	str	r3, [r7, #4]
 80053b2:	460b      	mov	r3, r1
 80053b4:	72fb      	strb	r3, [r7, #11]
 80053b6:	4613      	mov	r3, r2
 80053b8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053ba:	2300      	movs	r3, #0
 80053bc:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80053c4:	7afb      	ldrb	r3, [r7, #11]
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d836      	bhi.n	8005438 <sequence_step_enabled+0x90>
 80053ca:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <sequence_step_enabled+0x28>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	080053e5 	.word	0x080053e5
 80053d4:	080053f7 	.word	0x080053f7
 80053d8:	08005409 	.word	0x08005409
 80053dc:	0800541b 	.word	0x0800541b
 80053e0:	0800542d 	.word	0x0800542d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80053e4:	7abb      	ldrb	r3, [r7, #10]
 80053e6:	111b      	asrs	r3, r3, #4
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	701a      	strb	r2, [r3, #0]
		break;
 80053f4:	e022      	b.n	800543c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80053f6:	7abb      	ldrb	r3, [r7, #10]
 80053f8:	10db      	asrs	r3, r3, #3
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	b2da      	uxtb	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	701a      	strb	r2, [r3, #0]
		break;
 8005406:	e019      	b.n	800543c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8005408:	7abb      	ldrb	r3, [r7, #10]
 800540a:	109b      	asrs	r3, r3, #2
 800540c:	b2db      	uxtb	r3, r3
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	b2da      	uxtb	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	701a      	strb	r2, [r3, #0]
		break;
 8005418:	e010      	b.n	800543c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800541a:	7abb      	ldrb	r3, [r7, #10]
 800541c:	119b      	asrs	r3, r3, #6
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	b2da      	uxtb	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	701a      	strb	r2, [r3, #0]
		break;
 800542a:	e007      	b.n	800543c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800542c:	7abb      	ldrb	r3, [r7, #10]
 800542e:	09db      	lsrs	r3, r3, #7
 8005430:	b2da      	uxtb	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	701a      	strb	r2, [r3, #0]
		break;
 8005436:	e001      	b.n	800543c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005438:	23fc      	movs	r3, #252	; 0xfc
 800543a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800543c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005440:	4618      	mov	r0, r3
 8005442:	371c      	adds	r7, #28
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005456:	2300      	movs	r3, #0
 8005458:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800545e:	f107 030e 	add.w	r3, r7, #14
 8005462:	461a      	mov	r2, r3
 8005464:	2101      	movs	r1, #1
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f004 fa3a 	bl	80098e0 <VL53L0X_RdByte>
 800546c:	4603      	mov	r3, r0
 800546e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8005470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d107      	bne.n	8005488 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8005478:	7bba      	ldrb	r2, [r7, #14]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2100      	movs	r1, #0
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7ff ff92 	bl	80053a8 <sequence_step_enabled>
 8005484:	4603      	mov	r3, r0
 8005486:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d108      	bne.n	80054a2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8005490:	7bba      	ldrb	r2, [r7, #14]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	3302      	adds	r3, #2
 8005496:	2101      	movs	r1, #1
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff ff85 	bl	80053a8 <sequence_step_enabled>
 800549e:	4603      	mov	r3, r0
 80054a0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80054a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d108      	bne.n	80054bc <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80054aa:	7bba      	ldrb	r2, [r7, #14]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	3301      	adds	r3, #1
 80054b0:	2102      	movs	r1, #2
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7ff ff78 	bl	80053a8 <sequence_step_enabled>
 80054b8:	4603      	mov	r3, r0
 80054ba:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80054bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d108      	bne.n	80054d6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80054c4:	7bba      	ldrb	r2, [r7, #14]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	3303      	adds	r3, #3
 80054ca:	2103      	movs	r1, #3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7ff ff6b 	bl	80053a8 <sequence_step_enabled>
 80054d2:	4603      	mov	r3, r0
 80054d4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80054d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d108      	bne.n	80054f0 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80054de:	7bba      	ldrb	r2, [r7, #14]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	3304      	adds	r3, #4
 80054e4:	2104      	movs	r1, #4
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff ff5e 	bl	80053a8 <sequence_step_enabled>
 80054ec:	4603      	mov	r3, r0
 80054ee:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80054f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005506:	2300      	movs	r3, #0
 8005508:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800550a:	f107 030c 	add.w	r3, r7, #12
 800550e:	461a      	mov	r2, r3
 8005510:	21f8      	movs	r1, #248	; 0xf8
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f004 fa0e 	bl	8009934 <VL53L0X_RdWord>
 8005518:	4603      	mov	r3, r0
 800551a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800551c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d108      	bne.n	8005536 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8005524:	f107 0308 	add.w	r3, r7, #8
 8005528:	461a      	mov	r2, r3
 800552a:	2104      	movs	r1, #4
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f004 fa39 	bl	80099a4 <VL53L0X_RdDWord>
 8005532:	4603      	mov	r3, r0
 8005534:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10c      	bne.n	8005558 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800553e:	89bb      	ldrh	r3, [r7, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	89ba      	ldrh	r2, [r7, #12]
 8005548:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005558:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	7d1b      	ldrb	r3, [r3, #20]
 8005576:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	7bba      	ldrb	r2, [r7, #14]
 800557c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800557e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b086      	sub	sp, #24
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005598:	2300      	movs	r3, #0
 800559a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800559c:	f107 030e 	add.w	r3, r7, #14
 80055a0:	461a      	mov	r2, r3
 80055a2:	2120      	movs	r1, #32
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f004 f9c5 	bl	8009934 <VL53L0X_RdWord>
 80055aa:	4603      	mov	r3, r0
 80055ac:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80055ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d118      	bne.n	80055e8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80055b6:	89fb      	ldrh	r3, [r7, #14]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d109      	bne.n	80055d0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	751a      	strb	r2, [r3, #20]
 80055ce:	e00b      	b.n	80055e8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80055d0:	89fb      	ldrh	r3, [r7, #14]
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	619a      	str	r2, [r3, #24]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	751a      	strb	r2, [r3, #20]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80055e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <VL53L0X_SetLimitCheckEnable>:
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	807b      	strh	r3, [r7, #2]
 8005600:	4613      	mov	r3, r2
 8005602:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005604:	2300      	movs	r3, #0
 8005606:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800560c:	2300      	movs	r3, #0
 800560e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005614:	887b      	ldrh	r3, [r7, #2]
 8005616:	2b05      	cmp	r3, #5
 8005618:	d902      	bls.n	8005620 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800561a:	23fc      	movs	r3, #252	; 0xfc
 800561c:	75fb      	strb	r3, [r7, #23]
 800561e:	e05b      	b.n	80056d8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8005620:	787b      	ldrb	r3, [r7, #1]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8005626:	2300      	movs	r3, #0
 8005628:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800562e:	2301      	movs	r3, #1
 8005630:	73bb      	strb	r3, [r7, #14]
 8005632:	e00a      	b.n	800564a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005634:	887b      	ldrh	r3, [r7, #2]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	330a      	adds	r3, #10
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8005646:	2301      	movs	r3, #1
 8005648:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800564a:	887b      	ldrh	r3, [r7, #2]
 800564c:	2b05      	cmp	r3, #5
 800564e:	d841      	bhi.n	80056d4 <VL53L0X_SetLimitCheckEnable+0xe0>
 8005650:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <VL53L0X_SetLimitCheckEnable+0x64>)
 8005652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005656:	bf00      	nop
 8005658:	08005671 	.word	0x08005671
 800565c:	0800567b 	.word	0x0800567b
 8005660:	08005691 	.word	0x08005691
 8005664:	0800569b 	.word	0x0800569b
 8005668:	080056a5 	.word	0x080056a5
 800566c:	080056bd 	.word	0x080056bd

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	7bfa      	ldrb	r2, [r7, #15]
 8005674:	f883 2020 	strb.w	r2, [r3, #32]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8005678:	e02e      	b.n	80056d8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800567e:	b29b      	uxth	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	2144      	movs	r1, #68	; 0x44
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f004 f8cd 	bl	8009824 <VL53L0X_WrWord>
 800568a:	4603      	mov	r3, r0
 800568c:	75fb      	strb	r3, [r7, #23]

			break;
 800568e:	e023      	b.n	80056d8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	7bfa      	ldrb	r2, [r7, #15]
 8005694:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8005698:	e01e      	b.n	80056d8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	7bfa      	ldrb	r2, [r7, #15]
 800569e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80056a2:	e019      	b.n	80056d8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80056a4:	7bbb      	ldrb	r3, [r7, #14]
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80056aa:	7b7b      	ldrb	r3, [r7, #13]
 80056ac:	22fe      	movs	r2, #254	; 0xfe
 80056ae:	2160      	movs	r1, #96	; 0x60
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f004 f8e1 	bl	8009878 <VL53L0X_UpdateByte>
 80056b6:	4603      	mov	r3, r0
 80056b8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80056ba:	e00d      	b.n	80056d8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80056bc:	7bbb      	ldrb	r3, [r7, #14]
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80056c2:	7b7b      	ldrb	r3, [r7, #13]
 80056c4:	22ef      	movs	r2, #239	; 0xef
 80056c6:	2160      	movs	r1, #96	; 0x60
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f004 f8d5 	bl	8009878 <VL53L0X_UpdateByte>
 80056ce:	4603      	mov	r3, r0
 80056d0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80056d2:	e001      	b.n	80056d8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80056d4:	23fc      	movs	r3, #252	; 0xfc
 80056d6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80056d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10f      	bne.n	8005700 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80056e0:	787b      	ldrb	r3, [r7, #1]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80056e6:	887b      	ldrh	r3, [r7, #2]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	4413      	add	r3, r2
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2020 	strb.w	r2, [r3, #32]
 80056f2:	e005      	b.n	8005700 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80056f4:	887b      	ldrh	r3, [r7, #2]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	4413      	add	r3, r2
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2020 	strb.w	r2, [r3, #32]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005700:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	460b      	mov	r3, r1
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800571a:	2300      	movs	r3, #0
 800571c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800571e:	897b      	ldrh	r3, [r7, #10]
 8005720:	2b05      	cmp	r3, #5
 8005722:	d905      	bls.n	8005730 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005724:	23fc      	movs	r3, #252	; 0xfc
 8005726:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	e008      	b.n	8005742 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005730:	897b      	ldrh	r3, [r7, #10]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4413      	add	r3, r2
 8005736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800573a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	7dba      	ldrb	r2, [r7, #22]
 8005740:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005742:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005746:	4618      	mov	r0, r3
 8005748:	371c      	adds	r7, #28
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
	...

08005754 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	460b      	mov	r3, r1
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005762:	2300      	movs	r3, #0
 8005764:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8005766:	897b      	ldrh	r3, [r7, #10]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4413      	add	r3, r2
 800576c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005770:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005772:	7dbb      	ldrb	r3, [r7, #22]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d107      	bne.n	8005788 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005778:	897b      	ldrh	r3, [r7, #10]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	330a      	adds	r3, #10
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	605a      	str	r2, [r3, #4]
 8005786:	e040      	b.n	800580a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8005788:	897b      	ldrh	r3, [r7, #10]
 800578a:	2b05      	cmp	r3, #5
 800578c:	d830      	bhi.n	80057f0 <VL53L0X_SetLimitCheckValue+0x9c>
 800578e:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <VL53L0X_SetLimitCheckValue+0x40>)
 8005790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005794:	080057ad 	.word	0x080057ad
 8005798:	080057b5 	.word	0x080057b5
 800579c:	080057cb 	.word	0x080057cb
 80057a0:	080057d3 	.word	0x080057d3
 80057a4:	080057db 	.word	0x080057db
 80057a8:	080057db 	.word	0x080057db

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	62da      	str	r2, [r3, #44]	; 0x2c
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80057b2:	e01f      	b.n	80057f4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	2144      	movs	r1, #68	; 0x44
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f004 f830 	bl	8009824 <VL53L0X_WrWord>
 80057c4:	4603      	mov	r3, r0
 80057c6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80057c8:	e014      	b.n	80057f4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80057d0:	e010      	b.n	80057f4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80057d8:	e00c      	b.n	80057f4 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80057de:	b29b      	uxth	r3, r3
 80057e0:	461a      	mov	r2, r3
 80057e2:	2164      	movs	r1, #100	; 0x64
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f004 f81d 	bl	8009824 <VL53L0X_WrWord>
 80057ea:	4603      	mov	r3, r0
 80057ec:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80057ee:	e001      	b.n	80057f4 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80057f0:	23fc      	movs	r3, #252	; 0xfc
 80057f2:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80057f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d106      	bne.n	800580a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80057fc:	897b      	ldrh	r3, [r7, #10]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	330a      	adds	r3, #10
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800580a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop

08005818 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	460b      	mov	r3, r1
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005826:	2300      	movs	r3, #0
 8005828:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800582e:	897b      	ldrh	r3, [r7, #10]
 8005830:	2b05      	cmp	r3, #5
 8005832:	d847      	bhi.n	80058c4 <VL53L0X_GetLimitCheckValue+0xac>
 8005834:	a201      	add	r2, pc, #4	; (adr r2, 800583c <VL53L0X_GetLimitCheckValue+0x24>)
 8005836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583a:	bf00      	nop
 800583c:	08005855 	.word	0x08005855
 8005840:	08005861 	.word	0x08005861
 8005844:	08005887 	.word	0x08005887
 8005848:	08005893 	.word	0x08005893
 800584c:	0800589f 	.word	0x0800589f
 8005850:	0800589f 	.word	0x0800589f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800585a:	2300      	movs	r3, #0
 800585c:	77bb      	strb	r3, [r7, #30]
		break;
 800585e:	e033      	b.n	80058c8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005860:	f107 0316 	add.w	r3, r7, #22
 8005864:	461a      	mov	r2, r3
 8005866:	2144      	movs	r1, #68	; 0x44
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f004 f863 	bl	8009934 <VL53L0X_RdWord>
 800586e:	4603      	mov	r3, r0
 8005870:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005872:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d102      	bne.n	8005880 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800587a:	8afb      	ldrh	r3, [r7, #22]
 800587c:	025b      	lsls	r3, r3, #9
 800587e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8005880:	2301      	movs	r3, #1
 8005882:	77bb      	strb	r3, [r7, #30]
		break;
 8005884:	e020      	b.n	80058c8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800588c:	2300      	movs	r3, #0
 800588e:	77bb      	strb	r3, [r7, #30]
		break;
 8005890:	e01a      	b.n	80058c8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
			TempFix1616);
		EnableZeroValue = 0;
 8005898:	2300      	movs	r3, #0
 800589a:	77bb      	strb	r3, [r7, #30]
		break;
 800589c:	e014      	b.n	80058c8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800589e:	f107 0316 	add.w	r3, r7, #22
 80058a2:	461a      	mov	r2, r3
 80058a4:	2164      	movs	r1, #100	; 0x64
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f004 f844 	bl	8009934 <VL53L0X_RdWord>
 80058ac:	4603      	mov	r3, r0
 80058ae:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80058b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d102      	bne.n	80058be <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80058b8:	8afb      	ldrh	r3, [r7, #22]
 80058ba:	025b      	lsls	r3, r3, #9
 80058bc:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	77bb      	strb	r3, [r7, #30]
		break;
 80058c2:	e001      	b.n	80058c8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80058c4:	23fc      	movs	r3, #252	; 0xfc
 80058c6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80058c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d12a      	bne.n	8005926 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80058d0:	7fbb      	ldrb	r3, [r7, #30]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d124      	bne.n	8005920 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d110      	bne.n	80058fe <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80058dc:	897b      	ldrh	r3, [r7, #10]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	330a      	adds	r3, #10
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80058f0:	897b      	ldrh	r3, [r7, #10]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4413      	add	r3, r2
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2020 	strb.w	r2, [r3, #32]
 80058fc:	e013      	b.n	8005926 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005904:	897b      	ldrh	r3, [r7, #10]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	330a      	adds	r3, #10
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005912:	897b      	ldrh	r3, [r7, #10]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2020 	strb.w	r2, [r3, #32]
 800591e:	e002      	b.n	8005926 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005926:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800592a:	4618      	mov	r0, r3
 800592c:	3720      	adds	r7, #32
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop

08005934 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800593e:	2300      	movs	r3, #0
 8005940:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8005942:	f107 030e 	add.w	r3, r7, #14
 8005946:	461a      	mov	r2, r3
 8005948:	2101      	movs	r1, #1
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f003 ffc8 	bl	80098e0 <VL53L0X_RdByte>
 8005950:	4603      	mov	r3, r0
 8005952:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8005954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10e      	bne.n	800597a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800595c:	7bba      	ldrb	r2, [r7, #14]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		if (data & (0x01 << 7))
 8005964:	7bbb      	ldrb	r3, [r7, #14]
 8005966:	b25b      	sxtb	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	da03      	bge.n	8005974 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2201      	movs	r2, #1
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	e002      	b.n	800597a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800597a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d104      	bne.n	800598c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781a      	ldrb	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800598c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059a0:	2300      	movs	r3, #0
 80059a2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80059a4:	f107 030e 	add.w	r3, r7, #14
 80059a8:	4619      	mov	r1, r3
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff fbd4 	bl	8005158 <VL53L0X_GetDeviceMode>
 80059b0:	4603      	mov	r3, r0
 80059b2:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram
	 */
	if (Status == VL53L0X_ERROR_NONE
 80059b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d107      	bne.n	80059cc <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80059bc:	7bbb      	ldrb	r3, [r7, #14]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d104      	bne.n	80059cc <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f924 	bl	8005c10 <VL53L0X_StartMeasurement>
 80059c8:	4603      	mov	r3, r0
 80059ca:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80059cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d104      	bne.n	80059de <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f001 fbc9 	bl	800716c <VL53L0X_measurement_poll_for_completion>
 80059da:	4603      	mov	r3, r0
 80059dc:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80059de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80059e6:	7bbb      	ldrb	r3, [r7, #14]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d103      	bne.n	80059f4 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2203      	movs	r2, #3
 80059f0:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 80059f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <VL53L0X_PerformRefCalibration>:
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005a10:	2301      	movs	r3, #1
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f001 fb6b 	bl	80070f2 <VL53L0X_perform_ref_calibration>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8005a20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8005a42:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	switch (InterruptConfig) {
 8005a44:	7dbb      	ldrb	r3, [r7, #22]
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	f000 8093 	beq.w	8005b72 <VL53L0X_CheckAndLoadInterruptSettings+0x146>
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	f300 80d6 	bgt.w	8005bfe <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d002      	beq.n	8005a5c <VL53L0X_CheckAndLoadInterruptSettings+0x30>
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d047      	beq.n	8005aea <VL53L0X_CheckAndLoadInterruptSettings+0xbe>
 8005a5a:	e0d0      	b.n	8005bfe <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005a5c:	f107 030c 	add.w	r3, r7, #12
 8005a60:	f107 0210 	add.w	r2, r7, #16
 8005a64:	2101      	movs	r1, #1
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fc4a 	bl	8006300 <VL53L0X_GetInterruptThresholds>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdLow > 255*65536) &&
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005a76:	f240 80bd 	bls.w	8005bf4 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
 8005a7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f040 80b8 	bne.w	8005bf4 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d006      	beq.n	8005a98 <VL53L0X_CheckAndLoadInterruptSettings+0x6c>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005a8a:	4960      	ldr	r1, [pc, #384]	; (8005c0c <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f002 ffd3 	bl	8008a38 <VL53L0X_load_tuning_settings>
 8005a92:	4603      	mov	r3, r0
 8005a94:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8005a96:	e0ad      	b.n	8005bf4 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005a98:	2204      	movs	r2, #4
 8005a9a:	21ff      	movs	r1, #255	; 0xff
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f003 fe9d 	bl	80097dc <VL53L0X_WrByte>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005aac:	2200      	movs	r2, #0
 8005aae:	2170      	movs	r1, #112	; 0x70
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f003 fe93 	bl	80097dc <VL53L0X_WrByte>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	461a      	mov	r2, r3
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	21ff      	movs	r1, #255	; 0xff
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f003 fe89 	bl	80097dc <VL53L0X_WrByte>
 8005aca:	4603      	mov	r3, r0
 8005acc:	461a      	mov	r2, r3
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	2180      	movs	r1, #128	; 0x80
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f003 fe7f 	bl	80097dc <VL53L0X_WrByte>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	75fb      	strb	r3, [r7, #23]
		break;
 8005ae8:	e084      	b.n	8005bf4 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005aea:	f107 030c 	add.w	r3, r7, #12
 8005aee:	f107 0210 	add.w	r2, r7, #16
 8005af2:	2101      	movs	r1, #1
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fc03 	bl	8006300 <VL53L0X_GetInterruptThresholds>
 8005afa:	4603      	mov	r3, r0
 8005afc:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdHigh > 0) &&
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d079      	beq.n	8005bf8 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
 8005b04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d175      	bne.n	8005bf8 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005b0c:	78fb      	ldrb	r3, [r7, #3]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d006      	beq.n	8005b20 <VL53L0X_CheckAndLoadInterruptSettings+0xf4>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005b12:	493e      	ldr	r1, [pc, #248]	; (8005c0c <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f002 ff8f 	bl	8008a38 <VL53L0X_load_tuning_settings>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8005b1e:	e06b      	b.n	8005bf8 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005b20:	2204      	movs	r2, #4
 8005b22:	21ff      	movs	r1, #255	; 0xff
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f003 fe59 	bl	80097dc <VL53L0X_WrByte>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	7dfb      	ldrb	r3, [r7, #23]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005b34:	2200      	movs	r2, #0
 8005b36:	2170      	movs	r1, #112	; 0x70
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f003 fe4f 	bl	80097dc <VL53L0X_WrByte>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	461a      	mov	r2, r3
 8005b42:	7dfb      	ldrb	r3, [r7, #23]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b48:	2200      	movs	r2, #0
 8005b4a:	21ff      	movs	r1, #255	; 0xff
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f003 fe45 	bl	80097dc <VL53L0X_WrByte>
 8005b52:	4603      	mov	r3, r0
 8005b54:	461a      	mov	r2, r3
 8005b56:	7dfb      	ldrb	r3, [r7, #23]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2180      	movs	r1, #128	; 0x80
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f003 fe3b 	bl	80097dc <VL53L0X_WrByte>
 8005b66:	4603      	mov	r3, r0
 8005b68:	461a      	mov	r2, r3
 8005b6a:	7dfb      	ldrb	r3, [r7, #23]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	75fb      	strb	r3, [r7, #23]
		break;
 8005b70:	e042      	b.n	8005bf8 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005b72:	f107 030c 	add.w	r3, r7, #12
 8005b76:	f107 0210 	add.w	r2, r7, #16
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fbbf 	bl	8006300 <VL53L0X_GetInterruptThresholds>
 8005b82:	4603      	mov	r3, r0
 8005b84:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if (Status == VL53L0X_ERROR_NONE) {
 8005b86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d136      	bne.n	8005bfc <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
			if (StartNotStopFlag != 0) {
 8005b8e:	78fb      	ldrb	r3, [r7, #3]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d006      	beq.n	8005ba2 <VL53L0X_CheckAndLoadInterruptSettings+0x176>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005b94:	491d      	ldr	r1, [pc, #116]	; (8005c0c <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f002 ff4e 	bl	8008a38 <VL53L0X_load_tuning_settings>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8005ba0:	e02c      	b.n	8005bfc <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	21ff      	movs	r1, #255	; 0xff
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f003 fe18 	bl	80097dc <VL53L0X_WrByte>
 8005bac:	4603      	mov	r3, r0
 8005bae:	461a      	mov	r2, r3
 8005bb0:	7dfb      	ldrb	r3, [r7, #23]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	2170      	movs	r1, #112	; 0x70
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f003 fe0e 	bl	80097dc <VL53L0X_WrByte>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005bca:	2200      	movs	r2, #0
 8005bcc:	21ff      	movs	r1, #255	; 0xff
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f003 fe04 	bl	80097dc <VL53L0X_WrByte>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005bde:	2200      	movs	r2, #0
 8005be0:	2180      	movs	r1, #128	; 0x80
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f003 fdfa 	bl	80097dc <VL53L0X_WrByte>
 8005be8:	4603      	mov	r3, r0
 8005bea:	461a      	mov	r2, r3
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	75fb      	strb	r3, [r7, #23]
		break;
 8005bf2:	e003      	b.n	8005bfc <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
		break;
 8005bf4:	bf00      	nop
 8005bf6:	e002      	b.n	8005bfe <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 8005bf8:	bf00      	nop
 8005bfa:	e000      	b.n	8005bfe <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 8005bfc:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	2000011c 	.word	0x2000011c

08005c10 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005c20:	f107 030e 	add.w	r3, r7, #14
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7ff fa96 	bl	8005158 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	2180      	movs	r1, #128	; 0x80
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f003 fdd3 	bl	80097dc <VL53L0X_WrByte>
 8005c36:	4603      	mov	r3, r0
 8005c38:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	21ff      	movs	r1, #255	; 0xff
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f003 fdcc 	bl	80097dc <VL53L0X_WrByte>
 8005c44:	4603      	mov	r3, r0
 8005c46:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f003 fdc5 	bl	80097dc <VL53L0X_WrByte>
 8005c52:	4603      	mov	r3, r0
 8005c54:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	2191      	movs	r1, #145	; 0x91
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f003 fdbb 	bl	80097dc <VL53L0X_WrByte>
 8005c66:	4603      	mov	r3, r0
 8005c68:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f003 fdb4 	bl	80097dc <VL53L0X_WrByte>
 8005c74:	4603      	mov	r3, r0
 8005c76:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005c78:	2200      	movs	r2, #0
 8005c7a:	21ff      	movs	r1, #255	; 0xff
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f003 fdad 	bl	80097dc <VL53L0X_WrByte>
 8005c82:	4603      	mov	r3, r0
 8005c84:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005c86:	2200      	movs	r2, #0
 8005c88:	2180      	movs	r1, #128	; 0x80
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f003 fda6 	bl	80097dc <VL53L0X_WrByte>
 8005c90:	4603      	mov	r3, r0
 8005c92:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005c94:	7bbb      	ldrb	r3, [r7, #14]
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d054      	beq.n	8005d44 <VL53L0X_StartMeasurement+0x134>
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	dc6c      	bgt.n	8005d78 <VL53L0X_StartMeasurement+0x168>
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <VL53L0X_StartMeasurement+0x98>
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d034      	beq.n	8005d10 <VL53L0X_StartMeasurement+0x100>
 8005ca6:	e067      	b.n	8005d78 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005ca8:	2201      	movs	r2, #1
 8005caa:	2100      	movs	r1, #0
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f003 fd95 	bl	80097dc <VL53L0X_WrByte>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
 8005cb8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8005cba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d15d      	bne.n	8005d7e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8005ccc:	f107 030d 	add.w	r3, r7, #13
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f003 fe03 	bl	80098e0 <VL53L0X_RdByte>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005ce4:	7b7a      	ldrb	r2, [r7, #13]
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005cec:	7bfa      	ldrb	r2, [r7, #15]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d107      	bne.n	8005d02 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8005cf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d103      	bne.n	8005d02 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005d00:	d3e1      	bcc.n	8005cc6 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005d08:	d339      	bcc.n	8005d7e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005d0a:	23f9      	movs	r3, #249	; 0xf9
 8005d0c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8005d0e:	e036      	b.n	8005d7e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005d10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d105      	bne.n	8005d24 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005d18:	2101      	movs	r1, #1
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff fe86 	bl	8005a2c <VL53L0X_CheckAndLoadInterruptSettings>
 8005d20:	4603      	mov	r3, r0
 8005d22:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005d24:	2202      	movs	r2, #2
 8005d26:	2100      	movs	r1, #0
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f003 fd57 	bl	80097dc <VL53L0X_WrByte>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8005d32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d123      	bne.n	8005d82 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2204      	movs	r2, #4
 8005d3e:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 8005d42:	e01e      	b.n	8005d82 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005d44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d105      	bne.n	8005d58 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7ff fe6c 	bl	8005a2c <VL53L0X_CheckAndLoadInterruptSettings>
 8005d54:	4603      	mov	r3, r0
 8005d56:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005d58:	2204      	movs	r2, #4
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f003 fd3d 	bl	80097dc <VL53L0X_WrByte>
 8005d62:	4603      	mov	r3, r0
 8005d64:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10b      	bne.n	8005d86 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2204      	movs	r2, #4
 8005d72:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 8005d76:	e006      	b.n	8005d86 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005d78:	23f8      	movs	r3, #248	; 0xf8
 8005d7a:	75fb      	strb	r3, [r7, #23]
 8005d7c:	e004      	b.n	8005d88 <VL53L0X_StartMeasurement+0x178>
		break;
 8005d7e:	bf00      	nop
 8005d80:	e002      	b.n	8005d88 <VL53L0X_StartMeasurement+0x178>
		break;
 8005d82:	bf00      	nop
 8005d84:	e000      	b.n	8005d88 <VL53L0X_StartMeasurement+0x178>
		break;
 8005d86:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005d88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73fb      	strb	r3, [r7, #15]
	uint8_t InterruptConfig;
	uint32_t InterruptMask;

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8005da8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8005daa:	7bbb      	ldrb	r3, [r7, #14]
 8005dac:	2b04      	cmp	r3, #4
 8005dae:	d112      	bne.n	8005dd6 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005db0:	f107 0308 	add.w	r3, r7, #8
 8005db4:	4619      	mov	r1, r3
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fb18 	bl	80063ec <VL53L0X_GetInterruptMaskStatus>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d103      	bne.n	8005dce <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	e01c      	b.n	8005e08 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	701a      	strb	r2, [r3, #0]
 8005dd4:	e018      	b.n	8005e08 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005dd6:	f107 030d 	add.w	r3, r7, #13
 8005dda:	461a      	mov	r2, r3
 8005ddc:	2114      	movs	r1, #20
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f003 fd7e 	bl	80098e0 <VL53L0X_RdByte>
 8005de4:	4603      	mov	r3, r0
 8005de6:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8005de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10b      	bne.n	8005e08 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8005df0:	7b7b      	ldrb	r3, [r7, #13]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	701a      	strb	r2, [r3, #0]
 8005e00:	e002      	b.n	8005e08 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2200      	movs	r2, #0
 8005e06:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005e14:	b5b0      	push	{r4, r5, r7, lr}
 8005e16:	b096      	sub	sp, #88	; 0x58
 8005e18:	af02      	add	r7, sp, #8
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005e24:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e28:	230c      	movs	r3, #12
 8005e2a:	2114      	movs	r1, #20
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f003 fca9 	bl	8009784 <VL53L0X_ReadMulti>
 8005e32:	4603      	mov	r3, r0
 8005e34:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005e38:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f040 80d1 	bne.w	8005fe4 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2200      	movs	r2, #0
 8005e46:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11],
 8005e4e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	021b      	lsls	r3, r3, #8
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	4413      	add	r3, r2
 8005e60:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
					       localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2200      	movs	r2, #0
 8005e68:	605a      	str	r2, [r3, #4]


		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005e6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	021b      	lsls	r3, r3, #8
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	025b      	lsls	r3, r3, #9
 8005e80:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e86:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9],
 8005e88:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	4413      	add	r3, r2
 8005e9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						 localBuffer[8]);
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005e9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ea2:	025b      	lsls	r3, r3, #9
 8005ea4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005eaa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	021b      	lsls	r3, r3, #8
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	4413      	add	r3, r2
 8005ebc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005ec6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8005ec8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ecc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
 8005ed6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 8005ede:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005ee2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005ee4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ee8:	d046      	beq.n	8005f78 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005eea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005eec:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005ef0:	fb02 f303 	mul.w	r3, r2, r3
 8005ef4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005ef8:	4a57      	ldr	r2, [pc, #348]	; (8006058 <VL53L0X_GetRangingMeasurementData+0x244>)
 8005efa:	fb82 1203 	smull	r1, r2, r2, r3
 8005efe:	1192      	asrs	r2, r2, #6
 8005f00:	17db      	asrs	r3, r3, #31
 8005f02:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8005f04:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	7d1b      	ldrb	r3, [r3, #20]
 8005f12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005f16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d02c      	beq.n	8005f78 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8005f1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f20:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005f24:	fb02 f303 	mul.w	r3, r2, r3
 8005f28:	121a      	asrs	r2, r3, #8
					<= 0) {
 8005f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d10d      	bne.n	8005f4c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8005f30:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8005f38:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8005f3c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005f40:	e016      	b.n	8005f70 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8005f42:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8005f46:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005f4a:	e011      	b.n	8005f70 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8005f4c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f52:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005f56:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f58:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005f5c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005f60:	121b      	asrs	r3, r3, #8
 8005f62:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f66:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8005f6c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8005f70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f74:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8005f78:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00d      	beq.n	8005f9c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005f80:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f84:	089b      	lsrs	r3, r3, #2
 8005f86:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005f8c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	019b      	lsls	r3, r3, #6
 8005f94:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	75da      	strb	r2, [r3, #23]
 8005f9a:	e006      	b.n	8005faa <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005fa2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005faa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005fae:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005fb2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f003 f98b 	bl	80092dc <VL53L0X_get_pal_range_status>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	461a      	mov	r2, r3
 8005fca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005fd4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d103      	bne.n	8005fe4 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005fdc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005fe4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d12f      	bne.n	800604c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f107 040c 	add.w	r4, r7, #12
 8005ff2:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8005ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ffa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005ffe:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8006006:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800600c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8006014:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800601a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8006020:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8006026:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800602c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8006032:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800603c:	f107 050c 	add.w	r5, r7, #12
 8006040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006044:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006048:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800604c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8006050:	4618      	mov	r0, r3
 8006052:	3750      	adds	r7, #80	; 0x50
 8006054:	46bd      	mov	sp, r7
 8006056:	bdb0      	pop	{r4, r5, r7, pc}
 8006058:	10624dd3 	.word	0x10624dd3

0800605c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006066:	2300      	movs	r3, #0
 8006068:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode!
	 */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800606a:	2100      	movs	r1, #0
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff f847 	bl	8005100 <VL53L0X_SetDeviceMode>
 8006072:	4603      	mov	r3, r0
 8006074:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d104      	bne.n	8006088 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff fc8a 	bl	8005998 <VL53L0X_PerformSingleMeasurement>
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d105      	bne.n	800609c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff febe 	bl	8005e14 <VL53L0X_GetRangingMeasurementData>
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800609c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d105      	bne.n	80060b0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80060a4:	2100      	movs	r1, #0
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f960 	bl	800636c <VL53L0X_ClearInterruptMask>
 80060ac:	4603      	mov	r3, r0
 80060ae:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80060b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	4608      	mov	r0, r1
 80060c6:	4611      	mov	r1, r2
 80060c8:	461a      	mov	r2, r3
 80060ca:	4603      	mov	r3, r0
 80060cc:	70fb      	strb	r3, [r7, #3]
 80060ce:	460b      	mov	r3, r1
 80060d0:	70bb      	strb	r3, [r7, #2]
 80060d2:	4613      	mov	r3, r2
 80060d4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060d6:	2300      	movs	r3, #0
 80060d8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80060e0:	23f6      	movs	r3, #246	; 0xf6
 80060e2:	73fb      	strb	r3, [r7, #15]
 80060e4:	e105      	b.n	80062f2 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80060e6:	78bb      	ldrb	r3, [r7, #2]
 80060e8:	2b14      	cmp	r3, #20
 80060ea:	d110      	bne.n	800610e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80060ec:	7e3b      	ldrb	r3, [r7, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d102      	bne.n	80060f8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80060f2:	2310      	movs	r3, #16
 80060f4:	73bb      	strb	r3, [r7, #14]
 80060f6:	e001      	b.n	80060fc <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80060f8:	2301      	movs	r3, #1
 80060fa:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80060fc:	7bbb      	ldrb	r3, [r7, #14]
 80060fe:	461a      	mov	r2, r3
 8006100:	2184      	movs	r1, #132	; 0x84
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f003 fb6a 	bl	80097dc <VL53L0X_WrByte>
 8006108:	4603      	mov	r3, r0
 800610a:	73fb      	strb	r3, [r7, #15]
 800610c:	e0f1      	b.n	80062f2 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800610e:	78bb      	ldrb	r3, [r7, #2]
 8006110:	2b15      	cmp	r3, #21
 8006112:	f040 8097 	bne.w	8006244 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006116:	2201      	movs	r2, #1
 8006118:	21ff      	movs	r1, #255	; 0xff
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f003 fb5e 	bl	80097dc <VL53L0X_WrByte>
 8006120:	4603      	mov	r3, r0
 8006122:	461a      	mov	r2, r3
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	4313      	orrs	r3, r2
 8006128:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800612a:	2200      	movs	r2, #0
 800612c:	2100      	movs	r1, #0
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f003 fb54 	bl	80097dc <VL53L0X_WrByte>
 8006134:	4603      	mov	r3, r0
 8006136:	461a      	mov	r2, r3
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	4313      	orrs	r3, r2
 800613c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800613e:	2200      	movs	r2, #0
 8006140:	21ff      	movs	r1, #255	; 0xff
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f003 fb4a 	bl	80097dc <VL53L0X_WrByte>
 8006148:	4603      	mov	r3, r0
 800614a:	461a      	mov	r2, r3
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	4313      	orrs	r3, r2
 8006150:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006152:	2201      	movs	r2, #1
 8006154:	2180      	movs	r1, #128	; 0x80
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f003 fb40 	bl	80097dc <VL53L0X_WrByte>
 800615c:	4603      	mov	r3, r0
 800615e:	461a      	mov	r2, r3
 8006160:	7bfb      	ldrb	r3, [r7, #15]
 8006162:	4313      	orrs	r3, r2
 8006164:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8006166:	2202      	movs	r2, #2
 8006168:	2185      	movs	r1, #133	; 0x85
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f003 fb36 	bl	80097dc <VL53L0X_WrByte>
 8006170:	4603      	mov	r3, r0
 8006172:	461a      	mov	r2, r3
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	4313      	orrs	r3, r2
 8006178:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800617a:	2204      	movs	r2, #4
 800617c:	21ff      	movs	r1, #255	; 0xff
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f003 fb2c 	bl	80097dc <VL53L0X_WrByte>
 8006184:	4603      	mov	r3, r0
 8006186:	461a      	mov	r2, r3
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	4313      	orrs	r3, r2
 800618c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800618e:	2200      	movs	r2, #0
 8006190:	21cd      	movs	r1, #205	; 0xcd
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f003 fb22 	bl	80097dc <VL53L0X_WrByte>
 8006198:	4603      	mov	r3, r0
 800619a:	461a      	mov	r2, r3
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	4313      	orrs	r3, r2
 80061a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80061a2:	2211      	movs	r2, #17
 80061a4:	21cc      	movs	r1, #204	; 0xcc
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f003 fb18 	bl	80097dc <VL53L0X_WrByte>
 80061ac:	4603      	mov	r3, r0
 80061ae:	461a      	mov	r2, r3
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80061b6:	2207      	movs	r2, #7
 80061b8:	21ff      	movs	r1, #255	; 0xff
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f003 fb0e 	bl	80097dc <VL53L0X_WrByte>
 80061c0:	4603      	mov	r3, r0
 80061c2:	461a      	mov	r2, r3
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80061ca:	2200      	movs	r2, #0
 80061cc:	21be      	movs	r1, #190	; 0xbe
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f003 fb04 	bl	80097dc <VL53L0X_WrByte>
 80061d4:	4603      	mov	r3, r0
 80061d6:	461a      	mov	r2, r3
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
 80061da:	4313      	orrs	r3, r2
 80061dc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80061de:	2206      	movs	r2, #6
 80061e0:	21ff      	movs	r1, #255	; 0xff
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f003 fafa 	bl	80097dc <VL53L0X_WrByte>
 80061e8:	4603      	mov	r3, r0
 80061ea:	461a      	mov	r2, r3
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80061f2:	2209      	movs	r2, #9
 80061f4:	21cc      	movs	r1, #204	; 0xcc
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f003 faf0 	bl	80097dc <VL53L0X_WrByte>
 80061fc:	4603      	mov	r3, r0
 80061fe:	461a      	mov	r2, r3
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	4313      	orrs	r3, r2
 8006204:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006206:	2200      	movs	r2, #0
 8006208:	21ff      	movs	r1, #255	; 0xff
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f003 fae6 	bl	80097dc <VL53L0X_WrByte>
 8006210:	4603      	mov	r3, r0
 8006212:	461a      	mov	r2, r3
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	4313      	orrs	r3, r2
 8006218:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800621a:	2201      	movs	r2, #1
 800621c:	21ff      	movs	r1, #255	; 0xff
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f003 fadc 	bl	80097dc <VL53L0X_WrByte>
 8006224:	4603      	mov	r3, r0
 8006226:	461a      	mov	r2, r3
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	4313      	orrs	r3, r2
 800622c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800622e:	2200      	movs	r2, #0
 8006230:	2100      	movs	r1, #0
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f003 fad2 	bl	80097dc <VL53L0X_WrByte>
 8006238:	4603      	mov	r3, r0
 800623a:	461a      	mov	r2, r3
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	4313      	orrs	r3, r2
 8006240:	73fb      	strb	r3, [r7, #15]
 8006242:	e056      	b.n	80062f2 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8006244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d120      	bne.n	800628e <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 800624c:	787b      	ldrb	r3, [r7, #1]
 800624e:	2b04      	cmp	r3, #4
 8006250:	d81b      	bhi.n	800628a <VL53L0X_SetGpioConfig+0x1ce>
 8006252:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <VL53L0X_SetGpioConfig+0x19c>)
 8006254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006258:	0800626d 	.word	0x0800626d
 800625c:	08006273 	.word	0x08006273
 8006260:	08006279 	.word	0x08006279
 8006264:	0800627f 	.word	0x0800627f
 8006268:	08006285 	.word	0x08006285
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800626c:	2300      	movs	r3, #0
 800626e:	73bb      	strb	r3, [r7, #14]
				break;
 8006270:	e00d      	b.n	800628e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8006272:	2301      	movs	r3, #1
 8006274:	73bb      	strb	r3, [r7, #14]
				break;
 8006276:	e00a      	b.n	800628e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8006278:	2302      	movs	r3, #2
 800627a:	73bb      	strb	r3, [r7, #14]
				break;
 800627c:	e007      	b.n	800628e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800627e:	2303      	movs	r3, #3
 8006280:	73bb      	strb	r3, [r7, #14]
				break;
 8006282:	e004      	b.n	800628e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8006284:	2304      	movs	r3, #4
 8006286:	73bb      	strb	r3, [r7, #14]
				break;
 8006288:	e001      	b.n	800628e <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 800628a:	23f5      	movs	r3, #245	; 0xf5
 800628c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 800628e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d107      	bne.n	80062a6 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8006296:	7bbb      	ldrb	r3, [r7, #14]
 8006298:	461a      	mov	r2, r3
 800629a:	210a      	movs	r1, #10
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f003 fa9d 	bl	80097dc <VL53L0X_WrByte>
 80062a2:	4603      	mov	r3, r0
 80062a4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80062a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10f      	bne.n	80062ce <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80062ae:	7e3b      	ldrb	r3, [r7, #24]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d102      	bne.n	80062ba <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	73bb      	strb	r3, [r7, #14]
 80062b8:	e001      	b.n	80062be <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 80062ba:	2310      	movs	r3, #16
 80062bc:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80062be:	7bbb      	ldrb	r3, [r7, #14]
 80062c0:	22ef      	movs	r2, #239	; 0xef
 80062c2:	2184      	movs	r1, #132	; 0x84
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f003 fad7 	bl	8009878 <VL53L0X_UpdateByte>
 80062ca:	4603      	mov	r3, r0
 80062cc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80062ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d103      	bne.n	80062de <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	787a      	ldrb	r2, [r7, #1]
 80062da:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80062de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d105      	bne.n	80062f2 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80062e6:	2100      	movs	r1, #0
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f83f 	bl	800636c <VL53L0X_ClearInterruptMask>
 80062ee:	4603      	mov	r3, r0
 80062f0:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80062f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop

08006300 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	607a      	str	r2, [r7, #4]
 800630a:	603b      	str	r3, [r7, #0]
 800630c:	460b      	mov	r3, r1
 800630e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006310:	2300      	movs	r3, #0
 8006312:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW,
 8006314:	f107 0314 	add.w	r3, r7, #20
 8006318:	461a      	mov	r2, r3
 800631a:	210e      	movs	r1, #14
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f003 fb09 	bl	8009934 <VL53L0X_RdWord>
 8006322:	4603      	mov	r3, r0
 8006324:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006326:	8abb      	ldrh	r3, [r7, #20]
 8006328:	045b      	lsls	r3, r3, #17
 800632a:	461a      	mov	r2, r3
 800632c:	4b0e      	ldr	r3, [pc, #56]	; (8006368 <VL53L0X_GetInterruptThresholds+0x68>)
 800632e:	4013      	ands	r3, r2
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8006334:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10f      	bne.n	800635c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800633c:	f107 0314 	add.w	r3, r7, #20
 8006340:	461a      	mov	r2, r3
 8006342:	210c      	movs	r1, #12
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f003 faf5 	bl	8009934 <VL53L0X_RdWord>
 800634a:	4603      	mov	r3, r0
 800634c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800634e:	8abb      	ldrh	r3, [r7, #20]
 8006350:	045b      	lsls	r3, r3, #17
 8006352:	461a      	mov	r2, r3
 8006354:	4b04      	ldr	r3, [pc, #16]	; (8006368 <VL53L0X_GetInterruptThresholds+0x68>)
 8006356:	4013      	ands	r3, r2
		*pThresholdHigh =
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800635c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	1ffe0000 	.word	0x1ffe0000

0800636c <VL53L0X_ClearInterruptMask>:
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
					 uint32_t InterruptMask)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800637a:	2300      	movs	r3, #0
 800637c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800637e:	2201      	movs	r2, #1
 8006380:	210b      	movs	r1, #11
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f003 fa2a 	bl	80097dc <VL53L0X_WrByte>
 8006388:	4603      	mov	r3, r0
 800638a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800638c:	2200      	movs	r2, #0
 800638e:	210b      	movs	r1, #11
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f003 fa23 	bl	80097dc <VL53L0X_WrByte>
 8006396:	4603      	mov	r3, r0
 8006398:	461a      	mov	r2, r3
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	4313      	orrs	r3, r2
 800639e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80063a0:	f107 030d 	add.w	r3, r7, #13
 80063a4:	461a      	mov	r2, r3
 80063a6:	2113      	movs	r1, #19
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f003 fa99 	bl	80098e0 <VL53L0X_RdByte>
 80063ae:	4603      	mov	r3, r0
 80063b0:	461a      	mov	r2, r3
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80063b8:	7bbb      	ldrb	r3, [r7, #14]
 80063ba:	3301      	adds	r3, #1
 80063bc:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80063be:	7b7b      	ldrb	r3, [r7, #13]
 80063c0:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d006      	beq.n	80063d6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80063c8:	7bbb      	ldrb	r3, [r7, #14]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d803      	bhi.n	80063d6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80063ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0d3      	beq.n	800637e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d901      	bls.n	80063e0 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80063dc:	23f4      	movs	r3, #244	; 0xf4
 80063de:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80063e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063f6:	2300      	movs	r3, #0
 80063f8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 80063fa:	f107 030e 	add.w	r3, r7, #14
 80063fe:	461a      	mov	r2, r3
 8006400:	2113      	movs	r1, #19
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f003 fa6c 	bl	80098e0 <VL53L0X_RdByte>
 8006408:	4603      	mov	r3, r0
 800640a:	73fb      	strb	r3, [r7, #15]
				&Byte);
	*pInterruptMaskStatus = Byte & 0x07;
 800640c:	7bbb      	ldrb	r3, [r7, #14]
 800640e:	f003 0207 	and.w	r2, r3, #7
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8006416:	7bbb      	ldrb	r3, [r7, #14]
 8006418:	f003 0318 	and.w	r3, r3, #24
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8006420:	23fa      	movs	r3, #250	; 0xfa
 8006422:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006424:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800643c:	2300      	movs	r3, #0
 800643e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 fa03 	bl	8006850 <VL53L0X_perform_ref_spad_management>
 800644a:	4603      	mov	r3, r0
 800644c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800644e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006464:	2300      	movs	r3, #0
 8006466:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8006468:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800646c:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800646e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006472:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8006474:	f107 0308 	add.w	r3, r7, #8
 8006478:	461a      	mov	r2, r3
 800647a:	2128      	movs	r1, #40	; 0x28
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f003 fa59 	bl	8009934 <VL53L0X_RdWord>
 8006482:	4603      	mov	r3, r0
 8006484:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8006486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d11e      	bne.n	80064cc <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800648e:	893b      	ldrh	r3, [r7, #8]
 8006490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006494:	b29b      	uxth	r3, r3
 8006496:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006498:	893b      	ldrh	r3, [r7, #8]
 800649a:	461a      	mov	r2, r3
 800649c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	dd0b      	ble.n	80064bc <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80064a4:	893a      	ldrh	r2, [r7, #8]
 80064a6:	897b      	ldrh	r3, [r7, #10]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	b21b      	sxth	r3, r3
 80064ae:	461a      	mov	r2, r3
					* 250;
 80064b0:	23fa      	movs	r3, #250	; 0xfa
 80064b2:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e007      	b.n	80064cc <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80064bc:	893b      	ldrh	r3, [r7, #8]
 80064be:	b21b      	sxth	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	23fa      	movs	r3, #250	; 0xfa
 80064c4:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80064cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80064d8:	b480      	push	{r7}
 80064da:	b08b      	sub	sp, #44	; 0x2c
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80064e6:	2308      	movs	r3, #8
 80064e8:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	f04f 32ff 	mov.w	r2, #4294967295
 80064f4:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fe:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	fbb3 f2f2 	udiv	r2, r3, r2
 8006508:	69b9      	ldr	r1, [r7, #24]
 800650a:	fb01 f202 	mul.w	r2, r1, r2
 800650e:	1a9b      	subs	r3, r3, r2
 8006510:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
 8006516:	e030      	b.n	800657a <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8006518:	2300      	movs	r3, #0
 800651a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	4413      	add	r3, r2
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8006526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	429a      	cmp	r2, r3
 800652c:	d11e      	bne.n	800656c <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating
			 */
			dataByte >>= fineOffset;
 800652e:	7ffa      	ldrb	r2, [r7, #31]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	fa42 f303 	asr.w	r3, r2, r3
 8006536:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800653c:	e016      	b.n	800656c <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800653e:	7ffb      	ldrb	r3, [r7, #31]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00b      	beq.n	8006560 <get_next_good_spad+0x88>
				success = 1;
 8006548:	2301      	movs	r3, #1
 800654a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	fb03 f202 	mul.w	r2, r3, r2
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	4413      	add	r3, r2
 8006558:	461a      	mov	r2, r3
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	601a      	str	r2, [r3, #0]
				break;
 800655e:	e009      	b.n	8006574 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8006560:	7ffb      	ldrb	r3, [r7, #31]
 8006562:	085b      	lsrs	r3, r3, #1
 8006564:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	3301      	adds	r3, #1
 800656a:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800656c:	6a3a      	ldr	r2, [r7, #32]
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	429a      	cmp	r2, r3
 8006572:	d3e4      	bcc.n	800653e <get_next_good_spad+0x66>
				coarseIndex++) {
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	3301      	adds	r3, #1
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800657a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	429a      	cmp	r2, r3
 8006580:	d202      	bcs.n	8006588 <get_next_good_spad+0xb0>
 8006582:	7fbb      	ldrb	r3, [r7, #30]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d0c7      	beq.n	8006518 <get_next_good_spad+0x40>
		}
	}
}
 8006588:	bf00      	nop
 800658a:	372c      	adds	r7, #44	; 0x2c
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800659c:	2301      	movs	r3, #1
 800659e:	73fb      	strb	r3, [r7, #15]

	quadrant = spadIndex >> 6;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	099b      	lsrs	r3, r3, #6
 80065a4:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80065a6:	4a07      	ldr	r2, [pc, #28]	; (80065c4 <is_aperture+0x30>)
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <is_aperture+0x22>
		isAperture = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	200002d4 	.word	0x200002d4

080065c8 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b089      	sub	sp, #36	; 0x24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80065d4:	2300      	movs	r3, #0
 80065d6:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80065d8:	2308      	movs	r3, #8
 80065da:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e4:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80065ee:	69b9      	ldr	r1, [r7, #24]
 80065f0:	fb01 f202 	mul.w	r2, r1, r2
 80065f4:	1a9b      	subs	r3, r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d302      	bcc.n	8006606 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006600:	23ce      	movs	r3, #206	; 0xce
 8006602:	77fb      	strb	r3, [r7, #31]
 8006604:	e010      	b.n	8006628 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	4413      	add	r3, r2
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	b25a      	sxtb	r2, r3
 8006610:	2101      	movs	r1, #1
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	fa01 f303 	lsl.w	r3, r1, r3
 8006618:	b25b      	sxtb	r3, r3
 800661a:	4313      	orrs	r3, r2
 800661c:	b259      	sxtb	r1, r3
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	4413      	add	r3, r2
 8006624:	b2ca      	uxtb	r2, r1
 8006626:	701a      	strb	r2, [r3, #0]

	return status;
 8006628:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3724      	adds	r7, #36	; 0x24
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8006642:	2306      	movs	r3, #6
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	21b0      	movs	r1, #176	; 0xb0
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f003 f86b 	bl	8009724 <VL53L0X_WriteMulti>
 800664e:	4603      	mov	r3, r0
 8006650:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8006652:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b084      	sub	sp, #16
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8006668:	2306      	movs	r3, #6
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	21b0      	movs	r1, #176	; 0xb0
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f003 f888 	bl	8009784 <VL53L0X_ReadMulti>
 8006674:	4603      	mov	r3, r0
 8006676:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8006678:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b08c      	sub	sp, #48	; 0x30
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	607a      	str	r2, [r7, #4]
 800668e:	603b      	str	r3, [r7, #0]
 8006690:	460b      	mov	r3, r1
 8006692:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006694:	2300      	movs	r3, #0
 8006696:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800669a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800669c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800669e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066a0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80066a2:	2300      	movs	r3, #0
 80066a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80066a6:	e02b      	b.n	8006700 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80066a8:	f107 031c 	add.w	r3, r7, #28
 80066ac:	6a3a      	ldr	r2, [r7, #32]
 80066ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff ff11 	bl	80064d8 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066bc:	d103      	bne.n	80066c6 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80066be:	23ce      	movs	r3, #206	; 0xce
 80066c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80066c4:	e020      	b.n	8006708 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	461a      	mov	r2, r3
 80066ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066cc:	4413      	add	r3, r2
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff ff60 	bl	8006594 <is_aperture>
 80066d4:	4603      	mov	r3, r0
 80066d6:	461a      	mov	r2, r3
 80066d8:	7afb      	ldrb	r3, [r7, #11]
 80066da:	4293      	cmp	r3, r2
 80066dc:	d003      	beq.n	80066e6 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80066de:	23ce      	movs	r3, #206	; 0xce
 80066e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80066e4:	e010      	b.n	8006708 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80066ea:	6a3a      	ldr	r2, [r7, #32]
 80066ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066ee:	6838      	ldr	r0, [r7, #0]
 80066f0:	f7ff ff6a 	bl	80065c8 <enable_spad_bit>
		currentSpad++;
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	3301      	adds	r3, #1
 80066f8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	3301      	adds	r3, #1
 80066fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006704:	429a      	cmp	r2, r3
 8006706:	d3cf      	bcc.n	80066a8 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8006708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800670a:	6a3a      	ldr	r2, [r7, #32]
 800670c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800670e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006712:	2b00      	cmp	r3, #0
 8006714:	d106      	bne.n	8006724 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f7ff ff8d 	bl	8006638 <set_ref_spad_map>
 800671e:	4603      	mov	r3, r0
 8006720:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8006724:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006728:	2b00      	cmp	r3, #0
 800672a:	d121      	bne.n	8006770 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800672c:	f107 0314 	add.w	r3, r7, #20
 8006730:	4619      	mov	r1, r3
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff ff93 	bl	800665e <get_ref_spad_map>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800673e:	2300      	movs	r3, #0
 8006740:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8006742:	e011      	b.n	8006768 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	4413      	add	r3, r2
 800674a:	781a      	ldrb	r2, [r3, #0]
 800674c:	f107 0114 	add.w	r1, r7, #20
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	440b      	add	r3, r1
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d003      	beq.n	8006762 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800675a:	23ce      	movs	r3, #206	; 0xce
 800675c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8006760:	e006      	b.n	8006770 <enable_ref_spads+0xec>
			}
			i++;
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	3301      	adds	r3, #1
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8006768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676c:	429a      	cmp	r2, r3
 800676e:	d3e9      	bcc.n	8006744 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8006770:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006774:	4618      	mov	r0, r3
 8006776:	3730      	adds	r7, #48	; 0x30
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08a      	sub	sp, #40	; 0x28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006786:	2300      	movs	r3, #0
 8006788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8006798:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800679c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d107      	bne.n	80067b4 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80067a4:	22c0      	movs	r2, #192	; 0xc0
 80067a6:	2101      	movs	r1, #1
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f003 f817 	bl	80097dc <VL53L0X_WrByte>
 80067ae:	4603      	mov	r3, r0
 80067b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80067b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d108      	bne.n	80067ce <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80067bc:	f107 0308 	add.w	r3, r7, #8
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff fc4a 	bl	800605c <VL53L0X_PerformSingleRangingMeasurement>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80067ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d107      	bne.n	80067e6 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80067d6:	2201      	movs	r2, #1
 80067d8:	21ff      	movs	r1, #255	; 0xff
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f002 fffe 	bl	80097dc <VL53L0X_WrByte>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80067e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d107      	bne.n	80067fe <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	21b6      	movs	r1, #182	; 0xb6
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f003 f89e 	bl	8009934 <VL53L0X_RdWord>
 80067f8:	4603      	mov	r3, r0
 80067fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80067fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006802:	2b00      	cmp	r3, #0
 8006804:	d107      	bne.n	8006816 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006806:	2200      	movs	r2, #0
 8006808:	21ff      	movs	r1, #255	; 0xff
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f002 ffe6 	bl	80097dc <VL53L0X_WrByte>
 8006810:	4603      	mov	r3, r0
 8006812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8006816:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800681a:	2b00      	cmp	r3, #0
 800681c:	d112      	bne.n	8006844 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800681e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006822:	461a      	mov	r2, r3
 8006824:	2101      	movs	r1, #1
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f002 ffd8 	bl	80097dc <VL53L0X_WrByte>
 800682c:	4603      	mov	r3, r0
 800682e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8006832:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006836:	2b00      	cmp	r3, #0
 8006838:	d104      	bne.n	8006844 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006840:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	}

	return status;
 8006844:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006848:	4618      	mov	r0, r3
 800684a:	3728      	adds	r7, #40	; 0x28
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8006850:	b590      	push	{r4, r7, lr}
 8006852:	b09d      	sub	sp, #116	; 0x74
 8006854:	af06      	add	r7, sp, #24
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800685c:	2300      	movs	r3, #0
 800685e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8006862:	23b4      	movs	r3, #180	; 0xb4
 8006864:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8006868:	2303      	movs	r3, #3
 800686a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800686c:	232c      	movs	r3, #44	; 0x2c
 800686e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8006870:	2300      	movs	r3, #0
 8006872:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800687c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006880:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8006886:	2300      	movs	r3, #0
 8006888:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800688a:	2306      	movs	r3, #6
 800688c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800688e:	2300      	movs	r3, #0
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800689c:	2300      	movs	r3, #0
 800689e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 80068b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80068b6:	2300      	movs	r3, #0
 80068b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80068ba:	e009      	b.n	80068d0 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068c6:	2200      	movs	r2, #0
 80068c8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80068ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068cc:	3301      	adds	r3, #1
 80068ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80068d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d3f1      	bcc.n	80068bc <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80068d8:	2201      	movs	r2, #1
 80068da:	21ff      	movs	r1, #255	; 0xff
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f002 ff7d 	bl	80097dc <VL53L0X_WrByte>
 80068e2:	4603      	mov	r3, r0
 80068e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80068e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d107      	bne.n	8006900 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80068f0:	2200      	movs	r2, #0
 80068f2:	214f      	movs	r1, #79	; 0x4f
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f002 ff71 	bl	80097dc <VL53L0X_WrByte>
 80068fa:	4603      	mov	r3, r0
 80068fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006900:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006904:	2b00      	cmp	r3, #0
 8006906:	d107      	bne.n	8006918 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8006908:	222c      	movs	r2, #44	; 0x2c
 800690a:	214e      	movs	r1, #78	; 0x4e
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f002 ff65 	bl	80097dc <VL53L0X_WrByte>
 8006912:	4603      	mov	r3, r0
 8006914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006918:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800691c:	2b00      	cmp	r3, #0
 800691e:	d107      	bne.n	8006930 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006920:	2200      	movs	r2, #0
 8006922:	21ff      	movs	r1, #255	; 0xff
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f002 ff59 	bl	80097dc <VL53L0X_WrByte>
 800692a:	4603      	mov	r3, r0
 800692c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006930:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006934:	2b00      	cmp	r3, #0
 8006936:	d109      	bne.n	800694c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8006938:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800693c:	461a      	mov	r2, r3
 800693e:	21b6      	movs	r1, #182	; 0xb6
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f002 ff4b 	bl	80097dc <VL53L0X_WrByte>
 8006946:	4603      	mov	r3, r0
 8006948:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800694c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006950:	2b00      	cmp	r3, #0
 8006952:	d107      	bne.n	8006964 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8006954:	2200      	movs	r2, #0
 8006956:	2180      	movs	r1, #128	; 0x80
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f002 ff3f 	bl	80097dc <VL53L0X_WrByte>
 800695e:	4603      	mov	r3, r0
 8006960:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8006964:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10a      	bne.n	8006982 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800696c:	f107 0210 	add.w	r2, r7, #16
 8006970:	f107 0111 	add.w	r1, r7, #17
 8006974:	2300      	movs	r3, #0
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 fbbb 	bl	80070f2 <VL53L0X_perform_ref_calibration>
 800697c:	4603      	mov	r3, r0
 800697e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8006982:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006986:	2b00      	cmp	r3, #0
 8006988:	d121      	bne.n	80069ce <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800698a:	2300      	movs	r3, #0
 800698c:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800698e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006990:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8006992:	2300      	movs	r3, #0
 8006994:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8006996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006998:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f503 74a8 	add.w	r4, r3, #336	; 0x150
		Status = enable_ref_spads(Dev,
 80069a6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80069aa:	f107 0218 	add.w	r2, r7, #24
 80069ae:	9204      	str	r2, [sp, #16]
 80069b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069b2:	9203      	str	r2, [sp, #12]
 80069b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069b6:	9202      	str	r2, [sp, #8]
 80069b8:	9301      	str	r3, [sp, #4]
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	4623      	mov	r3, r4
 80069c0:	4602      	mov	r2, r0
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f7ff fe5e 	bl	8006684 <enable_ref_spads>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80069ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d174      	bne.n	8006ac0 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80069da:	f107 0312 	add.w	r3, r7, #18
 80069de:	4619      	mov	r1, r3
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f7ff fecb 	bl	800677c <perform_ref_signal_measurement>
 80069e6:	4603      	mov	r3, r0
 80069e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80069ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d161      	bne.n	8006ab8 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80069f4:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80069f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d25d      	bcs.n	8006ab8 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs
			 */

			for (index = 0; index < spadArraySize; index++)
 80069fc:	2300      	movs	r3, #0
 80069fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a00:	e009      	b.n	8006a16 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a12:	3301      	adds	r3, #1
 8006a14:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d3f1      	bcc.n	8006a02 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8006a1e:	e002      	b.n	8006a26 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8006a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a22:	3301      	adds	r3, #1
 8006a24:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8006a26:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8006a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a2c:	4413      	add	r3, r2
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff fdb0 	bl	8006594 <is_aperture>
 8006a34:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d103      	bne.n	8006a42 <VL53L0X_perform_ref_spad_management+0x1f2>
 8006a3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d3ee      	bcc.n	8006a20 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8006a42:	2301      	movs	r3, #1
 8006a44:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8006a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a48:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f503 74a8 	add.w	r4, r3, #336	; 0x150
			Status = enable_ref_spads(Dev,
 8006a56:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006a5a:	f107 0218 	add.w	r2, r7, #24
 8006a5e:	9204      	str	r2, [sp, #16]
 8006a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a62:	9203      	str	r2, [sp, #12]
 8006a64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a66:	9202      	str	r2, [sp, #8]
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	4623      	mov	r3, r4
 8006a70:	4602      	mov	r2, r0
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f7ff fe06 	bl	8006684 <enable_ref_spads>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006a7e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d11b      	bne.n	8006abe <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8006a8a:	f107 0312 	add.w	r3, r7, #18
 8006a8e:	4619      	mov	r1, r3
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f7ff fe73 	bl	800677c <perform_ref_signal_measurement>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8006a9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10c      	bne.n	8006abe <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8006aa4:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006aa6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d208      	bcs.n	8006abe <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8006aac:	2301      	movs	r3, #1
 8006aae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8006ab6:	e002      	b.n	8006abe <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006abc:	e000      	b.n	8006ac0 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8006abe:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006ac0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f040 80af 	bne.w	8006c28 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8006aca:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006acc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	f240 80aa 	bls.w	8006c28 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8006ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006adc:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 8006ae4:	f107 031c 	add.w	r3, r7, #28
 8006ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aea:	4618      	mov	r0, r3
 8006aec:	f003 fa1c 	bl	8009f28 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006af0:	8a7b      	ldrh	r3, [r7, #18]
 8006af2:	461a      	mov	r2, r3
 8006af4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	bfb8      	it	lt
 8006afc:	425b      	neglt	r3, r3
 8006afe:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8006b06:	e086      	b.n	8006c16 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 70ab 	add.w	r0, r3, #342	; 0x156
			get_next_good_spad(
 8006b0e:	f107 0314 	add.w	r3, r7, #20
 8006b12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b16:	f7ff fcdf 	bl	80064d8 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b20:	d103      	bne.n	8006b2a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006b22:	23ce      	movs	r3, #206	; 0xce
 8006b24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006b28:	e07e      	b.n	8006c28 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006b2a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	4413      	add	r3, r2
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7ff fd2e 	bl	8006594 <is_aperture>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d003      	beq.n	8006b4a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8006b42:	2301      	movs	r3, #1
 8006b44:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8006b48:	e06e      	b.n	8006c28 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8006b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
			Status = enable_spad_bit(
 8006b5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff fd32 	bl	80065c8 <enable_spad_bit>
 8006b64:	4603      	mov	r3, r0
 8006b66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006b6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10c      	bne.n	8006b8c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8006b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b74:	3301      	adds	r3, #1
 8006b76:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement.
				 */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
				Status = set_ref_spad_map(Dev,
 8006b7e:	4619      	mov	r1, r3
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f7ff fd59 	bl	8006638 <set_ref_spad_map>
 8006b86:	4603      	mov	r3, r0
 8006b88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8006b8c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d146      	bne.n	8006c22 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006b94:	f107 0312 	add.w	r3, r7, #18
 8006b98:	4619      	mov	r1, r3
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f7ff fdee 	bl	800677c <perform_ref_signal_measurement>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8006ba6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d13b      	bne.n	8006c26 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006bae:	8a7b      	ldrh	r3, [r7, #18]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	bfb8      	it	lt
 8006bba:	425b      	neglt	r3, r3
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8006bbe:	8a7b      	ldrh	r3, [r7, #18]
 8006bc0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d21c      	bcs.n	8006c00 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8006bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d914      	bls.n	8006bf8 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this.
					 */
					Status = set_ref_spad_map(Dev,
 8006bce:	f107 031c 	add.w	r3, r7, #28
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f7ff fd2f 	bl	8006638 <set_ref_spad_map>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
					memcpy(
 8006be6:	f107 011c 	add.w	r1, r7, #28
 8006bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bec:	4618      	mov	r0, r3
 8006bee:	f003 f99b 	bl	8009f28 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8006bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfe:	e00a      	b.n	8006c16 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 71a8 	add.w	r1, r3, #336	; 0x150
				memcpy(lastSpadArray,
 8006c0a:	f107 031c 	add.w	r3, r7, #28
 8006c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c10:	4618      	mov	r0, r3
 8006c12:	f003 f989 	bl	8009f28 <memcpy>
		while (!complete) {
 8006c16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f43f af74 	beq.w	8006b08 <VL53L0X_perform_ref_spad_management+0x2b8>
 8006c20:	e002      	b.n	8006c28 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006c22:	bf00      	nop
 8006c24:	e000      	b.n	8006c28 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006c26:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d115      	bne.n	8006c5c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c34:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006c3c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	781a      	ldrb	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006c5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	375c      	adds	r7, #92	; 0x5c
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd90      	pop	{r4, r7, pc}

08006c68 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8006c68:	b590      	push	{r4, r7, lr}
 8006c6a:	b093      	sub	sp, #76	; 0x4c
 8006c6c:	af06      	add	r7, sp, #24
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4613      	mov	r3, r2
 8006c74:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c76:	2300      	movs	r3, #0
 8006c78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006c80:	23b4      	movs	r3, #180	; 0xb4
 8006c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8006c86:	2306      	movs	r3, #6
 8006c88:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8006c8a:	232c      	movs	r3, #44	; 0x2c
 8006c8c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006c8e:	2201      	movs	r2, #1
 8006c90:	21ff      	movs	r1, #255	; 0xff
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f002 fda2 	bl	80097dc <VL53L0X_WrByte>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006c9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d107      	bne.n	8006cb6 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	214f      	movs	r1, #79	; 0x4f
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f002 fd96 	bl	80097dc <VL53L0X_WrByte>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006cb6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d107      	bne.n	8006cce <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8006cbe:	222c      	movs	r2, #44	; 0x2c
 8006cc0:	214e      	movs	r1, #78	; 0x4e
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f002 fd8a 	bl	80097dc <VL53L0X_WrByte>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006cce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d107      	bne.n	8006ce6 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	21ff      	movs	r1, #255	; 0xff
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f002 fd7e 	bl	80097dc <VL53L0X_WrByte>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006ce6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d109      	bne.n	8006d02 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8006cee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	21b6      	movs	r1, #182	; 0xb6
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f002 fd70 	bl	80097dc <VL53L0X_WrByte>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8006d02:	2300      	movs	r3, #0
 8006d04:	627b      	str	r3, [r7, #36]	; 0x24
 8006d06:	e009      	b.n	8006d1c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d12:	2200      	movs	r2, #0
 8006d14:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	3301      	adds	r3, #1
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d3f1      	bcc.n	8006d08 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8006d24:	79fb      	ldrb	r3, [r7, #7]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d011      	beq.n	8006d4e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006d2a:	e002      	b.n	8006d32 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	3301      	adds	r3, #1
 8006d30:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006d32:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	4413      	add	r3, r2
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7ff fc2a 	bl	8006594 <is_aperture>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d103      	bne.n	8006d4e <VL53L0X_set_reference_spads+0xe6>
 8006d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d3ee      	bcc.n	8006d2c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f503 70ab 	add.w	r0, r3, #342	; 0x156
				Dev->Data.SpadData.RefSpadEnables,
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f503 74a8 	add.w	r4, r3, #336	; 0x150
	Status = enable_ref_spads(Dev,
 8006d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d5e:	79f9      	ldrb	r1, [r7, #7]
 8006d60:	f107 0214 	add.w	r2, r7, #20
 8006d64:	9204      	str	r2, [sp, #16]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	9203      	str	r2, [sp, #12]
 8006d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d6c:	9202      	str	r2, [sp, #8]
 8006d6e:	9301      	str	r3, [sp, #4]
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	4623      	mov	r3, r4
 8006d76:	4602      	mov	r2, r0
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f7ff fc83 	bl	8006684 <enable_ref_spads>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006d84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10c      	bne.n	8006da6 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	79fa      	ldrb	r2, [r7, #7]
 8006da2:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8006da6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3734      	adds	r7, #52	; 0x34
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd90      	pop	{r4, r7, pc}

08006db2 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	460b      	mov	r3, r1
 8006dbc:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10a      	bne.n	8006de0 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8006dca:	78fb      	ldrb	r3, [r7, #3]
 8006dcc:	f043 0301 	orr.w	r3, r3, #1
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f002 fd00 	bl	80097dc <VL53L0X_WrByte>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d104      	bne.n	8006df2 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f9bf 	bl	800716c <VL53L0X_measurement_poll_for_completion>
 8006dee:	4603      	mov	r3, r0
 8006df0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d105      	bne.n	8006e06 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7ff fab5 	bl	800636c <VL53L0X_ClearInterruptMask>
 8006e02:	4603      	mov	r3, r0
 8006e04:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2100      	movs	r1, #0
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f002 fce2 	bl	80097dc <VL53L0X_WrByte>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	73fb      	strb	r3, [r7, #15]

	return Status;
 8006e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <VL53L0X_ref_calibration_io>:
VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
	uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	4608      	mov	r0, r1
 8006e32:	4611      	mov	r1, r2
 8006e34:	461a      	mov	r2, r3
 8006e36:	4603      	mov	r3, r0
 8006e38:	70fb      	strb	r3, [r7, #3]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	70bb      	strb	r3, [r7, #2]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e42:	2300      	movs	r3, #0
 8006e44:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8006e46:	2300      	movs	r3, #0
 8006e48:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	21ff      	movs	r1, #255	; 0xff
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f002 fcc4 	bl	80097dc <VL53L0X_WrByte>
 8006e54:	4603      	mov	r3, r0
 8006e56:	461a      	mov	r2, r3
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006e5e:	2200      	movs	r2, #0
 8006e60:	2100      	movs	r1, #0
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f002 fcba 	bl	80097dc <VL53L0X_WrByte>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006e72:	2200      	movs	r2, #0
 8006e74:	21ff      	movs	r1, #255	; 0xff
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f002 fcb0 	bl	80097dc <VL53L0X_WrByte>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	461a      	mov	r2, r3
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8006e86:	78fb      	ldrb	r3, [r7, #3]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01e      	beq.n	8006eca <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8006e8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d009      	beq.n	8006ea8 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	21cb      	movs	r1, #203	; 0xcb
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f002 fd21 	bl	80098e0 <VL53L0X_RdByte>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006ea8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d02a      	beq.n	8006f06 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8006eb0:	f107 030e 	add.w	r3, r7, #14
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	21ee      	movs	r1, #238	; 0xee
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f002 fd11 	bl	80098e0 <VL53L0X_RdByte>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	73fb      	strb	r3, [r7, #15]
 8006ec8:	e01d      	b.n	8006f06 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8006eca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00a      	beq.n	8006ee8 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006ed2:	78bb      	ldrb	r3, [r7, #2]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	21cb      	movs	r1, #203	; 0xcb
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f002 fc7f 	bl	80097dc <VL53L0X_WrByte>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006ee8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00a      	beq.n	8006f06 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006ef0:	787b      	ldrb	r3, [r7, #1]
 8006ef2:	2280      	movs	r2, #128	; 0x80
 8006ef4:	21ee      	movs	r1, #238	; 0xee
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f002 fcbe 	bl	8009878 <VL53L0X_UpdateByte>
 8006efc:	4603      	mov	r3, r0
 8006efe:	461a      	mov	r2, r3
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006f06:	2201      	movs	r2, #1
 8006f08:	21ff      	movs	r1, #255	; 0xff
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f002 fc66 	bl	80097dc <VL53L0X_WrByte>
 8006f10:	4603      	mov	r3, r0
 8006f12:	461a      	mov	r2, r3
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f002 fc5c 	bl	80097dc <VL53L0X_WrByte>
 8006f24:	4603      	mov	r3, r0
 8006f26:	461a      	mov	r2, r3
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006f2e:	2200      	movs	r2, #0
 8006f30:	21ff      	movs	r1, #255	; 0xff
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f002 fc52 	bl	80097dc <VL53L0X_WrByte>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006f42:	7bbb      	ldrb	r3, [r7, #14]
 8006f44:	f023 0310 	bic.w	r3, r3, #16
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	701a      	strb	r2, [r3, #0]

	return Status;
 8006f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b08a      	sub	sp, #40	; 0x28
 8006f5e:	af04      	add	r7, sp, #16
 8006f60:	60f8      	str	r0, [r7, #12]
 8006f62:	60b9      	str	r1, [r7, #8]
 8006f64:	4611      	mov	r1, r2
 8006f66:	461a      	mov	r2, r3
 8006f68:	460b      	mov	r3, r1
 8006f6a:	71fb      	strb	r3, [r7, #7]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f70:	2300      	movs	r3, #0
 8006f72:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006f80:	2300      	movs	r3, #0
 8006f82:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006f84:	79bb      	ldrb	r3, [r7, #6]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8006f90:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006f92:	2201      	movs	r2, #1
 8006f94:	2101      	movs	r1, #1
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f002 fc20 	bl	80097dc <VL53L0X_WrByte>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d105      	bne.n	8006fb4 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8006fa8:	2140      	movs	r1, #64	; 0x40
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f7ff ff01 	bl	8006db2 <VL53L0X_perform_single_ref_calibration>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006fb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d115      	bne.n	8006fe8 <VL53L0X_perform_vhv_calibration+0x8e>
 8006fbc:	79fb      	ldrb	r3, [r7, #7]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d112      	bne.n	8006fe8 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006fc2:	7d39      	ldrb	r1, [r7, #20]
 8006fc4:	7d7a      	ldrb	r2, [r7, #21]
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	9303      	str	r3, [sp, #12]
 8006fca:	2301      	movs	r3, #1
 8006fcc:	9302      	str	r3, [sp, #8]
 8006fce:	f107 0313 	add.w	r3, r7, #19
 8006fd2:	9301      	str	r3, [sp, #4]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	2101      	movs	r1, #1
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f7ff ff23 	bl	8006e28 <VL53L0X_ref_calibration_io>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	75fb      	strb	r3, [r7, #23]
 8006fe6:	e002      	b.n	8006fee <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2200      	movs	r2, #0
 8006fec:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d112      	bne.n	800701c <VL53L0X_perform_vhv_calibration+0xc2>
 8006ff6:	79bb      	ldrb	r3, [r7, #6]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00f      	beq.n	800701c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006ffc:	7dbb      	ldrb	r3, [r7, #22]
 8006ffe:	461a      	mov	r2, r3
 8007000:	2101      	movs	r1, #1
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f002 fbea 	bl	80097dc <VL53L0X_WrByte>
 8007008:	4603      	mov	r3, r0
 800700a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800700c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d103      	bne.n	800701c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	7dba      	ldrb	r2, [r7, #22]
 8007018:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 800701c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08a      	sub	sp, #40	; 0x28
 800702c:	af04      	add	r7, sp, #16
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	4611      	mov	r1, r2
 8007034:	461a      	mov	r2, r3
 8007036:	460b      	mov	r3, r1
 8007038:	71fb      	strb	r3, [r7, #7]
 800703a:	4613      	mov	r3, r2
 800703c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800703e:	2300      	movs	r3, #0
 8007040:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800704e:	79bb      	ldrb	r3, [r7, #6]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800705a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800705c:	2202      	movs	r2, #2
 800705e:	2101      	movs	r1, #1
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f002 fbbb 	bl	80097dc <VL53L0X_WrByte>
 8007066:	4603      	mov	r3, r0
 8007068:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800706a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d105      	bne.n	800707e <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8007072:	2100      	movs	r1, #0
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f7ff fe9c 	bl	8006db2 <VL53L0X_perform_single_ref_calibration>
 800707a:	4603      	mov	r3, r0
 800707c:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800707e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d115      	bne.n	80070b2 <VL53L0X_perform_phase_calibration+0x8a>
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d112      	bne.n	80070b2 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800708c:	7d39      	ldrb	r1, [r7, #20]
 800708e:	7d7a      	ldrb	r2, [r7, #21]
 8007090:	2301      	movs	r3, #1
 8007092:	9303      	str	r3, [sp, #12]
 8007094:	2300      	movs	r3, #0
 8007096:	9302      	str	r3, [sp, #8]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	9301      	str	r3, [sp, #4]
 800709c:	f107 0313 	add.w	r3, r7, #19
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	460b      	mov	r3, r1
 80070a4:	2101      	movs	r1, #1
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f7ff febe 	bl	8006e28 <VL53L0X_ref_calibration_io>
 80070ac:	4603      	mov	r3, r0
 80070ae:	75fb      	strb	r3, [r7, #23]
 80070b0:	e002      	b.n	80070b8 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2200      	movs	r2, #0
 80070b6:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80070b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d112      	bne.n	80070e6 <VL53L0X_perform_phase_calibration+0xbe>
 80070c0:	79bb      	ldrb	r3, [r7, #6]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00f      	beq.n	80070e6 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80070c6:	7dbb      	ldrb	r3, [r7, #22]
 80070c8:	461a      	mov	r2, r3
 80070ca:	2101      	movs	r1, #1
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f002 fb85 	bl	80097dc <VL53L0X_WrByte>
 80070d2:	4603      	mov	r3, r0
 80070d4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80070d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d103      	bne.n	80070e6 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	7dba      	ldrb	r2, [r7, #22]
 80070e2:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 80070e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	60f8      	str	r0, [r7, #12]
 80070fa:	60b9      	str	r1, [r7, #8]
 80070fc:	607a      	str	r2, [r7, #4]
 80070fe:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007100:	2300      	movs	r3, #0
 8007102:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800710e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once.
	 */
	Status = VL53L0X_perform_vhv_calibration(
 8007110:	78fa      	ldrb	r2, [r7, #3]
 8007112:	2300      	movs	r3, #0
 8007114:	68b9      	ldr	r1, [r7, #8]
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f7ff ff1f 	bl	8006f5a <VL53L0X_perform_vhv_calibration>
 800711c:	4603      	mov	r3, r0
 800711e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007120:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d107      	bne.n	8007138 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8007128:	78fa      	ldrb	r2, [r7, #3]
 800712a:	2300      	movs	r3, #0
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f7ff ff7a 	bl	8007028 <VL53L0X_perform_phase_calibration>
 8007134:	4603      	mov	r3, r0
 8007136:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8007138:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10f      	bne.n	8007160 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007140:	7dbb      	ldrb	r3, [r7, #22]
 8007142:	461a      	mov	r2, r3
 8007144:	2101      	movs	r1, #1
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f002 fb48 	bl	80097dc <VL53L0X_WrByte>
 800714c:	4603      	mov	r3, r0
 800714e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007150:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d103      	bne.n	8007160 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	7dba      	ldrb	r2, [r7, #22]
 800715c:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8007160:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007174:	2300      	movs	r3, #0
 8007176:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8007178:	2300      	movs	r3, #0
 800717a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800717c:	2300      	movs	r3, #0
 800717e:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007180:	f107 030f 	add.w	r3, r7, #15
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7fe fe04 	bl	8005d94 <VL53L0X_GetMeasurementDataReady>
 800718c:	4603      	mov	r3, r0
 800718e:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8007190:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d110      	bne.n	80071ba <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d00f      	beq.n	80071be <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	3301      	adds	r3, #1
 80071a2:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80071aa:	d302      	bcc.n	80071b2 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80071ac:	23f9      	movs	r3, #249	; 0xf9
 80071ae:	75fb      	strb	r3, [r7, #23]
			break;
 80071b0:	e006      	b.n	80071c0 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f002 fc32 	bl	8009a1c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80071b8:	e7e2      	b.n	8007180 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80071ba:	bf00      	nop
 80071bc:	e000      	b.n	80071c0 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80071be:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80071c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	3301      	adds	r3, #1
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b085      	sub	sp, #20
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	4603      	mov	r3, r0
 80071fa:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8007200:	79fb      	ldrb	r3, [r7, #7]
 8007202:	085b      	lsrs	r3, r3, #1
 8007204:	b2db      	uxtb	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800720a:	7bfb      	ldrb	r3, [r7, #15]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8007220:	2300      	movs	r3, #0
 8007222:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8007224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007228:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits
	 */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800722a:	e002      	b.n	8007232 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	089b      	lsrs	r3, r3, #2
 8007230:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	429a      	cmp	r2, r3
 8007238:	d8f8      	bhi.n	800722c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800723a:	e017      	b.n	800726c <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	4413      	add	r3, r2
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	429a      	cmp	r2, r3
 8007246:	d30b      	bcc.n	8007260 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	4413      	add	r3, r2
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	085b      	lsrs	r3, r3, #1
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	4413      	add	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	e002      	b.n	8007266 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	085b      	lsrs	r3, r3, #1
 8007264:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	089b      	lsrs	r3, r3, #2
 800726a:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1e4      	bne.n	800723c <VL53L0X_isqrt+0x24>
	}

	return res;
 8007272:	68fb      	ldr	r3, [r7, #12]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007288:	2300      	movs	r3, #0
 800728a:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800728c:	2200      	movs	r2, #0
 800728e:	2183      	movs	r1, #131	; 0x83
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f002 faa3 	bl	80097dc <VL53L0X_WrByte>
 8007296:	4603      	mov	r3, r0
 8007298:	461a      	mov	r2, r3
 800729a:	7dfb      	ldrb	r3, [r7, #23]
 800729c:	4313      	orrs	r3, r2
 800729e:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock
	 */
	if (Status == VL53L0X_ERROR_NONE) {
 80072a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d11e      	bne.n	80072e6 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80072a8:	2300      	movs	r3, #0
 80072aa:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80072ac:	f107 030f 	add.w	r3, r7, #15
 80072b0:	461a      	mov	r2, r3
 80072b2:	2183      	movs	r1, #131	; 0x83
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f002 fb13 	bl	80098e0 <VL53L0X_RdByte>
 80072ba:	4603      	mov	r3, r0
 80072bc:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <VL53L0X_device_read_strobe+0x5a>
 80072c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d106      	bne.n	80072da <VL53L0X_device_read_strobe+0x5a>
				break;

			LoopNb = LoopNb + 1;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	3301      	adds	r3, #1
 80072d0:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80072d8:	d3e8      	bcc.n	80072ac <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80072e0:	d301      	bcc.n	80072e6 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80072e2:	23f9      	movs	r3, #249	; 0xf9
 80072e4:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80072e6:	2201      	movs	r2, #1
 80072e8:	2183      	movs	r1, #131	; 0x83
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f002 fa76 	bl	80097dc <VL53L0X_WrByte>
 80072f0:	4603      	mov	r3, r0
 80072f2:	461a      	mov	r2, r3
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80072fa:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80072fe:	4618      	mov	r0, r3
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b098      	sub	sp, #96	; 0x60
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	460b      	mov	r3, r1
 8007310:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007312:	2300      	movs	r3, #0
 8007314:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8007318:	2300      	movs	r3, #0
 800731a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800731e:	2300      	movs	r3, #0
 8007320:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8007328:	2300      	movs	r3, #0
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800732c:	2300      	movs	r3, #0
 800732e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8007336:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800733a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800733c:	2300      	movs	r3, #0
 800733e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800734e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done
	 */
	if (ReadDataFromDeviceDone != 7) {
 8007352:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007356:	2b07      	cmp	r3, #7
 8007358:	f000 8408 	beq.w	8007b6c <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800735c:	2201      	movs	r2, #1
 800735e:	2180      	movs	r1, #128	; 0x80
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f002 fa3b 	bl	80097dc <VL53L0X_WrByte>
 8007366:	4603      	mov	r3, r0
 8007368:	461a      	mov	r2, r3
 800736a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800736e:	4313      	orrs	r3, r2
 8007370:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007374:	2201      	movs	r2, #1
 8007376:	21ff      	movs	r1, #255	; 0xff
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f002 fa2f 	bl	80097dc <VL53L0X_WrByte>
 800737e:	4603      	mov	r3, r0
 8007380:	461a      	mov	r2, r3
 8007382:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007386:	4313      	orrs	r3, r2
 8007388:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800738c:	2200      	movs	r2, #0
 800738e:	2100      	movs	r1, #0
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f002 fa23 	bl	80097dc <VL53L0X_WrByte>
 8007396:	4603      	mov	r3, r0
 8007398:	461a      	mov	r2, r3
 800739a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800739e:	4313      	orrs	r3, r2
 80073a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80073a4:	2206      	movs	r2, #6
 80073a6:	21ff      	movs	r1, #255	; 0xff
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f002 fa17 	bl	80097dc <VL53L0X_WrByte>
 80073ae:	4603      	mov	r3, r0
 80073b0:	461a      	mov	r2, r3
 80073b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073b6:	4313      	orrs	r3, r2
 80073b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80073bc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80073c0:	461a      	mov	r2, r3
 80073c2:	2183      	movs	r1, #131	; 0x83
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f002 fa8b 	bl	80098e0 <VL53L0X_RdByte>
 80073ca:	4603      	mov	r3, r0
 80073cc:	461a      	mov	r2, r3
 80073ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80073d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073dc:	f043 0304 	orr.w	r3, r3, #4
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	461a      	mov	r2, r3
 80073e4:	2183      	movs	r1, #131	; 0x83
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f002 f9f8 	bl	80097dc <VL53L0X_WrByte>
 80073ec:	4603      	mov	r3, r0
 80073ee:	461a      	mov	r2, r3
 80073f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073f4:	4313      	orrs	r3, r2
 80073f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80073fa:	2207      	movs	r2, #7
 80073fc:	21ff      	movs	r1, #255	; 0xff
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f002 f9ec 	bl	80097dc <VL53L0X_WrByte>
 8007404:	4603      	mov	r3, r0
 8007406:	461a      	mov	r2, r3
 8007408:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800740c:	4313      	orrs	r3, r2
 800740e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8007412:	2201      	movs	r2, #1
 8007414:	2181      	movs	r1, #129	; 0x81
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f002 f9e0 	bl	80097dc <VL53L0X_WrByte>
 800741c:	4603      	mov	r3, r0
 800741e:	461a      	mov	r2, r3
 8007420:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007424:	4313      	orrs	r3, r2
 8007426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f002 faf6 	bl	8009a1c <VL53L0X_PollingDelay>
 8007430:	4603      	mov	r3, r0
 8007432:	461a      	mov	r2, r3
 8007434:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007438:	4313      	orrs	r3, r2
 800743a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800743e:	2201      	movs	r2, #1
 8007440:	2180      	movs	r1, #128	; 0x80
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f002 f9ca 	bl	80097dc <VL53L0X_WrByte>
 8007448:	4603      	mov	r3, r0
 800744a:	461a      	mov	r2, r3
 800744c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007450:	4313      	orrs	r3, r2
 8007452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8007456:	78fb      	ldrb	r3, [r7, #3]
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 8098 	beq.w	8007592 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007462:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007466:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800746a:	2b00      	cmp	r3, #0
 800746c:	f040 8091 	bne.w	8007592 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8007470:	226b      	movs	r2, #107	; 0x6b
 8007472:	2194      	movs	r1, #148	; 0x94
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f002 f9b1 	bl	80097dc <VL53L0X_WrByte>
 800747a:	4603      	mov	r3, r0
 800747c:	461a      	mov	r2, r3
 800747e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007482:	4313      	orrs	r3, r2
 8007484:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7ff fef9 	bl	8007280 <VL53L0X_device_read_strobe>
 800748e:	4603      	mov	r3, r0
 8007490:	461a      	mov	r2, r3
 8007492:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007496:	4313      	orrs	r3, r2
 8007498:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800749c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074a0:	461a      	mov	r2, r3
 80074a2:	2190      	movs	r1, #144	; 0x90
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f002 fa7d 	bl	80099a4 <VL53L0X_RdDWord>
 80074aa:	4603      	mov	r3, r0
 80074ac:	461a      	mov	r2, r3
 80074ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074b2:	4313      	orrs	r3, r2
 80074b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80074b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ba:	0a1b      	lsrs	r3, r3, #8
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	0bdb      	lsrs	r3, r3, #15
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80074d4:	2224      	movs	r2, #36	; 0x24
 80074d6:	2194      	movs	r1, #148	; 0x94
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f002 f97f 	bl	80097dc <VL53L0X_WrByte>
 80074de:	4603      	mov	r3, r0
 80074e0:	461a      	mov	r2, r3
 80074e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074e6:	4313      	orrs	r3, r2
 80074e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff fec7 	bl	8007280 <VL53L0X_device_read_strobe>
 80074f2:	4603      	mov	r3, r0
 80074f4:	461a      	mov	r2, r3
 80074f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074fa:	4313      	orrs	r3, r2
 80074fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007500:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007504:	461a      	mov	r2, r3
 8007506:	2190      	movs	r1, #144	; 0x90
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f002 fa4b 	bl	80099a4 <VL53L0X_RdDWord>
 800750e:	4603      	mov	r3, r0
 8007510:	461a      	mov	r2, r3
 8007512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007516:	4313      	orrs	r3, r2
 8007518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	0e1b      	lsrs	r3, r3, #24
 8007520:	b2db      	uxtb	r3, r3
 8007522:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	0c1b      	lsrs	r3, r3, #16
 8007528:	b2db      	uxtb	r3, r3
 800752a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	0a1b      	lsrs	r3, r3, #8
 8007530:	b2db      	uxtb	r3, r3
 8007532:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	b2db      	uxtb	r3, r3
 8007538:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800753a:	2225      	movs	r2, #37	; 0x25
 800753c:	2194      	movs	r1, #148	; 0x94
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f002 f94c 	bl	80097dc <VL53L0X_WrByte>
 8007544:	4603      	mov	r3, r0
 8007546:	461a      	mov	r2, r3
 8007548:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800754c:	4313      	orrs	r3, r2
 800754e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7ff fe94 	bl	8007280 <VL53L0X_device_read_strobe>
 8007558:	4603      	mov	r3, r0
 800755a:	461a      	mov	r2, r3
 800755c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007560:	4313      	orrs	r3, r2
 8007562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007566:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800756a:	461a      	mov	r2, r3
 800756c:	2190      	movs	r1, #144	; 0x90
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f002 fa18 	bl	80099a4 <VL53L0X_RdDWord>
 8007574:	4603      	mov	r3, r0
 8007576:	461a      	mov	r2, r3
 8007578:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800757c:	4313      	orrs	r3, r2
 800757e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	0e1b      	lsrs	r3, r3, #24
 8007586:	b2db      	uxtb	r3, r3
 8007588:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	0c1b      	lsrs	r3, r3, #16
 800758e:	b2db      	uxtb	r3, r3
 8007590:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8007592:	78fb      	ldrb	r3, [r7, #3]
 8007594:	f003 0302 	and.w	r3, r3, #2
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 8189 	beq.w	80078b0 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800759e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80075a2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f040 8182 	bne.w	80078b0 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80075ac:	2202      	movs	r2, #2
 80075ae:	2194      	movs	r1, #148	; 0x94
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f002 f913 	bl	80097dc <VL53L0X_WrByte>
 80075b6:	4603      	mov	r3, r0
 80075b8:	461a      	mov	r2, r3
 80075ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075be:	4313      	orrs	r3, r2
 80075c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff fe5b 	bl	8007280 <VL53L0X_device_read_strobe>
 80075ca:	4603      	mov	r3, r0
 80075cc:	461a      	mov	r2, r3
 80075ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075d2:	4313      	orrs	r3, r2
 80075d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80075d8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80075dc:	461a      	mov	r2, r3
 80075de:	2190      	movs	r1, #144	; 0x90
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f002 f97d 	bl	80098e0 <VL53L0X_RdByte>
 80075e6:	4603      	mov	r3, r0
 80075e8:	461a      	mov	r2, r3
 80075ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075ee:	4313      	orrs	r3, r2
 80075f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80075f4:	227b      	movs	r2, #123	; 0x7b
 80075f6:	2194      	movs	r1, #148	; 0x94
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f002 f8ef 	bl	80097dc <VL53L0X_WrByte>
 80075fe:	4603      	mov	r3, r0
 8007600:	461a      	mov	r2, r3
 8007602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007606:	4313      	orrs	r3, r2
 8007608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7ff fe37 	bl	8007280 <VL53L0X_device_read_strobe>
 8007612:	4603      	mov	r3, r0
 8007614:	461a      	mov	r2, r3
 8007616:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800761a:	4313      	orrs	r3, r2
 800761c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8007620:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8007624:	461a      	mov	r2, r3
 8007626:	2190      	movs	r1, #144	; 0x90
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f002 f959 	bl	80098e0 <VL53L0X_RdByte>
 800762e:	4603      	mov	r3, r0
 8007630:	461a      	mov	r2, r3
 8007632:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007636:	4313      	orrs	r3, r2
 8007638:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800763c:	2277      	movs	r2, #119	; 0x77
 800763e:	2194      	movs	r1, #148	; 0x94
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f002 f8cb 	bl	80097dc <VL53L0X_WrByte>
 8007646:	4603      	mov	r3, r0
 8007648:	461a      	mov	r2, r3
 800764a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800764e:	4313      	orrs	r3, r2
 8007650:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7ff fe13 	bl	8007280 <VL53L0X_device_read_strobe>
 800765a:	4603      	mov	r3, r0
 800765c:	461a      	mov	r2, r3
 800765e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007662:	4313      	orrs	r3, r2
 8007664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007668:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800766c:	461a      	mov	r2, r3
 800766e:	2190      	movs	r1, #144	; 0x90
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f002 f997 	bl	80099a4 <VL53L0X_RdDWord>
 8007676:	4603      	mov	r3, r0
 8007678:	461a      	mov	r2, r3
 800767a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800767e:	4313      	orrs	r3, r2
 8007680:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8007684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007686:	0e5b      	lsrs	r3, r3, #25
 8007688:	b2db      	uxtb	r3, r3
 800768a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800768e:	b2db      	uxtb	r3, r3
 8007690:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8007692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007694:	0c9b      	lsrs	r3, r3, #18
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800769c:	b2db      	uxtb	r3, r3
 800769e:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	0adb      	lsrs	r3, r3, #11
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80076ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b0:	091b      	lsrs	r3, r3, #4
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80076bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	00db      	lsls	r3, r3, #3
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80076ce:	2278      	movs	r2, #120	; 0x78
 80076d0:	2194      	movs	r1, #148	; 0x94
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f002 f882 	bl	80097dc <VL53L0X_WrByte>
 80076d8:	4603      	mov	r3, r0
 80076da:	461a      	mov	r2, r3
 80076dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076e0:	4313      	orrs	r3, r2
 80076e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7ff fdca 	bl	8007280 <VL53L0X_device_read_strobe>
 80076ec:	4603      	mov	r3, r0
 80076ee:	461a      	mov	r2, r3
 80076f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076f4:	4313      	orrs	r3, r2
 80076f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80076fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076fe:	461a      	mov	r2, r3
 8007700:	2190      	movs	r1, #144	; 0x90
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f002 f94e 	bl	80099a4 <VL53L0X_RdDWord>
 8007708:	4603      	mov	r3, r0
 800770a:	461a      	mov	r2, r3
 800770c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007710:	4313      	orrs	r3, r2
 8007712:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	0f5b      	lsrs	r3, r3, #29
 800771a:	b2db      	uxtb	r3, r3
 800771c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007720:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8007722:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007726:	4413      	add	r3, r2
 8007728:	b2db      	uxtb	r3, r3
 800772a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772e:	0d9b      	lsrs	r3, r3, #22
 8007730:	b2db      	uxtb	r3, r3
 8007732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007736:	b2db      	uxtb	r3, r3
 8007738:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	0bdb      	lsrs	r3, r3, #15
 800773e:	b2db      	uxtb	r3, r3
 8007740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007744:	b2db      	uxtb	r3, r3
 8007746:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8007748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774a:	0a1b      	lsrs	r3, r3, #8
 800774c:	b2db      	uxtb	r3, r3
 800774e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007752:	b2db      	uxtb	r3, r3
 8007754:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	085b      	lsrs	r3, r3, #1
 800775a:	b2db      	uxtb	r3, r3
 800775c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007760:	b2db      	uxtb	r3, r3
 8007762:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8007764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007766:	b2db      	uxtb	r3, r3
 8007768:	019b      	lsls	r3, r3, #6
 800776a:	b2db      	uxtb	r3, r3
 800776c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007770:	b2db      	uxtb	r3, r3
 8007772:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8007776:	2279      	movs	r2, #121	; 0x79
 8007778:	2194      	movs	r1, #148	; 0x94
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f002 f82e 	bl	80097dc <VL53L0X_WrByte>
 8007780:	4603      	mov	r3, r0
 8007782:	461a      	mov	r2, r3
 8007784:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007788:	4313      	orrs	r3, r2
 800778a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff fd76 	bl	8007280 <VL53L0X_device_read_strobe>
 8007794:	4603      	mov	r3, r0
 8007796:	461a      	mov	r2, r3
 8007798:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800779c:	4313      	orrs	r3, r2
 800779e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80077a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077a6:	461a      	mov	r2, r3
 80077a8:	2190      	movs	r1, #144	; 0x90
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f002 f8fa 	bl	80099a4 <VL53L0X_RdDWord>
 80077b0:	4603      	mov	r3, r0
 80077b2:	461a      	mov	r2, r3
 80077b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077b8:	4313      	orrs	r3, r2
 80077ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	0e9b      	lsrs	r3, r3, #26
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077c8:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80077ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077ce:	4413      	add	r3, r2
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80077d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d6:	0cdb      	lsrs	r3, r3, #19
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	0b1b      	lsrs	r3, r3, #12
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80077f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f2:	095b      	lsrs	r3, r3, #5
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80077fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007800:	b2db      	uxtb	r3, r3
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	b2db      	uxtb	r3, r3
 8007806:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800780a:	b2db      	uxtb	r3, r3
 800780c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8007810:	227a      	movs	r2, #122	; 0x7a
 8007812:	2194      	movs	r1, #148	; 0x94
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 ffe1 	bl	80097dc <VL53L0X_WrByte>
 800781a:	4603      	mov	r3, r0
 800781c:	461a      	mov	r2, r3
 800781e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007822:	4313      	orrs	r3, r2
 8007824:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7ff fd29 	bl	8007280 <VL53L0X_device_read_strobe>
 800782e:	4603      	mov	r3, r0
 8007830:	461a      	mov	r2, r3
 8007832:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007836:	4313      	orrs	r3, r2
 8007838:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800783c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007840:	461a      	mov	r2, r3
 8007842:	2190      	movs	r1, #144	; 0x90
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f002 f8ad 	bl	80099a4 <VL53L0X_RdDWord>
 800784a:	4603      	mov	r3, r0
 800784c:	461a      	mov	r2, r3
 800784e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007852:	4313      	orrs	r3, r2
 8007854:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785a:	0f9b      	lsrs	r3, r3, #30
 800785c:	b2db      	uxtb	r3, r3
 800785e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007862:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8007864:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007868:	4413      	add	r3, r2
 800786a:	b2db      	uxtb	r3, r3
 800786c:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	0ddb      	lsrs	r3, r3, #23
 8007872:	b2db      	uxtb	r3, r3
 8007874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007878:	b2db      	uxtb	r3, r3
 800787a:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	0c1b      	lsrs	r3, r3, #16
 8007880:	b2db      	uxtb	r3, r3
 8007882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007886:	b2db      	uxtb	r3, r3
 8007888:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788c:	0a5b      	lsrs	r3, r3, #9
 800788e:	b2db      	uxtb	r3, r3
 8007890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007894:	b2db      	uxtb	r3, r3
 8007896:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	089b      	lsrs	r3, r3, #2
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80078aa:	2300      	movs	r3, #0
 80078ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80078b0:	78fb      	ldrb	r3, [r7, #3]
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 80f1 	beq.w	8007a9e <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80078bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80078c0:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f040 80ea 	bne.w	8007a9e <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80078ca:	227b      	movs	r2, #123	; 0x7b
 80078cc:	2194      	movs	r1, #148	; 0x94
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f001 ff84 	bl	80097dc <VL53L0X_WrByte>
 80078d4:	4603      	mov	r3, r0
 80078d6:	461a      	mov	r2, r3
 80078d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078dc:	4313      	orrs	r3, r2
 80078de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7ff fccc 	bl	8007280 <VL53L0X_device_read_strobe>
 80078e8:	4603      	mov	r3, r0
 80078ea:	461a      	mov	r2, r3
 80078ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078f0:	4313      	orrs	r3, r2
 80078f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80078f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078fa:	461a      	mov	r2, r3
 80078fc:	2190      	movs	r1, #144	; 0x90
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f002 f850 	bl	80099a4 <VL53L0X_RdDWord>
 8007904:	4603      	mov	r3, r0
 8007906:	461a      	mov	r2, r3
 8007908:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800790c:	4313      	orrs	r3, r2
 800790e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007912:	227c      	movs	r2, #124	; 0x7c
 8007914:	2194      	movs	r1, #148	; 0x94
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f001 ff60 	bl	80097dc <VL53L0X_WrByte>
 800791c:	4603      	mov	r3, r0
 800791e:	461a      	mov	r2, r3
 8007920:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007924:	4313      	orrs	r3, r2
 8007926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff fca8 	bl	8007280 <VL53L0X_device_read_strobe>
 8007930:	4603      	mov	r3, r0
 8007932:	461a      	mov	r2, r3
 8007934:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007938:	4313      	orrs	r3, r2
 800793a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800793e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007942:	461a      	mov	r2, r3
 8007944:	2190      	movs	r1, #144	; 0x90
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f002 f82c 	bl	80099a4 <VL53L0X_RdDWord>
 800794c:	4603      	mov	r3, r0
 800794e:	461a      	mov	r2, r3
 8007950:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007954:	4313      	orrs	r3, r2
 8007956:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800795a:	2273      	movs	r2, #115	; 0x73
 800795c:	2194      	movs	r1, #148	; 0x94
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f001 ff3c 	bl	80097dc <VL53L0X_WrByte>
 8007964:	4603      	mov	r3, r0
 8007966:	461a      	mov	r2, r3
 8007968:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800796c:	4313      	orrs	r3, r2
 800796e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff fc84 	bl	8007280 <VL53L0X_device_read_strobe>
 8007978:	4603      	mov	r3, r0
 800797a:	461a      	mov	r2, r3
 800797c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007980:	4313      	orrs	r3, r2
 8007982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007986:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800798a:	461a      	mov	r2, r3
 800798c:	2190      	movs	r1, #144	; 0x90
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f002 f808 	bl	80099a4 <VL53L0X_RdDWord>
 8007994:	4603      	mov	r3, r0
 8007996:	461a      	mov	r2, r3
 8007998:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800799c:	4313      	orrs	r3, r2
 800799e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80079aa:	2274      	movs	r2, #116	; 0x74
 80079ac:	2194      	movs	r1, #148	; 0x94
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 ff14 	bl	80097dc <VL53L0X_WrByte>
 80079b4:	4603      	mov	r3, r0
 80079b6:	461a      	mov	r2, r3
 80079b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079bc:	4313      	orrs	r3, r2
 80079be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff fc5c 	bl	8007280 <VL53L0X_device_read_strobe>
 80079c8:	4603      	mov	r3, r0
 80079ca:	461a      	mov	r2, r3
 80079cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079d0:	4313      	orrs	r3, r2
 80079d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80079d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079da:	461a      	mov	r2, r3
 80079dc:	2190      	movs	r1, #144	; 0x90
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f001 ffe0 	bl	80099a4 <VL53L0X_RdDWord>
 80079e4:	4603      	mov	r3, r0
 80079e6:	461a      	mov	r2, r3
 80079e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079ec:	4313      	orrs	r3, r2
 80079ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80079f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079f8:	4313      	orrs	r3, r2
 80079fa:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80079fc:	2275      	movs	r2, #117	; 0x75
 80079fe:	2194      	movs	r1, #148	; 0x94
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f001 feeb 	bl	80097dc <VL53L0X_WrByte>
 8007a06:	4603      	mov	r3, r0
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff fc33 	bl	8007280 <VL53L0X_device_read_strobe>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a22:	4313      	orrs	r3, r2
 8007a24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007a28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	2190      	movs	r1, #144	; 0x90
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 ffb7 	bl	80099a4 <VL53L0X_RdDWord>
 8007a36:	4603      	mov	r3, r0
 8007a38:	461a      	mov	r2, r3
 8007a3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8007a4c:	2276      	movs	r2, #118	; 0x76
 8007a4e:	2194      	movs	r1, #148	; 0x94
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f001 fec3 	bl	80097dc <VL53L0X_WrByte>
 8007a56:	4603      	mov	r3, r0
 8007a58:	461a      	mov	r2, r3
 8007a5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff fc0b 	bl	8007280 <VL53L0X_device_read_strobe>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a72:	4313      	orrs	r3, r2
 8007a74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007a78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	2190      	movs	r1, #144	; 0x90
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 ff8f 	bl	80099a4 <VL53L0X_RdDWord>
 8007a86:	4603      	mov	r3, r0
 8007a88:	461a      	mov	r2, r3
 8007a8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8007a98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2181      	movs	r1, #129	; 0x81
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 fe9a 	bl	80097dc <VL53L0X_WrByte>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007ab6:	2206      	movs	r2, #6
 8007ab8:	21ff      	movs	r1, #255	; 0xff
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 fe8e 	bl	80097dc <VL53L0X_WrByte>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007ace:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	2183      	movs	r1, #131	; 0x83
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 ff02 	bl	80098e0 <VL53L0X_RdByte>
 8007adc:	4603      	mov	r3, r0
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007aea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007aee:	f023 0304 	bic.w	r3, r3, #4
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	461a      	mov	r2, r3
 8007af6:	2183      	movs	r1, #131	; 0x83
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 fe6f 	bl	80097dc <VL53L0X_WrByte>
 8007afe:	4603      	mov	r3, r0
 8007b00:	461a      	mov	r2, r3
 8007b02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	21ff      	movs	r1, #255	; 0xff
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f001 fe63 	bl	80097dc <VL53L0X_WrByte>
 8007b16:	4603      	mov	r3, r0
 8007b18:	461a      	mov	r2, r3
 8007b1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007b24:	2201      	movs	r2, #1
 8007b26:	2100      	movs	r1, #0
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f001 fe57 	bl	80097dc <VL53L0X_WrByte>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	461a      	mov	r2, r3
 8007b32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	21ff      	movs	r1, #255	; 0xff
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 fe4b 	bl	80097dc <VL53L0X_WrByte>
 8007b46:	4603      	mov	r3, r0
 8007b48:	461a      	mov	r2, r3
 8007b4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007b54:	2200      	movs	r2, #0
 8007b56:	2180      	movs	r1, #128	; 0x80
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f001 fe3f 	bl	80097dc <VL53L0X_WrByte>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	461a      	mov	r2, r3
 8007b62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007b6c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f040 8090 	bne.w	8007c96 <VL53L0X_get_info_from_device+0x990>
 8007b76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b7a:	2b07      	cmp	r3, #7
 8007b7c:	f000 808b 	beq.w	8007c96 <VL53L0X_get_info_from_device+0x990>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d024      	beq.n	8007bd4 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007b8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b8e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d11e      	bne.n	8007bd4 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8007b9c:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8007ba6:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007baa:	2300      	movs	r3, #0
 8007bac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bae:	e00e      	b.n	8007bce <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8007bb0:	f107 0208 	add.w	r2, r7, #8
 8007bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bb6:	4413      	add	r3, r2
 8007bb8:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8007bc4:	460a      	mov	r2, r1
 8007bc6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bca:	3301      	adds	r3, #1
 8007bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd0:	2b05      	cmp	r3, #5
 8007bd2:	dded      	ble.n	8007bb0 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d019      	beq.n	8007c12 <VL53L0X_get_info_from_device+0x90c>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007bde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007be2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d113      	bne.n	8007c12 <VL53L0X_get_info_from_device+0x90c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007bea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007bf4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f203 131f 	addw	r3, r3, #287	; 0x11f
 8007c04:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007c06:	f107 0310 	add.w	r3, r7, #16
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c0e:	f002 f983 	bl	8009f18 <strcpy>

		}

		if (((option & 4) == 4) &&
 8007c12:	78fb      	ldrb	r3, [r7, #3]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d030      	beq.n	8007c7e <VL53L0X_get_info_from_device+0x978>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007c1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007c20:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d12a      	bne.n	8007c7e <VL53L0X_get_info_from_device+0x978>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8007c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c3a:	025b      	lsls	r3, r3, #9
 8007c3c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c42:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8007c46:	2300      	movs	r3, #0
 8007c48:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8007c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d011      	beq.n	8007c76 <VL53L0X_get_info_from_device+0x970>
				OffsetFixed1104_mm =
 8007c52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	64bb      	str	r3, [r7, #72]	; 0x48
					DistMeasFixed1104_400_mm -
					DistMeasTgtFixed1104_mm;
				OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8007c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c60:	fb02 f303 	mul.w	r3, r2, r3
 8007c64:	091b      	lsrs	r3, r3, #4
				OffsetMicroMeters = (OffsetFixed1104_mm
 8007c66:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				OffsetMicroMeters *= -1;
 8007c6a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007c6e:	425b      	negs	r3, r3
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8007c76:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	605a      	str	r2, [r3, #4]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8007c7e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007c82:	78fb      	ldrb	r3, [r7, #3]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007c8c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c96:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3760      	adds	r7, #96	; 0x60
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
				      uint8_t vcsel_period_pclks)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b087      	sub	sp, #28
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	 *  therefore set fixed value
	 */
	PLL_period_ps = 1655;
 8007cae:	f240 6277 	movw	r2, #1655	; 0x677
 8007cb2:	f04f 0300 	mov.w	r3, #0
 8007cb6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8007cba:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8007cbe:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	fb02 f303 	mul.w	r3, r2, r3
 8007cce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	371c      	adds	r7, #28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b087      	sub	sp, #28
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007cea:	2300      	movs	r3, #0
 8007cec:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d017      	beq.n	8007d28 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007cfe:	e005      	b.n	8007d0c <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	085b      	lsrs	r3, r3, #1
 8007d04:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007d06:	89fb      	ldrh	r3, [r7, #14]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1f4      	bne.n	8007d00 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007d16:	89fb      	ldrh	r3, [r7, #14]
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007d24:	4413      	add	r3, r2
 8007d26:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007d28:	8afb      	ldrh	r3, [r7, #22]

}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	371c      	adds	r7, #28
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b085      	sub	sp, #20
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8007d40:	2300      	movs	r3, #0
 8007d42:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007d44:	88fb      	ldrh	r3, [r7, #6]
 8007d46:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007d48:	88fa      	ldrh	r2, [r7, #6]
 8007d4a:	0a12      	lsrs	r2, r2, #8
 8007d4c:	b292      	uxth	r2, r2
 8007d4e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007d50:	3301      	adds	r3, #1
 8007d52:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007d54:	68fb      	ldr	r3, [r7, #12]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
	...

08007d64 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b088      	sub	sp, #32
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007d76:	79fb      	ldrb	r3, [r7, #7]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f7ff ff91 	bl	8007ca2 <VL53L0X_calc_macro_period_ps>
 8007d80:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007d88:	4a0a      	ldr	r2, [pc, #40]	; (8007db4 <VL53L0X_calc_timeout_mclks+0x50>)
 8007d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8e:	099b      	lsrs	r3, r3, #6
 8007d90:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d98:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	085b      	lsrs	r3, r3, #1
 8007da0:	441a      	add	r2, r3
	timeout_period_mclks =
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da8:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 8007daa:	69fb      	ldr	r3, [r7, #28]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3720      	adds	r7, #32
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	10624dd3 	.word	0x10624dd3

08007db8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	807b      	strh	r3, [r7, #2]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007dcc:	787b      	ldrb	r3, [r7, #1]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff ff66 	bl	8007ca2 <VL53L0X_calc_macro_period_ps>
 8007dd6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007dde:	4a0a      	ldr	r2, [pc, #40]	; (8007e08 <VL53L0X_calc_timeout_us+0x50>)
 8007de0:	fba2 2303 	umull	r2, r3, r2, r3
 8007de4:	099b      	lsrs	r3, r3, #6
 8007de6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8007de8:	887b      	ldrh	r3, [r7, #2]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	fb02 f303 	mul.w	r3, r2, r3
 8007df0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8007df4:	4a04      	ldr	r2, [pc, #16]	; (8007e08 <VL53L0X_calc_timeout_us+0x50>)
 8007df6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfa:	099b      	lsrs	r3, r3, #6
 8007dfc:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8007dfe:	697b      	ldr	r3, [r7, #20]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3718      	adds	r7, #24
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	10624dd3 	.word	0x10624dd3

08007e0c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08c      	sub	sp, #48	; 0x30
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	460b      	mov	r3, r1
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8007e20:	2300      	movs	r3, #0
 8007e22:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007e32:	7afb      	ldrb	r3, [r7, #11]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d005      	beq.n	8007e44 <get_sequence_step_timeout+0x38>
 8007e38:	7afb      	ldrb	r3, [r7, #11]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d002      	beq.n	8007e44 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007e3e:	7afb      	ldrb	r3, [r7, #11]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d128      	bne.n	8007e96 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007e44:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007e48:	461a      	mov	r2, r3
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f7fd f9f3 	bl	8005238 <VL53L0X_GetVcselPulsePeriod>
 8007e52:	4603      	mov	r3, r0
 8007e54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8007e58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d109      	bne.n	8007e74 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8007e60:	f107 0320 	add.w	r3, r7, #32
 8007e64:	461a      	mov	r2, r3
 8007e66:	2146      	movs	r1, #70	; 0x46
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f001 fd39 	bl	80098e0 <VL53L0X_RdByte>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007e74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7ff ff5b 	bl	8007d36 <VL53L0X_decode_timeout>
 8007e80:	4603      	mov	r3, r0
 8007e82:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007e84:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007e88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f7ff ff93 	bl	8007db8 <VL53L0X_calc_timeout_us>
 8007e92:	62b8      	str	r0, [r7, #40]	; 0x28
 8007e94:	e092      	b.n	8007fbc <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007e96:	7afb      	ldrb	r3, [r7, #11]
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d135      	bne.n	8007f08 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007e9c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f7fd f9c7 	bl	8005238 <VL53L0X_GetVcselPulsePeriod>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007eb0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f040 8081 	bne.w	8007fbc <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007eba:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f7fd f9b8 	bl	8005238 <VL53L0X_GetVcselPulsePeriod>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8007ece:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d109      	bne.n	8007eea <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8007ed6:	f107 031e 	add.w	r3, r7, #30
 8007eda:	461a      	mov	r2, r3
 8007edc:	2151      	movs	r1, #81	; 0x51
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f001 fd28 	bl	8009934 <VL53L0X_RdWord>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007eea:	8bfb      	ldrh	r3, [r7, #30]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7ff ff22 	bl	8007d36 <VL53L0X_decode_timeout>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007ef6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007efa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007efc:	4619      	mov	r1, r3
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f7ff ff5a 	bl	8007db8 <VL53L0X_calc_timeout_us>
 8007f04:	62b8      	str	r0, [r7, #40]	; 0x28
 8007f06:	e059      	b.n	8007fbc <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007f08:	7afb      	ldrb	r3, [r7, #11]
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	d156      	bne.n	8007fbc <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007f0e:	f107 0314 	add.w	r3, r7, #20
 8007f12:	4619      	mov	r1, r3
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f7fd fa99 	bl	800544c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d01d      	beq.n	8007f60 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007f24:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007f28:	461a      	mov	r2, r3
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f7fd f983 	bl	8005238 <VL53L0X_GetVcselPulsePeriod>
 8007f32:	4603      	mov	r3, r0
 8007f34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS)
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007f38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10f      	bne.n	8007f60 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8007f40:	f107 031e 	add.w	r3, r7, #30
 8007f44:	461a      	mov	r2, r3
 8007f46:	2151      	movs	r1, #81	; 0x51
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f001 fcf3 	bl	8009934 <VL53L0X_RdWord>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007f54:	8bfb      	ldrh	r3, [r7, #30]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7ff feed 	bl	8007d36 <VL53L0X_decode_timeout>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007f60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d109      	bne.n	8007f7c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007f68:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	2101      	movs	r1, #1
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f7fd f961 	bl	8005238 <VL53L0X_GetVcselPulsePeriod>
 8007f76:	4603      	mov	r3, r0
 8007f78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007f7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10f      	bne.n	8007fa4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007f84:	f107 031c 	add.w	r3, r7, #28
 8007f88:	461a      	mov	r2, r3
 8007f8a:	2171      	movs	r1, #113	; 0x71
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f001 fcd1 	bl	8009934 <VL53L0X_RdWord>
 8007f92:	4603      	mov	r3, r0
 8007f94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
			    &FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007f98:	8bbb      	ldrh	r3, [r7, #28]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff fecb 	bl	8007d36 <VL53L0X_decode_timeout>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007fa4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007fa6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007fac:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007fb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f7ff feff 	bl	8007db8 <VL53L0X_calc_timeout_us>
 8007fba:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fc0:	601a      	str	r2, [r3, #0]

	return Status;
 8007fc2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3730      	adds	r7, #48	; 0x30
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b08a      	sub	sp, #40	; 0x28
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	60f8      	str	r0, [r7, #12]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	607a      	str	r2, [r7, #4]
 8007fda:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007fe2:	7afb      	ldrb	r3, [r7, #11]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d005      	beq.n	8007ff4 <set_sequence_step_timeout+0x26>
 8007fe8:	7afb      	ldrb	r3, [r7, #11]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d002      	beq.n	8007ff4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007fee:	7afb      	ldrb	r3, [r7, #11]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d138      	bne.n	8008066 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007ff4:	f107 031b 	add.w	r3, r7, #27
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f7fd f91b 	bl	8005238 <VL53L0X_GetVcselPulsePeriod>
 8008002:	4603      	mov	r3, r0
 8008004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8008008:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800800c:	2b00      	cmp	r3, #0
 800800e:	d11a      	bne.n	8008046 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8008010:	7efb      	ldrb	r3, [r7, #27]
 8008012:	461a      	mov	r2, r3
 8008014:	6879      	ldr	r1, [r7, #4]
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f7ff fea4 	bl	8007d64 <VL53L0X_calc_timeout_mclks>
 800801c:	4603      	mov	r3, r0
 800801e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8008020:	8bbb      	ldrh	r3, [r7, #28]
 8008022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008026:	d903      	bls.n	8008030 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8008028:	23ff      	movs	r3, #255	; 0xff
 800802a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800802e:	e004      	b.n	800803a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8008030:	8bbb      	ldrh	r3, [r7, #28]
 8008032:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8008034:	3b01      	subs	r3, #1
 8008036:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800803a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800803e:	b29a      	uxth	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008046:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800804a:	2b00      	cmp	r3, #0
 800804c:	f040 80ab 	bne.w	80081a6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8008050:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008054:	461a      	mov	r2, r3
 8008056:	2146      	movs	r1, #70	; 0x46
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f001 fbbf 	bl	80097dc <VL53L0X_WrByte>
 800805e:	4603      	mov	r3, r0
 8008060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8008064:	e09f      	b.n	80081a6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008066:	7afb      	ldrb	r3, [r7, #11]
 8008068:	2b03      	cmp	r3, #3
 800806a:	d135      	bne.n	80080d8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800806c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008070:	2b00      	cmp	r3, #0
 8008072:	d11b      	bne.n	80080ac <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008074:	f107 031b 	add.w	r3, r7, #27
 8008078:	461a      	mov	r2, r3
 800807a:	2100      	movs	r1, #0
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f7fd f8db 	bl	8005238 <VL53L0X_GetVcselPulsePeriod>
 8008082:	4603      	mov	r3, r0
 8008084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008088:	7efb      	ldrb	r3, [r7, #27]
 800808a:	461a      	mov	r2, r3
 800808c:	6879      	ldr	r1, [r7, #4]
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f7ff fe68 	bl	8007d64 <VL53L0X_calc_timeout_mclks>
 8008094:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8008096:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8008098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800809a:	4618      	mov	r0, r3
 800809c:	f7ff fe1f 	bl	8007cde <VL53L0X_encode_timeout>
 80080a0:	4603      	mov	r3, r0
 80080a2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80080a4:	8b3a      	ldrh	r2, [r7, #24]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80080ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d108      	bne.n	80080c6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80080b4:	8b3b      	ldrh	r3, [r7, #24]
 80080b6:	461a      	mov	r2, r3
 80080b8:	2151      	movs	r1, #81	; 0x51
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f001 fbb2 	bl	8009824 <VL53L0X_WrWord>
 80080c0:	4603      	mov	r3, r0
 80080c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80080c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d16b      	bne.n	80081a6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 80080d6:	e066      	b.n	80081a6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80080d8:	7afb      	ldrb	r3, [r7, #11]
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d160      	bne.n	80081a0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80080de:	f107 0310 	add.w	r3, r7, #16
 80080e2:	4619      	mov	r1, r3
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f7fd f9b1 	bl	800544c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 80080ee:	7cfb      	ldrb	r3, [r7, #19]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d01d      	beq.n	8008130 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80080f4:	f107 031b 	add.w	r3, r7, #27
 80080f8:	461a      	mov	r2, r3
 80080fa:	2100      	movs	r1, #0
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f7fd f89b 	bl	8005238 <VL53L0X_GetVcselPulsePeriod>
 8008102:	4603      	mov	r3, r0
 8008104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS)
				 */
				if (Status == VL53L0X_ERROR_NONE) {
 8008108:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10f      	bne.n	8008130 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8008110:	f107 0318 	add.w	r3, r7, #24
 8008114:	461a      	mov	r2, r3
 8008116:	2151      	movs	r1, #81	; 0x51
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f001 fc0b 	bl	8009934 <VL53L0X_RdWord>
 800811e:	4603      	mov	r3, r0
 8008120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8008124:	8b3b      	ldrh	r3, [r7, #24]
 8008126:	4618      	mov	r0, r3
 8008128:	f7ff fe05 	bl	8007d36 <VL53L0X_decode_timeout>
 800812c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800812e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008130:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008134:	2b00      	cmp	r3, #0
 8008136:	d109      	bne.n	800814c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008138:	f107 031b 	add.w	r3, r7, #27
 800813c:	461a      	mov	r2, r3
 800813e:	2101      	movs	r1, #1
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f7fd f879 	bl	8005238 <VL53L0X_GetVcselPulsePeriod>
 8008146:	4603      	mov	r3, r0
 8008148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					    VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					    &CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800814c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008150:	2b00      	cmp	r3, #0
 8008152:	d128      	bne.n	80081a6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008154:	7efb      	ldrb	r3, [r7, #27]
 8008156:	461a      	mov	r2, r3
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f7ff fe02 	bl	8007d64 <VL53L0X_calc_timeout_mclks>
 8008160:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8008162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008164:	6a3a      	ldr	r2, [r7, #32]
 8008166:	4413      	add	r3, r2
 8008168:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800816a:	6a38      	ldr	r0, [r7, #32]
 800816c:	f7ff fdb7 	bl	8007cde <VL53L0X_encode_timeout>
 8008170:	4603      	mov	r3, r0
 8008172:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8008174:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008178:	2b00      	cmp	r3, #0
 800817a:	d108      	bne.n	800818e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800817c:	8bfb      	ldrh	r3, [r7, #30]
 800817e:	461a      	mov	r2, r3
 8008180:	2171      	movs	r1, #113	; 0x71
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f001 fb4e 	bl	8009824 <VL53L0X_WrWord>
 8008188:	4603      	mov	r3, r0
 800818a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800818e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008192:	2b00      	cmp	r3, #0
 8008194:	d107      	bne.n	80081a6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800819e:	e002      	b.n	80081a6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80081a0:	23fc      	movs	r3, #252	; 0xfc
 80081a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80081a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3728      	adds	r7, #40	; 0x28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b08a      	sub	sp, #40	; 0x28
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	460b      	mov	r3, r1
 80081bc:	70fb      	strb	r3, [r7, #3]
 80081be:	4613      	mov	r3, r2
 80081c0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081c2:	2300      	movs	r3, #0
 80081c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80081c8:	230c      	movs	r3, #12
 80081ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80081ce:	2312      	movs	r3, #18
 80081d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80081d4:	2308      	movs	r3, #8
 80081d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 80081da:	230e      	movs	r3, #14
 80081dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80081e0:	2300      	movs	r3, #0
 80081e2:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80081e4:	78bb      	ldrb	r3, [r7, #2]
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d003      	beq.n	80081f8 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80081f0:	23fc      	movs	r3, #252	; 0xfc
 80081f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80081f6:	e020      	b.n	800823a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80081f8:	78fb      	ldrb	r3, [r7, #3]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10d      	bne.n	800821a <VL53L0X_set_vcsel_pulse_period+0x68>
 80081fe:	78ba      	ldrb	r2, [r7, #2]
 8008200:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008204:	429a      	cmp	r2, r3
 8008206:	d304      	bcc.n	8008212 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8008208:	78ba      	ldrb	r2, [r7, #2]
 800820a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800820e:	429a      	cmp	r2, r3
 8008210:	d903      	bls.n	800821a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008212:	23fc      	movs	r3, #252	; 0xfc
 8008214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008218:	e00f      	b.n	800823a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800821a:	78fb      	ldrb	r3, [r7, #3]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d10c      	bne.n	800823a <VL53L0X_set_vcsel_pulse_period+0x88>
 8008220:	78ba      	ldrb	r2, [r7, #2]
 8008222:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008226:	429a      	cmp	r2, r3
 8008228:	d304      	bcc.n	8008234 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800822a:	78ba      	ldrb	r2, [r7, #2]
 800822c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008230:	429a      	cmp	r2, r3
 8008232:	d902      	bls.n	800823a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008234:	23fc      	movs	r3, #252	; 0xfc
 8008236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800823a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800823e:	2b00      	cmp	r3, #0
 8008240:	d002      	beq.n	8008248 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8008242:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008246:	e237      	b.n	80086b8 <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8008248:	78fb      	ldrb	r3, [r7, #3]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d150      	bne.n	80082f0 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800824e:	78bb      	ldrb	r3, [r7, #2]
 8008250:	2b0c      	cmp	r3, #12
 8008252:	d110      	bne.n	8008276 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8008254:	2218      	movs	r2, #24
 8008256:	2157      	movs	r1, #87	; 0x57
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f001 fabf 	bl	80097dc <VL53L0X_WrByte>
 800825e:	4603      	mov	r3, r0
 8008260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8008264:	2208      	movs	r2, #8
 8008266:	2156      	movs	r1, #86	; 0x56
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f001 fab7 	bl	80097dc <VL53L0X_WrByte>
 800826e:	4603      	mov	r3, r0
 8008270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008274:	e17f      	b.n	8008576 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8008276:	78bb      	ldrb	r3, [r7, #2]
 8008278:	2b0e      	cmp	r3, #14
 800827a:	d110      	bne.n	800829e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800827c:	2230      	movs	r2, #48	; 0x30
 800827e:	2157      	movs	r1, #87	; 0x57
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f001 faab 	bl	80097dc <VL53L0X_WrByte>
 8008286:	4603      	mov	r3, r0
 8008288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800828c:	2208      	movs	r2, #8
 800828e:	2156      	movs	r1, #86	; 0x56
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 faa3 	bl	80097dc <VL53L0X_WrByte>
 8008296:	4603      	mov	r3, r0
 8008298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800829c:	e16b      	b.n	8008576 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800829e:	78bb      	ldrb	r3, [r7, #2]
 80082a0:	2b10      	cmp	r3, #16
 80082a2:	d110      	bne.n	80082c6 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80082a4:	2240      	movs	r2, #64	; 0x40
 80082a6:	2157      	movs	r1, #87	; 0x57
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 fa97 	bl	80097dc <VL53L0X_WrByte>
 80082ae:	4603      	mov	r3, r0
 80082b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80082b4:	2208      	movs	r2, #8
 80082b6:	2156      	movs	r1, #86	; 0x56
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f001 fa8f 	bl	80097dc <VL53L0X_WrByte>
 80082be:	4603      	mov	r3, r0
 80082c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082c4:	e157      	b.n	8008576 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80082c6:	78bb      	ldrb	r3, [r7, #2]
 80082c8:	2b12      	cmp	r3, #18
 80082ca:	f040 8154 	bne.w	8008576 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80082ce:	2250      	movs	r2, #80	; 0x50
 80082d0:	2157      	movs	r1, #87	; 0x57
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 fa82 	bl	80097dc <VL53L0X_WrByte>
 80082d8:	4603      	mov	r3, r0
 80082da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 80082de:	2208      	movs	r2, #8
 80082e0:	2156      	movs	r1, #86	; 0x56
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 fa7a 	bl	80097dc <VL53L0X_WrByte>
 80082e8:	4603      	mov	r3, r0
 80082ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082ee:	e142      	b.n	8008576 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80082f0:	78fb      	ldrb	r3, [r7, #3]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	f040 813f 	bne.w	8008576 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 80082f8:	78bb      	ldrb	r3, [r7, #2]
 80082fa:	2b08      	cmp	r3, #8
 80082fc:	d14c      	bne.n	8008398 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 80082fe:	2210      	movs	r2, #16
 8008300:	2148      	movs	r1, #72	; 0x48
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f001 fa6a 	bl	80097dc <VL53L0X_WrByte>
 8008308:	4603      	mov	r3, r0
 800830a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800830e:	2208      	movs	r2, #8
 8008310:	2147      	movs	r1, #71	; 0x47
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 fa62 	bl	80097dc <VL53L0X_WrByte>
 8008318:	4603      	mov	r3, r0
 800831a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800831e:	2202      	movs	r2, #2
 8008320:	2132      	movs	r1, #50	; 0x32
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f001 fa5a 	bl	80097dc <VL53L0X_WrByte>
 8008328:	4603      	mov	r3, r0
 800832a:	461a      	mov	r2, r3
 800832c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008330:	4313      	orrs	r3, r2
 8008332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8008336:	220c      	movs	r2, #12
 8008338:	2130      	movs	r1, #48	; 0x30
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 fa4e 	bl	80097dc <VL53L0X_WrByte>
 8008340:	4603      	mov	r3, r0
 8008342:	461a      	mov	r2, r3
 8008344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008348:	4313      	orrs	r3, r2
 800834a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800834e:	2201      	movs	r2, #1
 8008350:	21ff      	movs	r1, #255	; 0xff
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 fa42 	bl	80097dc <VL53L0X_WrByte>
 8008358:	4603      	mov	r3, r0
 800835a:	461a      	mov	r2, r3
 800835c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008360:	4313      	orrs	r3, r2
 8008362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008366:	2230      	movs	r2, #48	; 0x30
 8008368:	2130      	movs	r1, #48	; 0x30
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f001 fa36 	bl	80097dc <VL53L0X_WrByte>
 8008370:	4603      	mov	r3, r0
 8008372:	461a      	mov	r2, r3
 8008374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008378:	4313      	orrs	r3, r2
 800837a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800837e:	2200      	movs	r2, #0
 8008380:	21ff      	movs	r1, #255	; 0xff
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f001 fa2a 	bl	80097dc <VL53L0X_WrByte>
 8008388:	4603      	mov	r3, r0
 800838a:	461a      	mov	r2, r3
 800838c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008390:	4313      	orrs	r3, r2
 8008392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008396:	e0ee      	b.n	8008576 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8008398:	78bb      	ldrb	r3, [r7, #2]
 800839a:	2b0a      	cmp	r3, #10
 800839c:	d14c      	bne.n	8008438 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800839e:	2228      	movs	r2, #40	; 0x28
 80083a0:	2148      	movs	r1, #72	; 0x48
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f001 fa1a 	bl	80097dc <VL53L0X_WrByte>
 80083a8:	4603      	mov	r3, r0
 80083aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80083ae:	2208      	movs	r2, #8
 80083b0:	2147      	movs	r1, #71	; 0x47
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 fa12 	bl	80097dc <VL53L0X_WrByte>
 80083b8:	4603      	mov	r3, r0
 80083ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80083be:	2203      	movs	r2, #3
 80083c0:	2132      	movs	r1, #50	; 0x32
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f001 fa0a 	bl	80097dc <VL53L0X_WrByte>
 80083c8:	4603      	mov	r3, r0
 80083ca:	461a      	mov	r2, r3
 80083cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083d0:	4313      	orrs	r3, r2
 80083d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80083d6:	2209      	movs	r2, #9
 80083d8:	2130      	movs	r1, #48	; 0x30
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f001 f9fe 	bl	80097dc <VL53L0X_WrByte>
 80083e0:	4603      	mov	r3, r0
 80083e2:	461a      	mov	r2, r3
 80083e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083e8:	4313      	orrs	r3, r2
 80083ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80083ee:	2201      	movs	r2, #1
 80083f0:	21ff      	movs	r1, #255	; 0xff
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f001 f9f2 	bl	80097dc <VL53L0X_WrByte>
 80083f8:	4603      	mov	r3, r0
 80083fa:	461a      	mov	r2, r3
 80083fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008400:	4313      	orrs	r3, r2
 8008402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008406:	2220      	movs	r2, #32
 8008408:	2130      	movs	r1, #48	; 0x30
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f001 f9e6 	bl	80097dc <VL53L0X_WrByte>
 8008410:	4603      	mov	r3, r0
 8008412:	461a      	mov	r2, r3
 8008414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008418:	4313      	orrs	r3, r2
 800841a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800841e:	2200      	movs	r2, #0
 8008420:	21ff      	movs	r1, #255	; 0xff
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f001 f9da 	bl	80097dc <VL53L0X_WrByte>
 8008428:	4603      	mov	r3, r0
 800842a:	461a      	mov	r2, r3
 800842c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008430:	4313      	orrs	r3, r2
 8008432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008436:	e09e      	b.n	8008576 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8008438:	78bb      	ldrb	r3, [r7, #2]
 800843a:	2b0c      	cmp	r3, #12
 800843c:	d14c      	bne.n	80084d8 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800843e:	2238      	movs	r2, #56	; 0x38
 8008440:	2148      	movs	r1, #72	; 0x48
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f001 f9ca 	bl	80097dc <VL53L0X_WrByte>
 8008448:	4603      	mov	r3, r0
 800844a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800844e:	2208      	movs	r2, #8
 8008450:	2147      	movs	r1, #71	; 0x47
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f001 f9c2 	bl	80097dc <VL53L0X_WrByte>
 8008458:	4603      	mov	r3, r0
 800845a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800845e:	2203      	movs	r2, #3
 8008460:	2132      	movs	r1, #50	; 0x32
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f001 f9ba 	bl	80097dc <VL53L0X_WrByte>
 8008468:	4603      	mov	r3, r0
 800846a:	461a      	mov	r2, r3
 800846c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008470:	4313      	orrs	r3, r2
 8008472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8008476:	2208      	movs	r2, #8
 8008478:	2130      	movs	r1, #48	; 0x30
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f001 f9ae 	bl	80097dc <VL53L0X_WrByte>
 8008480:	4603      	mov	r3, r0
 8008482:	461a      	mov	r2, r3
 8008484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008488:	4313      	orrs	r3, r2
 800848a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800848e:	2201      	movs	r2, #1
 8008490:	21ff      	movs	r1, #255	; 0xff
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 f9a2 	bl	80097dc <VL53L0X_WrByte>
 8008498:	4603      	mov	r3, r0
 800849a:	461a      	mov	r2, r3
 800849c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084a0:	4313      	orrs	r3, r2
 80084a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80084a6:	2220      	movs	r2, #32
 80084a8:	2130      	movs	r1, #48	; 0x30
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f001 f996 	bl	80097dc <VL53L0X_WrByte>
 80084b0:	4603      	mov	r3, r0
 80084b2:	461a      	mov	r2, r3
 80084b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084b8:	4313      	orrs	r3, r2
 80084ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80084be:	2200      	movs	r2, #0
 80084c0:	21ff      	movs	r1, #255	; 0xff
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f001 f98a 	bl	80097dc <VL53L0X_WrByte>
 80084c8:	4603      	mov	r3, r0
 80084ca:	461a      	mov	r2, r3
 80084cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084d0:	4313      	orrs	r3, r2
 80084d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80084d6:	e04e      	b.n	8008576 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80084d8:	78bb      	ldrb	r3, [r7, #2]
 80084da:	2b0e      	cmp	r3, #14
 80084dc:	d14b      	bne.n	8008576 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80084de:	2248      	movs	r2, #72	; 0x48
 80084e0:	2148      	movs	r1, #72	; 0x48
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f001 f97a 	bl	80097dc <VL53L0X_WrByte>
 80084e8:	4603      	mov	r3, r0
 80084ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 80084ee:	2208      	movs	r2, #8
 80084f0:	2147      	movs	r1, #71	; 0x47
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f001 f972 	bl	80097dc <VL53L0X_WrByte>
 80084f8:	4603      	mov	r3, r0
 80084fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80084fe:	2203      	movs	r2, #3
 8008500:	2132      	movs	r1, #50	; 0x32
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f001 f96a 	bl	80097dc <VL53L0X_WrByte>
 8008508:	4603      	mov	r3, r0
 800850a:	461a      	mov	r2, r3
 800850c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008510:	4313      	orrs	r3, r2
 8008512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8008516:	2207      	movs	r2, #7
 8008518:	2130      	movs	r1, #48	; 0x30
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f001 f95e 	bl	80097dc <VL53L0X_WrByte>
 8008520:	4603      	mov	r3, r0
 8008522:	461a      	mov	r2, r3
 8008524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008528:	4313      	orrs	r3, r2
 800852a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800852e:	2201      	movs	r2, #1
 8008530:	21ff      	movs	r1, #255	; 0xff
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f001 f952 	bl	80097dc <VL53L0X_WrByte>
 8008538:	4603      	mov	r3, r0
 800853a:	461a      	mov	r2, r3
 800853c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008540:	4313      	orrs	r3, r2
 8008542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008546:	2220      	movs	r2, #32
 8008548:	2130      	movs	r1, #48	; 0x30
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f001 f946 	bl	80097dc <VL53L0X_WrByte>
 8008550:	4603      	mov	r3, r0
 8008552:	461a      	mov	r2, r3
 8008554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008558:	4313      	orrs	r3, r2
 800855a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800855e:	2200      	movs	r2, #0
 8008560:	21ff      	movs	r1, #255	; 0xff
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f001 f93a 	bl	80097dc <VL53L0X_WrByte>
 8008568:	4603      	mov	r3, r0
 800856a:	461a      	mov	r2, r3
 800856c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008570:	4313      	orrs	r3, r2
 8008572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8008576:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800857a:	2b00      	cmp	r3, #0
 800857c:	d17e      	bne.n	800867c <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800857e:	78bb      	ldrb	r3, [r7, #2]
 8008580:	4618      	mov	r0, r3
 8008582:	f7fe fe36 	bl	80071f2 <VL53L0X_encode_vcsel_period>
 8008586:	4603      	mov	r3, r0
 8008588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800858c:	78fb      	ldrb	r3, [r7, #3]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8008592:	2b01      	cmp	r3, #1
 8008594:	d045      	beq.n	8008622 <VL53L0X_set_vcsel_pulse_period+0x470>
 8008596:	e06e      	b.n	8008676 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8008598:	f107 0314 	add.w	r3, r7, #20
 800859c:	461a      	mov	r2, r3
 800859e:	2103      	movs	r1, #3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7ff fc33 	bl	8007e0c <get_sequence_step_timeout>
 80085a6:	4603      	mov	r3, r0
 80085a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80085ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d109      	bne.n	80085c8 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80085b4:	f107 0310 	add.w	r3, r7, #16
 80085b8:	461a      	mov	r2, r3
 80085ba:	2102      	movs	r1, #2
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7ff fc25 	bl	8007e0c <get_sequence_step_timeout>
 80085c2:	4603      	mov	r3, r0
 80085c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80085c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d109      	bne.n	80085e4 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 80085d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80085d4:	461a      	mov	r2, r3
 80085d6:	2150      	movs	r1, #80	; 0x50
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f001 f8ff 	bl	80097dc <VL53L0X_WrByte>
 80085de:	4603      	mov	r3, r0
 80085e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80085e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d108      	bne.n	80085fe <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	461a      	mov	r2, r3
 80085f0:	2103      	movs	r1, #3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7ff fceb 	bl	8007fce <set_sequence_step_timeout>
 80085f8:	4603      	mov	r3, r0
 80085fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 80085fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008602:	2b00      	cmp	r3, #0
 8008604:	d108      	bne.n	8008618 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	461a      	mov	r2, r3
 800860a:	2102      	movs	r1, #2
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7ff fcde 	bl	8007fce <set_sequence_step_timeout>
 8008612:	4603      	mov	r3, r0
 8008614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	78ba      	ldrb	r2, [r7, #2]
 800861c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8008620:	e02c      	b.n	800867c <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8008622:	f107 0318 	add.w	r3, r7, #24
 8008626:	461a      	mov	r2, r3
 8008628:	2104      	movs	r1, #4
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7ff fbee 	bl	8007e0c <get_sequence_step_timeout>
 8008630:	4603      	mov	r3, r0
 8008632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008636:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800863a:	2b00      	cmp	r3, #0
 800863c:	d109      	bne.n	8008652 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800863e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008642:	461a      	mov	r2, r3
 8008644:	2170      	movs	r1, #112	; 0x70
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f001 f8c8 	bl	80097dc <VL53L0X_WrByte>
 800864c:	4603      	mov	r3, r0
 800864e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8008652:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008656:	2b00      	cmp	r3, #0
 8008658:	d108      	bne.n	800866c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	461a      	mov	r2, r3
 800865e:	2104      	movs	r1, #4
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7ff fcb4 	bl	8007fce <set_sequence_step_timeout>
 8008666:	4603      	mov	r3, r0
 8008668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	78ba      	ldrb	r2, [r7, #2]
 8008670:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8008674:	e002      	b.n	800867c <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008676:	23fc      	movs	r3, #252	; 0xfc
 8008678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800867c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008680:	2b00      	cmp	r3, #0
 8008682:	d109      	bne.n	8008698 <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800868a:	69f9      	ldr	r1, [r7, #28]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7fc fd95 	bl	80051bc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8008692:	4603      	mov	r3, r0
 8008694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008698:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800869c:	2b00      	cmp	r3, #0
 800869e:	d109      	bne.n	80086b4 <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 80086a0:	f107 010f 	add.w	r1, r7, #15
 80086a4:	2301      	movs	r3, #1
 80086a6:	2200      	movs	r2, #0
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7fe fcbd 	bl	8007028 <VL53L0X_perform_phase_calibration>
 80086ae:	4603      	mov	r3, r0
 80086b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80086b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3728      	adds	r7, #40	; 0x28
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	460b      	mov	r3, r1
 80086ca:	607a      	str	r2, [r7, #4]
 80086cc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086ce:	2300      	movs	r3, #0
 80086d0:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80086d2:	7afb      	ldrb	r3, [r7, #11]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <VL53L0X_get_vcsel_pulse_period+0x1e>
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d00a      	beq.n	80086f2 <VL53L0X_get_vcsel_pulse_period+0x32>
 80086dc:	e013      	b.n	8008706 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80086de:	f107 0316 	add.w	r3, r7, #22
 80086e2:	461a      	mov	r2, r3
 80086e4:	2150      	movs	r1, #80	; 0x50
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f001 f8fa 	bl	80098e0 <VL53L0X_RdByte>
 80086ec:	4603      	mov	r3, r0
 80086ee:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80086f0:	e00b      	b.n	800870a <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80086f2:	f107 0316 	add.w	r3, r7, #22
 80086f6:	461a      	mov	r2, r3
 80086f8:	2170      	movs	r1, #112	; 0x70
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f001 f8f0 	bl	80098e0 <VL53L0X_RdByte>
 8008700:	4603      	mov	r3, r0
 8008702:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008704:	e001      	b.n	800870a <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008706:	23fc      	movs	r3, #252	; 0xfc
 8008708:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800870a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d107      	bne.n	8008722 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8008712:	7dbb      	ldrb	r3, [r7, #22]
 8008714:	4618      	mov	r0, r3
 8008716:	f7fe fd59 	bl	80071cc <VL53L0X_decode_vcsel_period>
 800871a:	4603      	mov	r3, r0
 800871c:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	701a      	strb	r2, [r3, #0]

	return Status;
 8008722:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3718      	adds	r7, #24
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <VL53L0X_set_measurement_timing_budget_micro_seconds>:


VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b090      	sub	sp, #64	; 0x40
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008738:	2300      	movs	r3, #0
 800873a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800873e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008742:	60fb      	str	r3, [r7, #12]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008744:	f240 7376 	movw	r3, #1910	; 0x776
 8008748:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t EndOverheadMicroSeconds		= 960;
 800874a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800874e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008750:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008754:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t TccOverheadMicroSeconds		= 590;
 8008756:	f240 234e 	movw	r3, #590	; 0x24e
 800875a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t DssOverheadMicroSeconds		= 690;
 800875c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008760:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008762:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008766:	623b      	str	r3, [r7, #32]
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008768:	f240 2326 	movw	r3, #550	; 0x226
 800876c:	61fb      	str	r3, [r7, #28]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800876e:	2300      	movs	r3, #0
 8008770:	60bb      	str	r3, [r7, #8]
	uint32_t SubTimeout = 0;
 8008772:	2300      	movs	r3, #0
 8008774:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8008776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877a:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	63bb      	str	r3, [r7, #56]	; 0x38

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008782:	f107 0310 	add.w	r3, r7, #16
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7fc fe5f 	bl	800544c <VL53L0X_GetSequenceStepEnables>
 800878e:	4603      	mov	r3, r0
 8008790:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE &&
 8008794:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008798:	2b00      	cmp	r3, #0
 800879a:	d15b      	bne.n	8008854 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
		(SchedulerSequenceSteps.TccOn  ||
 800879c:	7c3b      	ldrb	r3, [r7, #16]
	if (Status == VL53L0X_ERROR_NONE &&
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d105      	bne.n	80087ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80087a2:	7c7b      	ldrb	r3, [r7, #17]
		(SchedulerSequenceSteps.TccOn  ||
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d102      	bne.n	80087ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn)) {
 80087a8:	7cbb      	ldrb	r3, [r7, #18]
		SchedulerSequenceSteps.MsrcOn ||
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d052      	beq.n	8008854 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80087ae:	f107 030c 	add.w	r3, r7, #12
 80087b2:	461a      	mov	r2, r3
 80087b4:	2102      	movs	r1, #2
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7ff fb28 	bl	8007e0c <get_sequence_step_timeout>
 80087bc:	4603      	mov	r3, r0
 80087be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled.
		 */

		if (Status != VL53L0X_ERROR_NONE)
 80087c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d002      	beq.n	80087d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
			return Status;
 80087ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80087ce:	e07d      	b.n	80088cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80087d0:	7c3b      	ldrb	r3, [r7, #16]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00f      	beq.n	80087f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80087d6:	68fb      	ldr	r3, [r7, #12]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80087d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087da:	4413      	add	r3, r2
 80087dc:	61bb      	str	r3, [r7, #24]

			if (SubTimeout <
 80087de:	69ba      	ldr	r2, [r7, #24]
 80087e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d204      	bcs.n	80087f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 80087e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80087ee:	e002      	b.n	80087f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80087f0:	23fc      	movs	r3, #252	; 0xfc
 80087f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 80087f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d002      	beq.n	8008804 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd6>
			LOG_FUNCTION_END(Status);
			return Status;
 80087fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008802:	e063      	b.n	80088cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8008804:	7cbb      	ldrb	r3, [r7, #18]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d011      	beq.n	800882e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x100>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	4413      	add	r3, r2
 8008810:	005b      	lsls	r3, r3, #1
 8008812:	61bb      	str	r3, [r7, #24]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008814:	69ba      	ldr	r2, [r7, #24]
 8008816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008818:	429a      	cmp	r2, r3
 800881a:	d204      	bcs.n	8008826 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf8>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800881c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	63bb      	str	r3, [r7, #56]	; 0x38
 8008824:	e016      	b.n	8008854 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008826:	23fc      	movs	r3, #252	; 0xfc
 8008828:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800882c:	e012      	b.n	8008854 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800882e:	7c7b      	ldrb	r3, [r7, #17]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00f      	beq.n	8008854 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008838:	4413      	add	r3, r2
 800883a:	61bb      	str	r3, [r7, #24]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800883c:	69ba      	ldr	r2, [r7, #24]
 800883e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008840:	429a      	cmp	r2, r3
 8008842:	d204      	bcs.n	800884e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x120>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	63bb      	str	r3, [r7, #56]	; 0x38
 800884c:	e002      	b.n	8008854 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800884e:	23fc      	movs	r3, #252	; 0xfc
 8008850:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008854:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x134>
		LOG_FUNCTION_END(Status);
		return Status;
 800885c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008860:	e034      	b.n	80088cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8008862:	7cfb      	ldrb	r3, [r7, #19]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d019      	beq.n	800889c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8008868:	f107 0308 	add.w	r3, r7, #8
 800886c:	461a      	mov	r2, r3
 800886e:	2103      	movs	r1, #3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff facb 	bl	8007e0c <get_sequence_step_timeout>
 8008876:	4603      	mov	r3, r0
 8008878:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	6a3a      	ldr	r2, [r7, #32]
 8008880:	4413      	add	r3, r2
 8008882:	61bb      	str	r3, [r7, #24]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008884:	69ba      	ldr	r2, [r7, #24]
 8008886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008888:	429a      	cmp	r2, r3
 800888a:	d204      	bcs.n	8008896 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x168>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800888c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	63bb      	str	r3, [r7, #56]	; 0x38
 8008894:	e002      	b.n	800889c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008896:	23fc      	movs	r3, #252	; 0xfc
 8008898:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800889c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d111      	bne.n	80088c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>
		SchedulerSequenceSteps.FinalRangeOn) {
 80088a4:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00e      	beq.n	80088c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>

		FinalRangeTimingBudgetMicroSeconds -=
 80088aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	63bb      	str	r3, [r7, #56]	; 0x38
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an
		 * error will be set. Otherwise the remaining time will be
		 * applied to the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80088b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088b4:	2104      	movs	r1, #4
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7ff fb89 	bl	8007fce <set_sequence_step_timeout>
 80088bc:	4603      	mov	r3, r0
 80088be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80088c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3740      	adds	r7, #64	; 0x40
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b090      	sub	sp, #64	; 0x40
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088de:	2300      	movs	r3, #0
 80088e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80088e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80088e8:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80088ea:	f240 7376 	movw	r3, #1910	; 0x776
 80088ee:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 80088f0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80088f4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80088f6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80088fa:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 80088fc:	f240 234e 	movw	r3, #590	; 0x24e
 8008900:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8008902:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008906:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008908:	f44f 7325 	mov.w	r3, #660	; 0x294
 800890c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800890e:	f240 2326 	movw	r3, #550	; 0x226
 8008912:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008914:	2300      	movs	r3, #0
 8008916:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8008918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800891a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891c:	441a      	add	r2, r3
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008922:	f107 0318 	add.w	r3, r7, #24
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7fc fd8f 	bl	800544c <VL53L0X_GetSequenceStepEnables>
 800892e:	4603      	mov	r3, r0
 8008930:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008934:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800893c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008940:	e075      	b.n	8008a2e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8008942:	7e3b      	ldrb	r3, [r7, #24]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d105      	bne.n	8008954 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8008948:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800894a:	2b00      	cmp	r3, #0
 800894c:	d102      	bne.n	8008954 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800894e:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8008950:	2b00      	cmp	r3, #0
 8008952:	d030      	beq.n	80089b6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8008954:	f107 0310 	add.w	r3, r7, #16
 8008958:	461a      	mov	r2, r3
 800895a:	2102      	movs	r1, #2
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7ff fa55 	bl	8007e0c <get_sequence_step_timeout>
 8008962:	4603      	mov	r3, r0
 8008964:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8008968:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800896c:	2b00      	cmp	r3, #0
 800896e:	d122      	bne.n	80089b6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8008970:	7e3b      	ldrb	r3, [r7, #24]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d007      	beq.n	8008986 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800897a:	6939      	ldr	r1, [r7, #16]
 800897c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897e:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008980:	441a      	add	r2, r3
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8008986:	7ebb      	ldrb	r3, [r7, #26]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d009      	beq.n	80089a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8008990:	6939      	ldr	r1, [r7, #16]
 8008992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008994:	440b      	add	r3, r1
 8008996:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008998:	441a      	add	r2, r3
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	601a      	str	r2, [r3, #0]
 800899e:	e00a      	b.n	80089b6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80089a0:	7e7b      	ldrb	r3, [r7, #25]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d007      	beq.n	80089b6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80089aa:	6939      	ldr	r1, [r7, #16]
 80089ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ae:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80089b0:	441a      	add	r2, r3
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80089b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d114      	bne.n	80089e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80089be:	7efb      	ldrb	r3, [r7, #27]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d011      	beq.n	80089e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80089c4:	f107 030c 	add.w	r3, r7, #12
 80089c8:	461a      	mov	r2, r3
 80089ca:	2103      	movs	r1, #3
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7ff fa1d 	bl	8007e0c <get_sequence_step_timeout>
 80089d2:	4603      	mov	r3, r0
 80089d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80089dc:	68f9      	ldr	r1, [r7, #12]
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80089e2:	441a      	add	r2, r3
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80089e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d114      	bne.n	8008a1a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80089f0:	7f3b      	ldrb	r3, [r7, #28]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d011      	beq.n	8008a1a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80089f6:	f107 0314 	add.w	r3, r7, #20
 80089fa:	461a      	mov	r2, r3
 80089fc:	2104      	movs	r1, #4
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7ff fa04 	bl	8007e0c <get_sequence_step_timeout>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8008a0e:	6979      	ldr	r1, [r7, #20]
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008a14:	441a      	add	r2, r3
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008a1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d103      	bne.n	8008a2a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a2a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3740      	adds	r7, #64	; 0x40
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
	...

08008a38 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b088      	sub	sp, #32
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a42:	2300      	movs	r3, #0
 8008a44:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008a4a:	e0c6      	b.n	8008bda <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	4413      	add	r3, r2
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	74fb      	strb	r3, [r7, #19]
		Index++;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8008a5c:	7cfb      	ldrb	r3, [r7, #19]
 8008a5e:	2bff      	cmp	r3, #255	; 0xff
 8008a60:	f040 808d 	bne.w	8008b7e <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	4413      	add	r3, r2
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	747b      	strb	r3, [r7, #17]
			Index++;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	3301      	adds	r3, #1
 8008a72:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8008a74:	7c7b      	ldrb	r3, [r7, #17]
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d87e      	bhi.n	8008b78 <VL53L0X_load_tuning_settings+0x140>
 8008a7a:	a201      	add	r2, pc, #4	; (adr r2, 8008a80 <VL53L0X_load_tuning_settings+0x48>)
 8008a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a80:	08008a91 	.word	0x08008a91
 8008a84:	08008acb 	.word	0x08008acb
 8008a88:	08008b05 	.word	0x08008b05
 8008a8c:	08008b3f 	.word	0x08008b3f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	4413      	add	r3, r2
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	743b      	strb	r3, [r7, #16]
				Index++;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	3301      	adds	r3, #1
 8008aae:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008ab0:	7c3b      	ldrb	r3, [r7, #16]
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	021b      	lsls	r3, r3, #8
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	4413      	add	r3, r2
 8008abe:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	89ba      	ldrh	r2, [r7, #12]
 8008ac4:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
				break;
 8008ac8:	e087      	b.n	8008bda <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	4413      	add	r3, r2
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	743b      	strb	r3, [r7, #16]
				Index++;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	4413      	add	r3, r2
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008aea:	7c3b      	ldrb	r3, [r7, #16]
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	021b      	lsls	r3, r3, #8
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	4413      	add	r3, r2
 8008af8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	89ba      	ldrh	r2, [r7, #12]
 8008afe:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
					Temp16);
				break;
 8008b02:	e06a      	b.n	8008bda <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	4413      	add	r3, r2
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	743b      	strb	r3, [r7, #16]
				Index++;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	3301      	adds	r3, #1
 8008b12:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	4413      	add	r3, r2
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	3301      	adds	r3, #1
 8008b22:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008b24:	7c3b      	ldrb	r3, [r7, #16]
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	4413      	add	r3, r2
 8008b32:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	89ba      	ldrh	r2, [r7, #12]
 8008b38:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
				break;
 8008b3c:	e04d      	b.n	8008bda <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	4413      	add	r3, r2
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	743b      	strb	r3, [r7, #16]
				Index++;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	683a      	ldr	r2, [r7, #0]
 8008b52:	4413      	add	r3, r2
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008b5e:	7c3b      	ldrb	r3, [r7, #16]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	021b      	lsls	r3, r3, #8
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	4413      	add	r3, r2
 8008b6c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	89ba      	ldrh	r2, [r7, #12]
 8008b72:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
				break;
 8008b76:	e030      	b.n	8008bda <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b78:	23fc      	movs	r3, #252	; 0xfc
 8008b7a:	77fb      	strb	r3, [r7, #31]
 8008b7c:	e02d      	b.n	8008bda <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8008b7e:	7cfb      	ldrb	r3, [r7, #19]
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	d828      	bhi.n	8008bd6 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	4413      	add	r3, r2
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	74bb      	strb	r3, [r7, #18]
			Index++;
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	3301      	adds	r3, #1
 8008b92:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8008b94:	2300      	movs	r3, #0
 8008b96:	61bb      	str	r3, [r7, #24]
 8008b98:	e00f      	b.n	8008bba <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	7819      	ldrb	r1, [r3, #0]
 8008ba2:	f107 0208 	add.w	r2, r7, #8
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	4413      	add	r3, r2
 8008baa:	460a      	mov	r2, r1
 8008bac:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	61bb      	str	r3, [r7, #24]
 8008bba:	7cfb      	ldrb	r3, [r7, #19]
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	dbeb      	blt.n	8008b9a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8008bc2:	7cfb      	ldrb	r3, [r7, #19]
 8008bc4:	f107 0208 	add.w	r2, r7, #8
 8008bc8:	7cb9      	ldrb	r1, [r7, #18]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fdaa 	bl	8009724 <VL53L0X_WriteMulti>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	77fb      	strb	r3, [r7, #31]
 8008bd4:	e001      	b.n	8008bda <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008bd6:	23fc      	movs	r3, #252	; 0xfc
 8008bd8:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	4413      	add	r3, r2
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d004      	beq.n	8008bf0 <VL53L0X_load_tuning_settings+0x1b8>
 8008be6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f43f af2e 	beq.w	8008a4c <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008bf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3720      	adds	r7, #32
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8008c12:	f107 0313 	add.w	r3, r7, #19
 8008c16:	4619      	mov	r1, r3
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f7fc fca3 	bl	8005564 <VL53L0X_GetXTalkCompensationEnable>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8008c22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d111      	bne.n	8008c4e <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8008c2a:	7cfb      	ldrb	r3, [r7, #19]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00e      	beq.n	8008c4e <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	8a9b      	ldrh	r3, [r3, #20]
 8008c3a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	fb02 f303 	mul.w	r3, r2, r3
 8008c42:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	3380      	adds	r3, #128	; 0x80
 8008c48:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8008c4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3720      	adds	r7, #32
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b086      	sub	sp, #24
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	60f8      	str	r0, [r7, #12]
 8008c62:	60b9      	str	r1, [r7, #8]
 8008c64:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c66:	2300      	movs	r3, #0
 8008c68:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8008c72:	f107 0310 	add.w	r3, r7, #16
 8008c76:	461a      	mov	r2, r3
 8008c78:	68b9      	ldr	r1, [r7, #8]
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f7ff ffbe 	bl	8008bfc <VL53L0X_get_total_xtalk_rate>
 8008c80:	4603      	mov	r3, r0
 8008c82:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8008c84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d105      	bne.n	8008c98 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	441a      	add	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	601a      	str	r2, [r3, #0]

	return Status;
 8008c98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <get_dmax_lut_points>:

VL53L0X_Error get_dmax_lut_points(VL53L0X_DMaxLUT_t data, uint32_t lut_size,
	FixPoint1616_t input, int32_t *index0,	int32_t *index1){
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	b480      	push	{r7}
 8008ca8:	b085      	sub	sp, #20
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	f107 0c18 	add.w	ip, r7, #24
 8008cb0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	70fb      	strb	r3, [r7, #3]
	FixPoint1616_t index0_tmp = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t index1_tmp = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60bb      	str	r3, [r7, #8]
	int index = 0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	607b      	str	r3, [r7, #4]

	for (index = 0; index < lut_size; index++) {
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	607b      	str	r3, [r7, #4]
 8008cc8:	e00d      	b.n	8008ce6 <get_dmax_lut_points+0x42>
		if (input <= data.ambRate_mcps[index]) {
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f107 0218 	add.w	r2, r7, #24
 8008cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d802      	bhi.n	8008ce0 <get_dmax_lut_points+0x3c>
			index1_tmp = index;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	60bb      	str	r3, [r7, #8]
			break;
 8008cde:	e006      	b.n	8008cee <get_dmax_lut_points+0x4a>
	for (index = 0; index < lut_size; index++) {
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	607b      	str	r3, [r7, #4]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d8ed      	bhi.n	8008cca <get_dmax_lut_points+0x26>
		}
	}

	if (index == lut_size) {
 8008cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d105      	bne.n	8008d02 <get_dmax_lut_points+0x5e>
		/* input is higher than last x point */
		index0_tmp = index1_tmp = lut_size - 1;
 8008cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	60bb      	str	r3, [r7, #8]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	60fb      	str	r3, [r7, #12]
 8008d00:	e008      	b.n	8008d14 <get_dmax_lut_points+0x70>
	} else if (index1_tmp == 0) {
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d102      	bne.n	8008d0e <get_dmax_lut_points+0x6a>
		/* input is lower than first x point */
		index0_tmp = 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	60fb      	str	r3, [r7, #12]
 8008d0c:	e002      	b.n	8008d14 <get_dmax_lut_points+0x70>
	} else{
		/* input is in between 2 points */
		index0_tmp = index1_tmp - 1;
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	3b01      	subs	r3, #1
 8008d12:	60fb      	str	r3, [r7, #12]
	}

	*index0 = index0_tmp;
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d18:	601a      	str	r2, [r3, #0]
	*index1 = index1_tmp;
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d1e:	601a      	str	r2, [r3, #0]

	return Status;
 8008d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3714      	adds	r7, #20
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	b004      	add	sp, #16
 8008d30:	4770      	bx	lr

08008d32 <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(
	VL53L0X_DEV Dev, FixPoint1616_t ambRateMeas, uint32_t *pdmax_mm){
 8008d32:	b5b0      	push	{r4, r5, r7, lr}
 8008d34:	b0ba      	sub	sp, #232	; 0xe8
 8008d36:	af0e      	add	r7, sp, #56	; 0x38
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	VL53L0X_DeviceParameters_t CurrentParameters;
	int32_t index0 = 0;
 8008d44:	2300      	movs	r3, #0
 8008d46:	61bb      	str	r3, [r7, #24]
	int32_t index1 = 0;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	617b      	str	r3, [r7, #20]
	FixPoint1616_t dmax_mm;
	FixPoint1616_t linearSlope;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8008d4c:	f107 031c 	add.w	r3, r7, #28
 8008d50:	4619      	mov	r1, r3
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f7fc f91e 	bl	8004f94 <VL53L0X_GetDeviceParameters>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	if (ambRateMeas <= CurrentParameters.dmax_lut.ambRate_mcps[0]) {
 8008d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d803      	bhi.n	8008d6e <VL53L0X_calc_dmax+0x3c>
		dmax_mm = CurrentParameters.dmax_lut.dmax_mm[0];
 8008d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d6c:	e07c      	b.n	8008e68 <VL53L0X_calc_dmax+0x136>
	} else if (ambRateMeas >=
		   CurrentParameters.dmax_lut.
		   ambRate_mcps[VL53L0X_DMAX_LUT_SIZE - 1]) {
 8008d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	} else if (ambRateMeas >=
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d304      	bcc.n	8008d80 <VL53L0X_calc_dmax+0x4e>
		dmax_mm =
 8008d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d7e:	e073      	b.n	8008e68 <VL53L0X_calc_dmax+0x136>
		    CurrentParameters.dmax_lut.dmax_mm[VL53L0X_DMAX_LUT_SIZE -
						       1];
	} else{
		get_dmax_lut_points(CurrentParameters.dmax_lut,
 8008d80:	f107 0314 	add.w	r3, r7, #20
 8008d84:	930d      	str	r3, [sp, #52]	; 0x34
 8008d86:	f107 0318 	add.w	r3, r7, #24
 8008d8a:	930c      	str	r3, [sp, #48]	; 0x30
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d90:	2307      	movs	r3, #7
 8008d92:	930a      	str	r3, [sp, #40]	; 0x28
 8008d94:	466d      	mov	r5, sp
 8008d96:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8008d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008da2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008da6:	e885 0003 	stmia.w	r5, {r0, r1}
 8008daa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008dae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008db0:	f7ff ff78 	bl	8008ca4 <get_dmax_lut_points>
			VL53L0X_DMAX_LUT_SIZE, ambRateMeas, &index0, &index1);

		if (index0 == index1) {
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d109      	bne.n	8008dd0 <VL53L0X_calc_dmax+0x9e>
			dmax_mm = CurrentParameters.dmax_lut.dmax_mm[index0];
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	3314      	adds	r3, #20
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	33b0      	adds	r3, #176	; 0xb0
 8008dc4:	443b      	add	r3, r7
 8008dc6:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8008dca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008dce:	e04b      	b.n	8008e68 <VL53L0X_calc_dmax+0x136>
		} else {
			amb0 = CurrentParameters.dmax_lut.ambRate_mcps[index0];
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	330e      	adds	r3, #14
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	33b0      	adds	r3, #176	; 0xb0
 8008dd8:	443b      	add	r3, r7
 8008dda:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8008dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			amb1 = CurrentParameters.dmax_lut.ambRate_mcps[index1];
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	330e      	adds	r3, #14
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	33b0      	adds	r3, #176	; 0xb0
 8008dea:	443b      	add	r3, r7
 8008dec:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8008df0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			dmax0 = CurrentParameters.dmax_lut.dmax_mm[index0];
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	3314      	adds	r3, #20
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	33b0      	adds	r3, #176	; 0xb0
 8008dfc:	443b      	add	r3, r7
 8008dfe:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8008e02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			dmax1 = CurrentParameters.dmax_lut.dmax_mm[index1];
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	3314      	adds	r3, #20
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	33b0      	adds	r3, #176	; 0xb0
 8008e0e:	443b      	add	r3, r7
 8008e10:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8008e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			if ((amb1 - amb0) != 0) {
 8008e18:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008e1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d01d      	beq.n	8008e60 <VL53L0X_calc_dmax+0x12e>
				/* Fix16:16/Fix16:8 => Fix16:8 */
				linearSlope = (dmax0-dmax1)/((amb1-amb0) >> 8);
 8008e24:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e2c:	1ad2      	subs	r2, r2, r3
 8008e2e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008e32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008e36:	1acb      	subs	r3, r1, r3
 8008e38:	0a1b      	lsrs	r3, r3, #8
 8008e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

				/* Fix16:8 * Fix16:8 => Fix16:16 */
				dmax_mm =
				    (((amb1 -
 8008e42:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	1ad3      	subs	r3, r2, r3
				       ambRateMeas) >> 8) * linearSlope) +
 8008e4a:	0a1b      	lsrs	r3, r3, #8
 8008e4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008e50:	fb02 f303 	mul.w	r3, r2, r3
				dmax_mm =
 8008e54:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008e58:	4413      	add	r3, r2
 8008e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e5e:	e003      	b.n	8008e68 <VL53L0X_calc_dmax+0x136>
				    dmax1;
			} else{
				dmax_mm = dmax0;
 8008e60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}
		}
	}
	*pdmax_mm = (uint32_t)(dmax_mm >> 16);
 8008e68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e6c:	0c1a      	lsrs	r2, r3, #16
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8008e72:	f997 30ab 	ldrsb.w	r3, [r7, #171]	; 0xab
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	37b0      	adds	r7, #176	; 0xb0
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008e80 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b0b0      	sub	sp, #192	; 0xc0
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8008e8c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008e90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8008e94:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008e98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs =
 8008e9c:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8008ea0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						0x00190000; /* 25ms */
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8008ea4:	f241 235c 	movw	r3, #4700	; 0x125c
 8008ea8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8008eac:	4b98      	ldr	r3, [pc, #608]	; (8009110 <VL53L0X_calc_sigma_estimate+0x290>)
 8008eae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8008eb2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8008eba:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8008ebe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008eca:	4b92      	ldr	r3, [pc, #584]	; (8009114 <VL53L0X_calc_sigma_estimate+0x294>)
 8008ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8008ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ed2:	67bb      	str	r3, [r7, #120]	; 0x78
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8008ed4:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8008ed8:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t cPllPeriod_ps			= 1655;
 8008eda:	f240 6377 	movw	r3, #1655	; 0x677
 8008ede:	673b      	str	r3, [r7, #112]	; 0x70
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	61bb      	str	r3, [r7, #24]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ef4:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8008ef8:	0c1b      	lsrs	r3, r3, #16
 8008efa:	66bb      	str	r3, [r7, #104]	; 0x68

	Status = VL53L0X_get_total_signal_rate(
 8008efc:	f107 0314 	add.w	r3, r7, #20
 8008f00:	461a      	mov	r2, r3
 8008f02:	68b9      	ldr	r1, [r7, #8]
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f7ff fea8 	bl	8008c5a <VL53L0X_get_total_signal_rate>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8008f10:	f107 0318 	add.w	r3, r7, #24
 8008f14:	461a      	mov	r2, r3
 8008f16:	68b9      	ldr	r1, [r7, #8]
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f7ff fe6f 	bl	8008bfc <VL53L0X_get_total_xtalk_rate>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f2a:	fb02 f303 	mul.w	r3, r2, r3
 8008f2e:	667b      	str	r3, [r7, #100]	; 0x64
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8008f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f32:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008f36:	0c1b      	lsrs	r3, r3, #16
 8008f38:	667b      	str	r3, [r7, #100]	; 0x64

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f40:	fb02 f303 	mul.w	r3, r2, r3
 8008f44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8008f48:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d902      	bls.n	8008f58 <VL53L0X_calc_sigma_estimate+0xd8>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8008f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8008f58:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d160      	bne.n	8009022 <VL53L0X_calc_sigma_estimate+0x1a2>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008f66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8008f70:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008f74:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8008f78:	461a      	mov	r2, r3
 8008f7a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f7fe fef0 	bl	8007d64 <VL53L0X_calc_timeout_mclks>
 8008f84:	65f8      	str	r0, [r7, #92]	; 0x5c
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8008f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8008f96:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008f9a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f7fe fedd 	bl	8007d64 <VL53L0X_calc_timeout_mclks>
 8008faa:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8008fac:	2303      	movs	r3, #3
 8008fae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 8008fb2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8008fb6:	2b08      	cmp	r3, #8
 8008fb8:	d102      	bne.n	8008fc0 <VL53L0X_calc_sigma_estimate+0x140>
			vcselWidth = 2;
 8008fba:	2302      	movs	r3, #2
 8008fbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8008fc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fc4:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8008fc6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008fca:	fb02 f303 	mul.w	r3, r2, r3
 8008fce:	02db      	lsls	r3, r3, #11
 8008fd0:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fd4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008fd8:	4a4f      	ldr	r2, [pc, #316]	; (8009118 <VL53L0X_calc_sigma_estimate+0x298>)
 8008fda:	fba2 2303 	umull	r2, r3, r2, r3
 8008fde:	099b      	lsrs	r3, r3, #6
 8008fe0:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us *= cPllPeriod_ps;
 8008fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fe4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008fe6:	fb02 f303 	mul.w	r3, r2, r3
 8008fea:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008ff2:	4a49      	ldr	r2, [pc, #292]	; (8009118 <VL53L0X_calc_sigma_estimate+0x298>)
 8008ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff8:	099b      	lsrs	r3, r3, #6
 8008ffa:	653b      	str	r3, [r7, #80]	; 0x50

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	3380      	adds	r3, #128	; 0x80
 8009000:	0a1b      	lsrs	r3, r3, #8
 8009002:	617b      	str	r3, [r7, #20]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009008:	fb02 f303 	mul.w	r3, r2, r3
 800900c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8009010:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009014:	3380      	adds	r3, #128	; 0x80
 8009016:	0a1b      	lsrs	r3, r3, #8
 8009018:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	021b      	lsls	r3, r3, #8
 8009020:	617b      	str	r3, [r7, #20]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009022:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009026:	2b00      	cmp	r3, #0
 8009028:	d002      	beq.n	8009030 <VL53L0X_calc_sigma_estimate+0x1b0>
		LOG_FUNCTION_END(Status);
		return Status;
 800902a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800902e:	e14a      	b.n	80092c6 <VL53L0X_calc_sigma_estimate+0x446>
	}

	if (peakSignalRate_kcps == 0) {
 8009030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009032:	2b00      	cmp	r3, #0
 8009034:	d109      	bne.n	800904a <VL53L0X_calc_sigma_estimate+0x1ca>
		*pSigmaEstimate = cSigmaEstMax;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800903c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009044:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009048:	e13b      	b.n	80092c2 <VL53L0X_calc_sigma_estimate+0x442>
	} else {
		if (vcselTotalEventsRtn < 1)
 800904a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800904e:	2b00      	cmp	r3, #0
 8009050:	d102      	bne.n	8009058 <VL53L0X_calc_sigma_estimate+0x1d8>
			vcselTotalEventsRtn = 1;
 8009052:	2301      	movs	r3, #1
 8009054:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8009058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800905c:	64fb      	str	r3, [r7, #76]	; 0x4c

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800905e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009060:	041a      	lsls	r2, r3, #16
 8009062:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009064:	fbb2 f3f3 	udiv	r3, r2, r3
 8009068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800906c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009070:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009074:	429a      	cmp	r2, r3
 8009076:	d903      	bls.n	8009080 <VL53L0X_calc_sigma_estimate+0x200>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8009078:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800907c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8009080:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009084:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009088:	fb02 f303 	mul.w	r3, r2, r3
 800908c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8009090:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009094:	4613      	mov	r3, r2
 8009096:	005b      	lsls	r3, r3, #1
 8009098:	4413      	add	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4618      	mov	r0, r3
 800909e:	f7fe f8bb 	bl	8007218 <VL53L0X_isqrt>
 80090a2:	4603      	mov	r3, r0
 80090a4:	005b      	lsls	r3, r3, #1
 80090a6:	64bb      	str	r3, [r7, #72]	; 0x48

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	891b      	ldrh	r3, [r3, #8]
 80090ac:	461a      	mov	r2, r3
 80090ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090b0:	fb02 f303 	mul.w	r3, r2, r3
 80090b4:	647b      	str	r3, [r7, #68]	; 0x44
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80090b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090b8:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80090ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090be:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80090c0:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80090c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80090c6:	4a14      	ldr	r2, [pc, #80]	; (8009118 <VL53L0X_calc_sigma_estimate+0x298>)
 80090c8:	fba2 2303 	umull	r2, r3, r2, r3
 80090cc:	099b      	lsrs	r3, r3, #6
 80090ce:	643b      	str	r3, [r7, #64]	; 0x40

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80090d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090d2:	041b      	lsls	r3, r3, #16
 80090d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80090d8:	4a0f      	ldr	r2, [pc, #60]	; (8009118 <VL53L0X_calc_sigma_estimate+0x298>)
 80090da:	fba2 2303 	umull	r2, r3, r2, r3
 80090de:	099b      	lsrs	r3, r3, #6
 80090e0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Shift by 8 bits to increase resolution prior to the
		 * division
		 */
		diff1_mcps <<= 8;
 80090e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090e4:	021b      	lsls	r3, r3, #8
 80090e6:	643b      	str	r3, [r7, #64]	; 0x40

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80090e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	bfb8      	it	lt
 80090f4:	425b      	neglt	r3, r3
 80090f6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80090f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fa:	021b      	lsls	r3, r3, #8
 80090fc:	63bb      	str	r3, [r7, #56]	; 0x38

		if (pRangingMeasurementData->RangeStatus != 0) {
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	7e1b      	ldrb	r3, [r3, #24]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00a      	beq.n	800911c <VL53L0X_calc_sigma_estimate+0x29c>
			pwMult = 1 << 16;
 8009106:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800910a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800910e:	e032      	b.n	8009176 <VL53L0X_calc_sigma_estimate+0x2f6>
 8009110:	028f87ae 	.word	0x028f87ae
 8009114:	0006999a 	.word	0x0006999a
 8009118:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			/* smaller than 1.0f */
			pwMult = deltaT_ps/cVcselPulseWidth_ps;
 800911c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800911e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009122:	fbb2 f3f3 	udiv	r3, r2, r3
 8009126:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however
			 * both values are small enough such that32 bits will
			 * not be exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800912a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8009130:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009134:	fb02 f303 	mul.w	r3, r2, r3
 8009138:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800913c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009142:	4413      	add	r3, r2
 8009144:	0c1b      	lsrs	r3, r3, #16
 8009146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800914a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800914e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009152:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 * At this point the value will be 1.xx, therefore if we
			 * square the value this will exceed 32 bits. To address
			 * this perform a single shift to the right before the
			 * multiplication.
			 */
			pwMult >>= 1;
 8009156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800915a:	085b      	lsrs	r3, r3, #1
 800915c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8009160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009164:	fb03 f303 	mul.w	r3, r3, r3
 8009168:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800916c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009170:	0b9b      	lsrs	r3, r3, #14
 8009172:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8009176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800917a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800917c:	fb02 f303 	mul.w	r3, r2, r3
 8009180:	637b      	str	r3, [r7, #52]	; 0x34

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8009182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009184:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009188:	0c1b      	lsrs	r3, r3, #16
 800918a:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800918c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918e:	fb03 f303 	mul.w	r3, r3, r3
 8009192:	637b      	str	r3, [r7, #52]	; 0x34

		sqr2 = sigmaEstimateP2;
 8009194:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009198:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800919a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80091a0:	0c1b      	lsrs	r3, r3, #16
 80091a2:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80091a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a6:	fb03 f303 	mul.w	r3, r3, r3
 80091aa:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80091ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b0:	4413      	add	r3, r2
 80091b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80091b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091b6:	f7fe f82f 	bl	8007218 <VL53L0X_isqrt>
 80091ba:	62b8      	str	r0, [r7, #40]	; 0x28

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	041b      	lsls	r3, r3, #16
 80091c0:	62bb      	str	r3, [r7, #40]	; 0x28
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80091c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c4:	3332      	adds	r3, #50	; 0x32
 80091c6:	4a42      	ldr	r2, [pc, #264]	; (80092d0 <VL53L0X_calc_sigma_estimate+0x450>)
 80091c8:	fba2 2303 	umull	r2, r3, r2, r3
 80091cc:	095a      	lsrs	r2, r3, #5
 80091ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80091d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091dc:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80091e0:	fb02 f303 	mul.w	r3, r2, r3
 80091e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80091e8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80091ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80091f0:	4413      	add	r3, r2
 80091f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80091f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091fa:	4a36      	ldr	r2, [pc, #216]	; (80092d4 <VL53L0X_calc_sigma_estimate+0x454>)
 80091fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009200:	0b5b      	lsrs	r3, r3, #13
 8009202:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8009206:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800920a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800920e:	429a      	cmp	r2, r3
 8009210:	d903      	bls.n	800921a <VL53L0X_calc_sigma_estimate+0x39a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstRtn = cSigmaEstRtnMax;
 8009212:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009216:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
		    (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs +
 800921a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800921e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009222:	4413      	add	r3, r2
 8009224:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8009228:	4a2b      	ldr	r2, [pc, #172]	; (80092d8 <VL53L0X_calc_sigma_estimate+0x458>)
 800922a:	fba2 2303 	umull	r2, r3, r2, r3
 800922e:	099b      	lsrs	r3, r3, #6
 8009230:	627b      	str	r3, [r7, #36]	; 0x24
		 * (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8009236:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800923a:	441a      	add	r2, r3
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009242:	4618      	mov	r0, r3
 8009244:	f7fd ffe8 	bl	8007218 <VL53L0X_isqrt>
 8009248:	6238      	str	r0, [r7, #32]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	021b      	lsls	r3, r3, #8
 800924e:	623b      	str	r3, [r7, #32]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8009250:	6a3b      	ldr	r3, [r7, #32]
 8009252:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009256:	4a20      	ldr	r2, [pc, #128]	; (80092d8 <VL53L0X_calc_sigma_estimate+0x458>)
 8009258:	fba2 2303 	umull	r2, r3, r2, r3
 800925c:	099b      	lsrs	r3, r3, #6
 800925e:	623b      	str	r3, [r7, #32]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8009260:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009264:	fb03 f303 	mul.w	r3, r3, r3
 8009268:	637b      	str	r3, [r7, #52]	; 0x34
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800926a:	6a3b      	ldr	r3, [r7, #32]
 800926c:	fb03 f303 	mul.w	r3, r3, r3
 8009270:	633b      	str	r3, [r7, #48]	; 0x30

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8009272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009276:	4413      	add	r3, r2
 8009278:	4618      	mov	r0, r3
 800927a:	f7fd ffcd 	bl	8007218 <VL53L0X_isqrt>
 800927e:	61f8      	str	r0, [r7, #28]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009286:	fb02 f303 	mul.w	r3, r2, r3
 800928a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800928e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009290:	2b00      	cmp	r3, #0
 8009292:	d009      	beq.n	80092a8 <VL53L0X_calc_sigma_estimate+0x428>
 8009294:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009298:	2b00      	cmp	r3, #0
 800929a:	d005      	beq.n	80092a8 <VL53L0X_calc_sigma_estimate+0x428>
 800929c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80092a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d903      	bls.n	80092b0 <VL53L0X_calc_sigma_estimate+0x430>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 80092a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80092b6:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80092c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	37c0      	adds	r7, #192	; 0xc0
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	51eb851f 	.word	0x51eb851f
 80092d4:	d1b71759 	.word	0xd1b71759
 80092d8:	10624dd3 	.word	0x10624dd3

080092dc <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b090      	sub	sp, #64	; 0x40
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	607a      	str	r2, [r7, #4]
 80092e6:	461a      	mov	r2, r3
 80092e8:	460b      	mov	r3, r1
 80092ea:	72fb      	strb	r3, [r7, #11]
 80092ec:	4613      	mov	r3, r2
 80092ee:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092f0:	2300      	movs	r3, #0
 80092f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80092fc:	2300      	movs	r3, #0
 80092fe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8009302:	2300      	movs	r3, #0
 8009304:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8009308:	2300      	movs	r3, #0
 800930a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800930e:	2300      	movs	r3, #0
 8009310:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8009320:	2300      	movs	r3, #0
 8009322:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8009326:	2300      	movs	r3, #0
 8009328:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800932e:	7afb      	ldrb	r3, [r7, #11]
 8009330:	10db      	asrs	r3, r3, #3
 8009332:	b2db      	uxtb	r3, r3
 8009334:	f003 030f 	and.w	r3, r3, #15
 8009338:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800933c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009340:	2b00      	cmp	r3, #0
 8009342:	d017      	beq.n	8009374 <VL53L0X_get_pal_range_status+0x98>
 8009344:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009348:	2b05      	cmp	r3, #5
 800934a:	d013      	beq.n	8009374 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800934c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009350:	2b07      	cmp	r3, #7
 8009352:	d00f      	beq.n	8009374 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8009354:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009358:	2b0c      	cmp	r3, #12
 800935a:	d00b      	beq.n	8009374 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800935c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009360:	2b0d      	cmp	r3, #13
 8009362:	d007      	beq.n	8009374 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8009364:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009368:	2b0e      	cmp	r3, #14
 800936a:	d003      	beq.n	8009374 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800936c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009370:	2b0f      	cmp	r3, #15
 8009372:	d103      	bne.n	800937c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8009374:	2301      	movs	r3, #1
 8009376:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800937a:	e002      	b.n	8009382 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800937c:	2300      	movs	r3, #0
 800937e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009382:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009386:	2b00      	cmp	r3, #0
 8009388:	d109      	bne.n	800939e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800938a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800938e:	461a      	mov	r2, r3
 8009390:	2100      	movs	r1, #0
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f7fc f9ba 	bl	800570c <VL53L0X_GetLimitCheckEnable>
 8009398:	4603      	mov	r3, r0
 800939a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800939e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d03c      	beq.n	8009420 <VL53L0X_get_pal_range_status+0x144>
 80093a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d138      	bne.n	8009420 <VL53L0X_get_pal_range_status+0x144>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80093ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093b2:	461a      	mov	r2, r3
 80093b4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f7ff fd62 	bl	8008e80 <VL53L0X_calc_sigma_estimate>
 80093bc:	4603      	mov	r3, r0
 80093be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate);
		if (Status == VL53L0X_ERROR_NONE)
 80093c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10a      	bne.n	80093e0 <VL53L0X_get_pal_range_status+0x104>
			Status = VL53L0X_calc_dmax(
 80093ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	f107 0210 	add.w	r2, r7, #16
 80093d2:	4619      	mov	r1, r3
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f7ff fcac 	bl	8008d32 <VL53L0X_calc_dmax>
 80093da:	4603      	mov	r3, r0
 80093dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				pRangingMeasurementData->AmbientRateRtnMegaCps,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80093e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d103      	bne.n	80093f0 <VL53L0X_get_pal_range_status+0x114>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ee:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80093f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d113      	bne.n	8009420 <VL53L0X_get_pal_range_status+0x144>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80093f8:	f107 0320 	add.w	r3, r7, #32
 80093fc:	461a      	mov	r2, r3
 80093fe:	2100      	movs	r1, #0
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7fc fa09 	bl	8005818 <VL53L0X_GetLimitCheckValue>
 8009406:	4603      	mov	r3, r0
 8009408:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d006      	beq.n	8009420 <VL53L0X_get_pal_range_status+0x144>
				(SigmaEstimate > SigmaLimitValue))
 8009412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009414:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8009416:	429a      	cmp	r2, r3
 8009418:	d902      	bls.n	8009420 <VL53L0X_get_pal_range_status+0x144>
					/* Limit Fail */
				SigmaLimitflag = 1;
 800941a:	2301      	movs	r3, #1
 800941c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009420:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009424:	2b00      	cmp	r3, #0
 8009426:	d109      	bne.n	800943c <VL53L0X_get_pal_range_status+0x160>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009428:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800942c:	461a      	mov	r2, r3
 800942e:	2102      	movs	r1, #2
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f7fc f96b 	bl	800570c <VL53L0X_GetLimitCheckEnable>
 8009436:	4603      	mov	r3, r0
 8009438:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800943c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009440:	2b00      	cmp	r3, #0
 8009442:	d044      	beq.n	80094ce <VL53L0X_get_pal_range_status+0x1f2>
 8009444:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009448:	2b00      	cmp	r3, #0
 800944a:	d140      	bne.n	80094ce <VL53L0X_get_pal_range_status+0x1f2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800944c:	f107 031c 	add.w	r3, r7, #28
 8009450:	461a      	mov	r2, r3
 8009452:	2102      	movs	r1, #2
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f7fc f9df 	bl	8005818 <VL53L0X_GetLimitCheckValue>
 800945a:	4603      	mov	r3, r0
 800945c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8009460:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009464:	2b00      	cmp	r3, #0
 8009466:	d107      	bne.n	8009478 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009468:	2201      	movs	r2, #1
 800946a:	21ff      	movs	r1, #255	; 0xff
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 f9b5 	bl	80097dc <VL53L0X_WrByte>
 8009472:	4603      	mov	r3, r0
 8009474:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8009478:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800947c:	2b00      	cmp	r3, #0
 800947e:	d109      	bne.n	8009494 <VL53L0X_get_pal_range_status+0x1b8>
			Status = VL53L0X_RdWord(Dev,
 8009480:	f107 0316 	add.w	r3, r7, #22
 8009484:	461a      	mov	r2, r3
 8009486:	21b6      	movs	r1, #182	; 0xb6
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f000 fa53 	bl	8009934 <VL53L0X_RdWord>
 800948e:	4603      	mov	r3, r0
 8009490:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8009494:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009498:	2b00      	cmp	r3, #0
 800949a:	d107      	bne.n	80094ac <VL53L0X_get_pal_range_status+0x1d0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800949c:	2200      	movs	r2, #0
 800949e:	21ff      	movs	r1, #255	; 0xff
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 f99b 	bl	80097dc <VL53L0X_WrByte>
 80094a6:	4603      	mov	r3, r0
 80094a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80094ac:	8afb      	ldrh	r3, [r7, #22]
 80094ae:	025b      	lsls	r3, r3, #9
 80094b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094b6:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

		if ((SignalRefClipValue > 0) &&
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d006      	beq.n	80094ce <VL53L0X_get_pal_range_status+0x1f2>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80094c0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80094c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d902      	bls.n	80094ce <VL53L0X_get_pal_range_status+0x1f2>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80094c8:	2301      	movs	r3, #1
 80094ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80094ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d109      	bne.n	80094ea <VL53L0X_get_pal_range_status+0x20e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80094d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094da:	461a      	mov	r2, r3
 80094dc:	2103      	movs	r1, #3
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f7fc f914 	bl	800570c <VL53L0X_GetLimitCheckEnable>
 80094e4:	4603      	mov	r3, r0
 80094e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80094ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d023      	beq.n	800953a <VL53L0X_get_pal_range_status+0x25e>
 80094f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d11f      	bne.n	800953a <VL53L0X_get_pal_range_status+0x25e>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80094fa:	893b      	ldrh	r3, [r7, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d102      	bne.n	8009506 <VL53L0X_get_pal_range_status+0x22a>
			SignalRatePerSpad = 0;
 8009500:	2300      	movs	r3, #0
 8009502:	637b      	str	r3, [r7, #52]	; 0x34
 8009504:	e005      	b.n	8009512 <VL53L0X_get_pal_range_status+0x236>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	021a      	lsls	r2, r3, #8
 800950a:	893b      	ldrh	r3, [r7, #8]
 800950c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009510:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009512:	f107 0318 	add.w	r3, r7, #24
 8009516:	461a      	mov	r2, r3
 8009518:	2103      	movs	r1, #3
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f7fc f97c 	bl	8005818 <VL53L0X_GetLimitCheckValue>
 8009520:	4603      	mov	r3, r0
 8009522:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d006      	beq.n	800953a <VL53L0X_get_pal_range_status+0x25e>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800952c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800952e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009530:	429a      	cmp	r2, r3
 8009532:	d202      	bcs.n	800953a <VL53L0X_get_pal_range_status+0x25e>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8009534:	2301      	movs	r3, #1
 8009536:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800953a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800953e:	2b00      	cmp	r3, #0
 8009540:	d14a      	bne.n	80095d8 <VL53L0X_get_pal_range_status+0x2fc>
		if (NoneFlag == 1) {
 8009542:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009546:	2b01      	cmp	r3, #1
 8009548:	d103      	bne.n	8009552 <VL53L0X_get_pal_range_status+0x276>
			*pPalRangeStatus = 255;	 /* NONE */
 800954a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800954c:	22ff      	movs	r2, #255	; 0xff
 800954e:	701a      	strb	r2, [r3, #0]
 8009550:	e042      	b.n	80095d8 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 1 ||
 8009552:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009556:	2b01      	cmp	r3, #1
 8009558:	d007      	beq.n	800956a <VL53L0X_get_pal_range_status+0x28e>
 800955a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800955e:	2b02      	cmp	r3, #2
 8009560:	d003      	beq.n	800956a <VL53L0X_get_pal_range_status+0x28e>
					DeviceRangeStatusInternal == 2 ||
 8009562:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009566:	2b03      	cmp	r3, #3
 8009568:	d103      	bne.n	8009572 <VL53L0X_get_pal_range_status+0x296>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800956a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800956c:	2205      	movs	r2, #5
 800956e:	701a      	strb	r2, [r3, #0]
 8009570:	e032      	b.n	80095d8 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 6 ||
 8009572:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009576:	2b06      	cmp	r3, #6
 8009578:	d003      	beq.n	8009582 <VL53L0X_get_pal_range_status+0x2a6>
 800957a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800957e:	2b09      	cmp	r3, #9
 8009580:	d103      	bne.n	800958a <VL53L0X_get_pal_range_status+0x2ae>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8009582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009584:	2204      	movs	r2, #4
 8009586:	701a      	strb	r2, [r3, #0]
 8009588:	e026      	b.n	80095d8 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 8 ||
 800958a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800958e:	2b08      	cmp	r3, #8
 8009590:	d007      	beq.n	80095a2 <VL53L0X_get_pal_range_status+0x2c6>
 8009592:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009596:	2b0a      	cmp	r3, #10
 8009598:	d003      	beq.n	80095a2 <VL53L0X_get_pal_range_status+0x2c6>
					DeviceRangeStatusInternal == 10 ||
 800959a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d103      	bne.n	80095aa <VL53L0X_get_pal_range_status+0x2ce>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80095a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095a4:	2203      	movs	r2, #3
 80095a6:	701a      	strb	r2, [r3, #0]
 80095a8:	e016      	b.n	80095d8 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 4 ||
 80095aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095ae:	2b04      	cmp	r3, #4
 80095b0:	d003      	beq.n	80095ba <VL53L0X_get_pal_range_status+0x2de>
 80095b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d103      	bne.n	80095c2 <VL53L0X_get_pal_range_status+0x2e6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80095ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095bc:	2202      	movs	r2, #2
 80095be:	701a      	strb	r2, [r3, #0]
 80095c0:	e00a      	b.n	80095d8 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (SigmaLimitflag == 1) {
 80095c2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d103      	bne.n	80095d2 <VL53L0X_get_pal_range_status+0x2f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80095ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095cc:	2201      	movs	r2, #1
 80095ce:	701a      	strb	r2, [r3, #0]
 80095d0:	e002      	b.n	80095d8 <VL53L0X_get_pal_range_status+0x2fc>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80095d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d4:	2200      	movs	r2, #0
 80095d6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80095d8:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80095dc:	461a      	mov	r2, r3
 80095de:	2101      	movs	r1, #1
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f7fc f893 	bl	800570c <VL53L0X_GetLimitCheckEnable>
 80095e6:	4603      	mov	r3, r0
 80095e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80095ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d14f      	bne.n	8009694 <VL53L0X_get_pal_range_status+0x3b8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80095f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d003      	beq.n	8009604 <VL53L0X_get_pal_range_status+0x328>
 80095fc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009600:	2b01      	cmp	r3, #1
 8009602:	d103      	bne.n	800960c <VL53L0X_get_pal_range_status+0x330>
			Temp8 = 1;
 8009604:	2301      	movs	r3, #1
 8009606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800960a:	e002      	b.n	8009612 <VL53L0X_get_pal_range_status+0x336>
		else
			Temp8 = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009618:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800961c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009620:	2b04      	cmp	r3, #4
 8009622:	d003      	beq.n	800962c <VL53L0X_get_pal_range_status+0x350>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8009624:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8009628:	2b00      	cmp	r3, #0
 800962a:	d103      	bne.n	8009634 <VL53L0X_get_pal_range_status+0x358>
			Temp8 = 1;
 800962c:	2301      	movs	r3, #1
 800962e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009632:	e002      	b.n	800963a <VL53L0X_get_pal_range_status+0x35e>
		else
			Temp8 = 0;
 8009634:	2300      	movs	r3, #0
 8009636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009640:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8009644:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <VL53L0X_get_pal_range_status+0x378>
 800964c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009650:	2b01      	cmp	r3, #1
 8009652:	d103      	bne.n	800965c <VL53L0X_get_pal_range_status+0x380>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8009654:	2301      	movs	r3, #1
 8009656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800965a:	e002      	b.n	8009662 <VL53L0X_get_pal_range_status+0x386>
		else
			Temp8 = 0;
 800965c:	2300      	movs	r3, #0
 800965e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009668:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800966c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009670:	2b00      	cmp	r3, #0
 8009672:	d003      	beq.n	800967c <VL53L0X_get_pal_range_status+0x3a0>
 8009674:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009678:	2b01      	cmp	r3, #1
 800967a:	d103      	bne.n	8009684 <VL53L0X_get_pal_range_status+0x3a8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800967c:	2301      	movs	r3, #1
 800967e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009682:	e002      	b.n	800968a <VL53L0X_get_pal_range_status+0x3ae>
		else
			Temp8 = 0;
 8009684:	2300      	movs	r3, #0
 8009686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009690:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009694:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8009698:	4618      	mov	r0, r3
 800969a:	3740      	adds	r7, #64	; 0x40
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b088      	sub	sp, #32
 80096a4:	af02      	add	r7, sp, #8
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	330a      	adds	r3, #10
 80096b0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80096be:	b299      	uxth	r1, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	4613      	mov	r3, r2
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	f7f8 f88a 	bl	80017e4 <HAL_I2C_Master_Transmit>
 80096d0:	4603      	mov	r3, r0
 80096d2:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80096d4:	693b      	ldr	r3, [r7, #16]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3718      	adds	r7, #24
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80096de:	b580      	push	{r7, lr}
 80096e0:	b088      	sub	sp, #32
 80096e2:	af02      	add	r7, sp, #8
 80096e4:	60f8      	str	r0, [r7, #12]
 80096e6:	60b9      	str	r1, [r7, #8]
 80096e8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	330a      	adds	r3, #10
 80096ee:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80096fc:	f043 0301 	orr.w	r3, r3, #1
 8009700:	b2db      	uxtb	r3, r3
 8009702:	b299      	uxth	r1, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	b29a      	uxth	r2, r3
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	4613      	mov	r3, r2
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	f7f8 f95c 	bl	80019cc <HAL_I2C_Master_Receive>
 8009714:	4603      	mov	r3, r0
 8009716:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8009718:	693b      	ldr	r3, [r7, #16]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	607a      	str	r2, [r7, #4]
 800972e:	603b      	str	r3, [r7, #0]
 8009730:	460b      	mov	r3, r1
 8009732:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009734:	2300      	movs	r3, #0
 8009736:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2b3f      	cmp	r3, #63	; 0x3f
 800973c:	d902      	bls.n	8009744 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800973e:	f06f 0303 	mvn.w	r3, #3
 8009742:	e016      	b.n	8009772 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8009744:	4a0d      	ldr	r2, [pc, #52]	; (800977c <VL53L0X_WriteMulti+0x58>)
 8009746:	7afb      	ldrb	r3, [r7, #11]
 8009748:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	6879      	ldr	r1, [r7, #4]
 800974e:	480c      	ldr	r0, [pc, #48]	; (8009780 <VL53L0X_WriteMulti+0x5c>)
 8009750:	f000 fbea 	bl	8009f28 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	3301      	adds	r3, #1
 8009758:	461a      	mov	r2, r3
 800975a:	4908      	ldr	r1, [pc, #32]	; (800977c <VL53L0X_WriteMulti+0x58>)
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f7ff ff9f 	bl	80096a0 <_I2CWrite>
 8009762:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800976a:	23ec      	movs	r3, #236	; 0xec
 800976c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800976e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	20000664 	.word	0x20000664
 8009780:	20000665 	.word	0x20000665

08009784 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	607a      	str	r2, [r7, #4]
 800978e:	603b      	str	r3, [r7, #0]
 8009790:	460b      	mov	r3, r1
 8009792:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009794:	2300      	movs	r3, #0
 8009796:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009798:	f107 030b 	add.w	r3, r7, #11
 800979c:	2201      	movs	r2, #1
 800979e:	4619      	mov	r1, r3
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f7ff ff7d 	bl	80096a0 <_I2CWrite>
 80097a6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d002      	beq.n	80097b4 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80097ae:	23ec      	movs	r3, #236	; 0xec
 80097b0:	75fb      	strb	r3, [r7, #23]
        goto done;
 80097b2:	e00c      	b.n	80097ce <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	6879      	ldr	r1, [r7, #4]
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f7ff ff90 	bl	80096de <_I2CRead>
 80097be:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d002      	beq.n	80097cc <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80097c6:	23ec      	movs	r3, #236	; 0xec
 80097c8:	75fb      	strb	r3, [r7, #23]
 80097ca:	e000      	b.n	80097ce <VL53L0X_ReadMulti+0x4a>
    }
done:
 80097cc:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80097ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3718      	adds	r7, #24
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
	...

080097dc <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	460b      	mov	r3, r1
 80097e6:	70fb      	strb	r3, [r7, #3]
 80097e8:	4613      	mov	r3, r2
 80097ea:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80097f0:	4a0b      	ldr	r2, [pc, #44]	; (8009820 <VL53L0X_WrByte+0x44>)
 80097f2:	78fb      	ldrb	r3, [r7, #3]
 80097f4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 80097f6:	4a0a      	ldr	r2, [pc, #40]	; (8009820 <VL53L0X_WrByte+0x44>)
 80097f8:	78bb      	ldrb	r3, [r7, #2]
 80097fa:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80097fc:	2202      	movs	r2, #2
 80097fe:	4908      	ldr	r1, [pc, #32]	; (8009820 <VL53L0X_WrByte+0x44>)
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7ff ff4d 	bl	80096a0 <_I2CWrite>
 8009806:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800980e:	23ec      	movs	r3, #236	; 0xec
 8009810:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009812:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20000664 	.word	0x20000664

08009824 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	460b      	mov	r3, r1
 800982e:	70fb      	strb	r3, [r7, #3]
 8009830:	4613      	mov	r3, r2
 8009832:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009834:	2300      	movs	r3, #0
 8009836:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8009838:	4a0e      	ldr	r2, [pc, #56]	; (8009874 <VL53L0X_WrWord+0x50>)
 800983a:	78fb      	ldrb	r3, [r7, #3]
 800983c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800983e:	883b      	ldrh	r3, [r7, #0]
 8009840:	0a1b      	lsrs	r3, r3, #8
 8009842:	b29b      	uxth	r3, r3
 8009844:	b2da      	uxtb	r2, r3
 8009846:	4b0b      	ldr	r3, [pc, #44]	; (8009874 <VL53L0X_WrWord+0x50>)
 8009848:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800984a:	883b      	ldrh	r3, [r7, #0]
 800984c:	b2da      	uxtb	r2, r3
 800984e:	4b09      	ldr	r3, [pc, #36]	; (8009874 <VL53L0X_WrWord+0x50>)
 8009850:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8009852:	2203      	movs	r2, #3
 8009854:	4907      	ldr	r1, [pc, #28]	; (8009874 <VL53L0X_WrWord+0x50>)
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff ff22 	bl	80096a0 <_I2CWrite>
 800985c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009864:	23ec      	movs	r3, #236	; 0xec
 8009866:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009868:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	20000664 	.word	0x20000664

08009878 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	4608      	mov	r0, r1
 8009882:	4611      	mov	r1, r2
 8009884:	461a      	mov	r2, r3
 8009886:	4603      	mov	r3, r0
 8009888:	70fb      	strb	r3, [r7, #3]
 800988a:	460b      	mov	r3, r1
 800988c:	70bb      	strb	r3, [r7, #2]
 800988e:	4613      	mov	r3, r2
 8009890:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009892:	2300      	movs	r3, #0
 8009894:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8009896:	f107 020e 	add.w	r2, r7, #14
 800989a:	78fb      	ldrb	r3, [r7, #3]
 800989c:	4619      	mov	r1, r3
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f81e 	bl	80098e0 <VL53L0X_RdByte>
 80098a4:	4603      	mov	r3, r0
 80098a6:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 80098a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d110      	bne.n	80098d2 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 80098b0:	7bba      	ldrb	r2, [r7, #14]
 80098b2:	78bb      	ldrb	r3, [r7, #2]
 80098b4:	4013      	ands	r3, r2
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	787b      	ldrb	r3, [r7, #1]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 80098c0:	7bba      	ldrb	r2, [r7, #14]
 80098c2:	78fb      	ldrb	r3, [r7, #3]
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7ff ff88 	bl	80097dc <VL53L0X_WrByte>
 80098cc:	4603      	mov	r3, r0
 80098ce:	73fb      	strb	r3, [r7, #15]
 80098d0:	e000      	b.n	80098d4 <VL53L0X_UpdateByte+0x5c>
        goto done;
 80098d2:	bf00      	nop
done:
    return Status;
 80098d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	460b      	mov	r3, r1
 80098ea:	607a      	str	r2, [r7, #4]
 80098ec:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098ee:	2300      	movs	r3, #0
 80098f0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80098f2:	f107 030b 	add.w	r3, r7, #11
 80098f6:	2201      	movs	r2, #1
 80098f8:	4619      	mov	r1, r3
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f7ff fed0 	bl	80096a0 <_I2CWrite>
 8009900:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d002      	beq.n	800990e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009908:	23ec      	movs	r3, #236	; 0xec
 800990a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800990c:	e00c      	b.n	8009928 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800990e:	2201      	movs	r2, #1
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f7ff fee3 	bl	80096de <_I2CRead>
 8009918:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d002      	beq.n	8009926 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009920:	23ec      	movs	r3, #236	; 0xec
 8009922:	75fb      	strb	r3, [r7, #23]
 8009924:	e000      	b.n	8009928 <VL53L0X_RdByte+0x48>
    }
done:
 8009926:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8009928:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3718      	adds	r7, #24
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8009934:	b580      	push	{r7, lr}
 8009936:	b086      	sub	sp, #24
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	460b      	mov	r3, r1
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009942:	2300      	movs	r3, #0
 8009944:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009946:	f107 030b 	add.w	r3, r7, #11
 800994a:	2201      	movs	r2, #1
 800994c:	4619      	mov	r1, r3
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f7ff fea6 	bl	80096a0 <_I2CWrite>
 8009954:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800995c:	23ec      	movs	r3, #236	; 0xec
 800995e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009960:	e017      	b.n	8009992 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8009962:	2202      	movs	r2, #2
 8009964:	490e      	ldr	r1, [pc, #56]	; (80099a0 <VL53L0X_RdWord+0x6c>)
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f7ff feb9 	bl	80096de <_I2CRead>
 800996c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d002      	beq.n	800997a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009974:	23ec      	movs	r3, #236	; 0xec
 8009976:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009978:	e00b      	b.n	8009992 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800997a:	4b09      	ldr	r3, [pc, #36]	; (80099a0 <VL53L0X_RdWord+0x6c>)
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	b29b      	uxth	r3, r3
 8009980:	021b      	lsls	r3, r3, #8
 8009982:	b29a      	uxth	r2, r3
 8009984:	4b06      	ldr	r3, [pc, #24]	; (80099a0 <VL53L0X_RdWord+0x6c>)
 8009986:	785b      	ldrb	r3, [r3, #1]
 8009988:	b29b      	uxth	r3, r3
 800998a:	4413      	add	r3, r2
 800998c:	b29a      	uxth	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8009992:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3718      	adds	r7, #24
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	20000664 	.word	0x20000664

080099a4 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	460b      	mov	r3, r1
 80099ae:	607a      	str	r2, [r7, #4]
 80099b0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099b2:	2300      	movs	r3, #0
 80099b4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80099b6:	f107 030b 	add.w	r3, r7, #11
 80099ba:	2201      	movs	r2, #1
 80099bc:	4619      	mov	r1, r3
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f7ff fe6e 	bl	80096a0 <_I2CWrite>
 80099c4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80099cc:	23ec      	movs	r3, #236	; 0xec
 80099ce:	75fb      	strb	r3, [r7, #23]
        goto done;
 80099d0:	e01b      	b.n	8009a0a <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80099d2:	2204      	movs	r2, #4
 80099d4:	4910      	ldr	r1, [pc, #64]	; (8009a18 <VL53L0X_RdDWord+0x74>)
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f7ff fe81 	bl	80096de <_I2CRead>
 80099dc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80099e4:	23ec      	movs	r3, #236	; 0xec
 80099e6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80099e8:	e00f      	b.n	8009a0a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80099ea:	4b0b      	ldr	r3, [pc, #44]	; (8009a18 <VL53L0X_RdDWord+0x74>)
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	061a      	lsls	r2, r3, #24
 80099f0:	4b09      	ldr	r3, [pc, #36]	; (8009a18 <VL53L0X_RdDWord+0x74>)
 80099f2:	785b      	ldrb	r3, [r3, #1]
 80099f4:	041b      	lsls	r3, r3, #16
 80099f6:	441a      	add	r2, r3
 80099f8:	4b07      	ldr	r3, [pc, #28]	; (8009a18 <VL53L0X_RdDWord+0x74>)
 80099fa:	789b      	ldrb	r3, [r3, #2]
 80099fc:	021b      	lsls	r3, r3, #8
 80099fe:	4413      	add	r3, r2
 8009a00:	4a05      	ldr	r2, [pc, #20]	; (8009a18 <VL53L0X_RdDWord+0x74>)
 8009a02:	78d2      	ldrb	r2, [r2, #3]
 8009a04:	441a      	add	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8009a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3718      	adds	r7, #24
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	20000664 	.word	0x20000664

08009a1c <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009a24:	2300      	movs	r3, #0
 8009a26:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8009a28:	2002      	movs	r0, #2
 8009a2a:	f7f7 fb7d 	bl	8001128 <HAL_Delay>
    return status;
 8009a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	b085      	sub	sp, #20
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	689a      	ldr	r2, [r3, #8]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	1c5a      	adds	r2, r3, #1
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	601a      	str	r2, [r3, #0]
}
 8009a76:	bf00      	nop
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a82:	b480      	push	{r7}
 8009a84:	b085      	sub	sp, #20
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	6892      	ldr	r2, [r2, #8]
 8009a98:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	6852      	ldr	r2, [r2, #4]
 8009aa2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d103      	bne.n	8009ab6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	689a      	ldr	r2, [r3, #8]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	1e5a      	subs	r2, r3, #1
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
	...

08009ad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ae2:	4b4f      	ldr	r3, [pc, #316]	; (8009c20 <xTaskIncrementTick+0x148>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f040 808a 	bne.w	8009c00 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009aec:	4b4d      	ldr	r3, [pc, #308]	; (8009c24 <xTaskIncrementTick+0x14c>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	3301      	adds	r3, #1
 8009af2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009af4:	4a4b      	ldr	r2, [pc, #300]	; (8009c24 <xTaskIncrementTick+0x14c>)
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d122      	bne.n	8009b46 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b00:	4b49      	ldr	r3, [pc, #292]	; (8009c28 <xTaskIncrementTick+0x150>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00c      	beq.n	8009b24 <xTaskIncrementTick+0x4c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0e:	b672      	cpsid	i
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	b662      	cpsie	i
 8009b1e:	603b      	str	r3, [r7, #0]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009b20:	bf00      	nop
 8009b22:	e7fe      	b.n	8009b22 <xTaskIncrementTick+0x4a>
 8009b24:	4b40      	ldr	r3, [pc, #256]	; (8009c28 <xTaskIncrementTick+0x150>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	60fb      	str	r3, [r7, #12]
 8009b2a:	4b40      	ldr	r3, [pc, #256]	; (8009c2c <xTaskIncrementTick+0x154>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a3e      	ldr	r2, [pc, #248]	; (8009c28 <xTaskIncrementTick+0x150>)
 8009b30:	6013      	str	r3, [r2, #0]
 8009b32:	4a3e      	ldr	r2, [pc, #248]	; (8009c2c <xTaskIncrementTick+0x154>)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6013      	str	r3, [r2, #0]
 8009b38:	4b3d      	ldr	r3, [pc, #244]	; (8009c30 <xTaskIncrementTick+0x158>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	4a3c      	ldr	r2, [pc, #240]	; (8009c30 <xTaskIncrementTick+0x158>)
 8009b40:	6013      	str	r3, [r2, #0]
 8009b42:	f000 f8e1 	bl	8009d08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b46:	4b3b      	ldr	r3, [pc, #236]	; (8009c34 <xTaskIncrementTick+0x15c>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d348      	bcc.n	8009be2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b50:	4b35      	ldr	r3, [pc, #212]	; (8009c28 <xTaskIncrementTick+0x150>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d104      	bne.n	8009b64 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b5a:	4b36      	ldr	r3, [pc, #216]	; (8009c34 <xTaskIncrementTick+0x15c>)
 8009b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b60:	601a      	str	r2, [r3, #0]
					break;
 8009b62:	e03e      	b.n	8009be2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b64:	4b30      	ldr	r3, [pc, #192]	; (8009c28 <xTaskIncrementTick+0x150>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d203      	bcs.n	8009b84 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b7c:	4a2d      	ldr	r2, [pc, #180]	; (8009c34 <xTaskIncrementTick+0x15c>)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b82:	e02e      	b.n	8009be2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	3304      	adds	r3, #4
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7ff ff7a 	bl	8009a82 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d004      	beq.n	8009ba0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	3318      	adds	r3, #24
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7ff ff71 	bl	8009a82 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	409a      	lsls	r2, r3
 8009ba8:	4b23      	ldr	r3, [pc, #140]	; (8009c38 <xTaskIncrementTick+0x160>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	4a22      	ldr	r2, [pc, #136]	; (8009c38 <xTaskIncrementTick+0x160>)
 8009bb0:	6013      	str	r3, [r2, #0]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	4413      	add	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4a1f      	ldr	r2, [pc, #124]	; (8009c3c <xTaskIncrementTick+0x164>)
 8009bc0:	441a      	add	r2, r3
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	4610      	mov	r0, r2
 8009bca:	f7ff ff36 	bl	8009a3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd2:	4b1b      	ldr	r3, [pc, #108]	; (8009c40 <xTaskIncrementTick+0x168>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d3b9      	bcc.n	8009b50 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009be0:	e7b6      	b.n	8009b50 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009be2:	4b17      	ldr	r3, [pc, #92]	; (8009c40 <xTaskIncrementTick+0x168>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be8:	4914      	ldr	r1, [pc, #80]	; (8009c3c <xTaskIncrementTick+0x164>)
 8009bea:	4613      	mov	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4413      	add	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	440b      	add	r3, r1
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d907      	bls.n	8009c0a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	617b      	str	r3, [r7, #20]
 8009bfe:	e004      	b.n	8009c0a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009c00:	4b10      	ldr	r3, [pc, #64]	; (8009c44 <xTaskIncrementTick+0x16c>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3301      	adds	r3, #1
 8009c06:	4a0f      	ldr	r2, [pc, #60]	; (8009c44 <xTaskIncrementTick+0x16c>)
 8009c08:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009c0a:	4b0f      	ldr	r3, [pc, #60]	; (8009c48 <xTaskIncrementTick+0x170>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d001      	beq.n	8009c16 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8009c12:	2301      	movs	r3, #1
 8009c14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009c16:	697b      	ldr	r3, [r7, #20]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3718      	adds	r7, #24
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	20000758 	.word	0x20000758
 8009c24:	2000073c 	.word	0x2000073c
 8009c28:	20000734 	.word	0x20000734
 8009c2c:	20000738 	.word	0x20000738
 8009c30:	20000750 	.word	0x20000750
 8009c34:	20000754 	.word	0x20000754
 8009c38:	20000740 	.word	0x20000740
 8009c3c:	200006a8 	.word	0x200006a8
 8009c40:	200006a4 	.word	0x200006a4
 8009c44:	20000748 	.word	0x20000748
 8009c48:	2000074c 	.word	0x2000074c

08009c4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b087      	sub	sp, #28
 8009c50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c52:	4b28      	ldr	r3, [pc, #160]	; (8009cf4 <vTaskSwitchContext+0xa8>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c5a:	4b27      	ldr	r3, [pc, #156]	; (8009cf8 <vTaskSwitchContext+0xac>)
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c60:	e041      	b.n	8009ce6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009c62:	4b25      	ldr	r3, [pc, #148]	; (8009cf8 <vTaskSwitchContext+0xac>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c68:	4b24      	ldr	r3, [pc, #144]	; (8009cfc <vTaskSwitchContext+0xb0>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	fab3 f383 	clz	r3, r3
 8009c74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009c76:	7afb      	ldrb	r3, [r7, #11]
 8009c78:	f1c3 031f 	rsb	r3, r3, #31
 8009c7c:	617b      	str	r3, [r7, #20]
 8009c7e:	4920      	ldr	r1, [pc, #128]	; (8009d00 <vTaskSwitchContext+0xb4>)
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	4613      	mov	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	440b      	add	r3, r1
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10c      	bne.n	8009cac <vTaskSwitchContext+0x60>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	b672      	cpsid	i
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	b662      	cpsie	i
 8009ca6:	607b      	str	r3, [r7, #4]
}
 8009ca8:	bf00      	nop
 8009caa:	e7fe      	b.n	8009caa <vTaskSwitchContext+0x5e>
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4a12      	ldr	r2, [pc, #72]	; (8009d00 <vTaskSwitchContext+0xb4>)
 8009cb8:	4413      	add	r3, r2
 8009cba:	613b      	str	r3, [r7, #16]
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	605a      	str	r2, [r3, #4]
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	3308      	adds	r3, #8
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d104      	bne.n	8009cdc <vTaskSwitchContext+0x90>
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	605a      	str	r2, [r3, #4]
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	4a08      	ldr	r2, [pc, #32]	; (8009d04 <vTaskSwitchContext+0xb8>)
 8009ce4:	6013      	str	r3, [r2, #0]
}
 8009ce6:	bf00      	nop
 8009ce8:	371c      	adds	r7, #28
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	20000758 	.word	0x20000758
 8009cf8:	2000074c 	.word	0x2000074c
 8009cfc:	20000740 	.word	0x20000740
 8009d00:	200006a8 	.word	0x200006a8
 8009d04:	200006a4 	.word	0x200006a4

08009d08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d0e:	4b0c      	ldr	r3, [pc, #48]	; (8009d40 <prvResetNextTaskUnblockTime+0x38>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d104      	bne.n	8009d22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d18:	4b0a      	ldr	r3, [pc, #40]	; (8009d44 <prvResetNextTaskUnblockTime+0x3c>)
 8009d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d20:	e008      	b.n	8009d34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d22:	4b07      	ldr	r3, [pc, #28]	; (8009d40 <prvResetNextTaskUnblockTime+0x38>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	4a04      	ldr	r2, [pc, #16]	; (8009d44 <prvResetNextTaskUnblockTime+0x3c>)
 8009d32:	6013      	str	r3, [r2, #0]
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr
 8009d40:	20000734 	.word	0x20000734
 8009d44:	20000754 	.word	0x20000754

08009d48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d4e:	4b0b      	ldr	r3, [pc, #44]	; (8009d7c <xTaskGetSchedulerState+0x34>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d102      	bne.n	8009d5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d56:	2301      	movs	r3, #1
 8009d58:	607b      	str	r3, [r7, #4]
 8009d5a:	e008      	b.n	8009d6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d5c:	4b08      	ldr	r3, [pc, #32]	; (8009d80 <xTaskGetSchedulerState+0x38>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d102      	bne.n	8009d6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d64:	2302      	movs	r3, #2
 8009d66:	607b      	str	r3, [r7, #4]
 8009d68:	e001      	b.n	8009d6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d6e:	687b      	ldr	r3, [r7, #4]
	}
 8009d70:	4618      	mov	r0, r3
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr
 8009d7c:	20000744 	.word	0x20000744
 8009d80:	20000758 	.word	0x20000758
	...

08009d90 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d90:	4b07      	ldr	r3, [pc, #28]	; (8009db0 <pxCurrentTCBConst2>)
 8009d92:	6819      	ldr	r1, [r3, #0]
 8009d94:	6808      	ldr	r0, [r1, #0]
 8009d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9a:	f380 8809 	msr	PSP, r0
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f04f 0000 	mov.w	r0, #0
 8009da6:	f380 8811 	msr	BASEPRI, r0
 8009daa:	4770      	bx	lr
 8009dac:	f3af 8000 	nop.w

08009db0 <pxCurrentTCBConst2>:
 8009db0:	200006a4 	.word	0x200006a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop
	...

08009dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009dc0:	f3ef 8009 	mrs	r0, PSP
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	4b15      	ldr	r3, [pc, #84]	; (8009e20 <pxCurrentTCBConst>)
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	f01e 0f10 	tst.w	lr, #16
 8009dd0:	bf08      	it	eq
 8009dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dda:	6010      	str	r0, [r2, #0]
 8009ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009de4:	b672      	cpsid	i
 8009de6:	f380 8811 	msr	BASEPRI, r0
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	f3bf 8f6f 	isb	sy
 8009df2:	b662      	cpsie	i
 8009df4:	f7ff ff2a 	bl	8009c4c <vTaskSwitchContext>
 8009df8:	f04f 0000 	mov.w	r0, #0
 8009dfc:	f380 8811 	msr	BASEPRI, r0
 8009e00:	bc09      	pop	{r0, r3}
 8009e02:	6819      	ldr	r1, [r3, #0]
 8009e04:	6808      	ldr	r0, [r1, #0]
 8009e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0a:	f01e 0f10 	tst.w	lr, #16
 8009e0e:	bf08      	it	eq
 8009e10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e14:	f380 8809 	msr	PSP, r0
 8009e18:	f3bf 8f6f 	isb	sy
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop

08009e20 <pxCurrentTCBConst>:
 8009e20:	200006a4 	.word	0x200006a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e24:	bf00      	nop
 8009e26:	bf00      	nop

08009e28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e32:	b672      	cpsid	i
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	b662      	cpsie	i
 8009e42:	607b      	str	r3, [r7, #4]
}
 8009e44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e46:	f7ff fe47 	bl	8009ad8 <xTaskIncrementTick>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d003      	beq.n	8009e58 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e50:	4b06      	ldr	r3, [pc, #24]	; (8009e6c <xPortSysTickHandler+0x44>)
 8009e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e56:	601a      	str	r2, [r3, #0]
 8009e58:	2300      	movs	r3, #0
 8009e5a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009e62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	e000ed04 	.word	0xe000ed04

08009e70 <siprintf>:
 8009e70:	b40e      	push	{r1, r2, r3}
 8009e72:	b500      	push	{lr}
 8009e74:	b09c      	sub	sp, #112	; 0x70
 8009e76:	ab1d      	add	r3, sp, #116	; 0x74
 8009e78:	9002      	str	r0, [sp, #8]
 8009e7a:	9006      	str	r0, [sp, #24]
 8009e7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e80:	4809      	ldr	r0, [pc, #36]	; (8009ea8 <siprintf+0x38>)
 8009e82:	9107      	str	r1, [sp, #28]
 8009e84:	9104      	str	r1, [sp, #16]
 8009e86:	4909      	ldr	r1, [pc, #36]	; (8009eac <siprintf+0x3c>)
 8009e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e8c:	9105      	str	r1, [sp, #20]
 8009e8e:	6800      	ldr	r0, [r0, #0]
 8009e90:	9301      	str	r3, [sp, #4]
 8009e92:	a902      	add	r1, sp, #8
 8009e94:	f000 f9a8 	bl	800a1e8 <_svfiprintf_r>
 8009e98:	9b02      	ldr	r3, [sp, #8]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	701a      	strb	r2, [r3, #0]
 8009e9e:	b01c      	add	sp, #112	; 0x70
 8009ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ea4:	b003      	add	sp, #12
 8009ea6:	4770      	bx	lr
 8009ea8:	20000330 	.word	0x20000330
 8009eac:	ffff0208 	.word	0xffff0208

08009eb0 <memset>:
 8009eb0:	4402      	add	r2, r0
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d100      	bne.n	8009eba <memset+0xa>
 8009eb8:	4770      	bx	lr
 8009eba:	f803 1b01 	strb.w	r1, [r3], #1
 8009ebe:	e7f9      	b.n	8009eb4 <memset+0x4>

08009ec0 <__errno>:
 8009ec0:	4b01      	ldr	r3, [pc, #4]	; (8009ec8 <__errno+0x8>)
 8009ec2:	6818      	ldr	r0, [r3, #0]
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	20000330 	.word	0x20000330

08009ecc <__libc_init_array>:
 8009ecc:	b570      	push	{r4, r5, r6, lr}
 8009ece:	4d0d      	ldr	r5, [pc, #52]	; (8009f04 <__libc_init_array+0x38>)
 8009ed0:	4c0d      	ldr	r4, [pc, #52]	; (8009f08 <__libc_init_array+0x3c>)
 8009ed2:	1b64      	subs	r4, r4, r5
 8009ed4:	10a4      	asrs	r4, r4, #2
 8009ed6:	2600      	movs	r6, #0
 8009ed8:	42a6      	cmp	r6, r4
 8009eda:	d109      	bne.n	8009ef0 <__libc_init_array+0x24>
 8009edc:	4d0b      	ldr	r5, [pc, #44]	; (8009f0c <__libc_init_array+0x40>)
 8009ede:	4c0c      	ldr	r4, [pc, #48]	; (8009f10 <__libc_init_array+0x44>)
 8009ee0:	f000 fc72 	bl	800a7c8 <_init>
 8009ee4:	1b64      	subs	r4, r4, r5
 8009ee6:	10a4      	asrs	r4, r4, #2
 8009ee8:	2600      	movs	r6, #0
 8009eea:	42a6      	cmp	r6, r4
 8009eec:	d105      	bne.n	8009efa <__libc_init_array+0x2e>
 8009eee:	bd70      	pop	{r4, r5, r6, pc}
 8009ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ef4:	4798      	blx	r3
 8009ef6:	3601      	adds	r6, #1
 8009ef8:	e7ee      	b.n	8009ed8 <__libc_init_array+0xc>
 8009efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009efe:	4798      	blx	r3
 8009f00:	3601      	adds	r6, #1
 8009f02:	e7f2      	b.n	8009eea <__libc_init_array+0x1e>
 8009f04:	0800a84c 	.word	0x0800a84c
 8009f08:	0800a84c 	.word	0x0800a84c
 8009f0c:	0800a84c 	.word	0x0800a84c
 8009f10:	0800a850 	.word	0x0800a850

08009f14 <__retarget_lock_acquire_recursive>:
 8009f14:	4770      	bx	lr

08009f16 <__retarget_lock_release_recursive>:
 8009f16:	4770      	bx	lr

08009f18 <strcpy>:
 8009f18:	4603      	mov	r3, r0
 8009f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f1e:	f803 2b01 	strb.w	r2, [r3], #1
 8009f22:	2a00      	cmp	r2, #0
 8009f24:	d1f9      	bne.n	8009f1a <strcpy+0x2>
 8009f26:	4770      	bx	lr

08009f28 <memcpy>:
 8009f28:	440a      	add	r2, r1
 8009f2a:	4291      	cmp	r1, r2
 8009f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f30:	d100      	bne.n	8009f34 <memcpy+0xc>
 8009f32:	4770      	bx	lr
 8009f34:	b510      	push	{r4, lr}
 8009f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f3e:	4291      	cmp	r1, r2
 8009f40:	d1f9      	bne.n	8009f36 <memcpy+0xe>
 8009f42:	bd10      	pop	{r4, pc}

08009f44 <_free_r>:
 8009f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f46:	2900      	cmp	r1, #0
 8009f48:	d044      	beq.n	8009fd4 <_free_r+0x90>
 8009f4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f4e:	9001      	str	r0, [sp, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f1a1 0404 	sub.w	r4, r1, #4
 8009f56:	bfb8      	it	lt
 8009f58:	18e4      	addlt	r4, r4, r3
 8009f5a:	f000 f8df 	bl	800a11c <__malloc_lock>
 8009f5e:	4a1e      	ldr	r2, [pc, #120]	; (8009fd8 <_free_r+0x94>)
 8009f60:	9801      	ldr	r0, [sp, #4]
 8009f62:	6813      	ldr	r3, [r2, #0]
 8009f64:	b933      	cbnz	r3, 8009f74 <_free_r+0x30>
 8009f66:	6063      	str	r3, [r4, #4]
 8009f68:	6014      	str	r4, [r2, #0]
 8009f6a:	b003      	add	sp, #12
 8009f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f70:	f000 b8da 	b.w	800a128 <__malloc_unlock>
 8009f74:	42a3      	cmp	r3, r4
 8009f76:	d908      	bls.n	8009f8a <_free_r+0x46>
 8009f78:	6825      	ldr	r5, [r4, #0]
 8009f7a:	1961      	adds	r1, r4, r5
 8009f7c:	428b      	cmp	r3, r1
 8009f7e:	bf01      	itttt	eq
 8009f80:	6819      	ldreq	r1, [r3, #0]
 8009f82:	685b      	ldreq	r3, [r3, #4]
 8009f84:	1949      	addeq	r1, r1, r5
 8009f86:	6021      	streq	r1, [r4, #0]
 8009f88:	e7ed      	b.n	8009f66 <_free_r+0x22>
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	b10b      	cbz	r3, 8009f94 <_free_r+0x50>
 8009f90:	42a3      	cmp	r3, r4
 8009f92:	d9fa      	bls.n	8009f8a <_free_r+0x46>
 8009f94:	6811      	ldr	r1, [r2, #0]
 8009f96:	1855      	adds	r5, r2, r1
 8009f98:	42a5      	cmp	r5, r4
 8009f9a:	d10b      	bne.n	8009fb4 <_free_r+0x70>
 8009f9c:	6824      	ldr	r4, [r4, #0]
 8009f9e:	4421      	add	r1, r4
 8009fa0:	1854      	adds	r4, r2, r1
 8009fa2:	42a3      	cmp	r3, r4
 8009fa4:	6011      	str	r1, [r2, #0]
 8009fa6:	d1e0      	bne.n	8009f6a <_free_r+0x26>
 8009fa8:	681c      	ldr	r4, [r3, #0]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	6053      	str	r3, [r2, #4]
 8009fae:	440c      	add	r4, r1
 8009fb0:	6014      	str	r4, [r2, #0]
 8009fb2:	e7da      	b.n	8009f6a <_free_r+0x26>
 8009fb4:	d902      	bls.n	8009fbc <_free_r+0x78>
 8009fb6:	230c      	movs	r3, #12
 8009fb8:	6003      	str	r3, [r0, #0]
 8009fba:	e7d6      	b.n	8009f6a <_free_r+0x26>
 8009fbc:	6825      	ldr	r5, [r4, #0]
 8009fbe:	1961      	adds	r1, r4, r5
 8009fc0:	428b      	cmp	r3, r1
 8009fc2:	bf04      	itt	eq
 8009fc4:	6819      	ldreq	r1, [r3, #0]
 8009fc6:	685b      	ldreq	r3, [r3, #4]
 8009fc8:	6063      	str	r3, [r4, #4]
 8009fca:	bf04      	itt	eq
 8009fcc:	1949      	addeq	r1, r1, r5
 8009fce:	6021      	streq	r1, [r4, #0]
 8009fd0:	6054      	str	r4, [r2, #4]
 8009fd2:	e7ca      	b.n	8009f6a <_free_r+0x26>
 8009fd4:	b003      	add	sp, #12
 8009fd6:	bd30      	pop	{r4, r5, pc}
 8009fd8:	2000089c 	.word	0x2000089c

08009fdc <sbrk_aligned>:
 8009fdc:	b570      	push	{r4, r5, r6, lr}
 8009fde:	4e0e      	ldr	r6, [pc, #56]	; (800a018 <sbrk_aligned+0x3c>)
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	6831      	ldr	r1, [r6, #0]
 8009fe4:	4605      	mov	r5, r0
 8009fe6:	b911      	cbnz	r1, 8009fee <sbrk_aligned+0x12>
 8009fe8:	f000 fba6 	bl	800a738 <_sbrk_r>
 8009fec:	6030      	str	r0, [r6, #0]
 8009fee:	4621      	mov	r1, r4
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f000 fba1 	bl	800a738 <_sbrk_r>
 8009ff6:	1c43      	adds	r3, r0, #1
 8009ff8:	d00a      	beq.n	800a010 <sbrk_aligned+0x34>
 8009ffa:	1cc4      	adds	r4, r0, #3
 8009ffc:	f024 0403 	bic.w	r4, r4, #3
 800a000:	42a0      	cmp	r0, r4
 800a002:	d007      	beq.n	800a014 <sbrk_aligned+0x38>
 800a004:	1a21      	subs	r1, r4, r0
 800a006:	4628      	mov	r0, r5
 800a008:	f000 fb96 	bl	800a738 <_sbrk_r>
 800a00c:	3001      	adds	r0, #1
 800a00e:	d101      	bne.n	800a014 <sbrk_aligned+0x38>
 800a010:	f04f 34ff 	mov.w	r4, #4294967295
 800a014:	4620      	mov	r0, r4
 800a016:	bd70      	pop	{r4, r5, r6, pc}
 800a018:	200008a0 	.word	0x200008a0

0800a01c <_malloc_r>:
 800a01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a020:	1ccd      	adds	r5, r1, #3
 800a022:	f025 0503 	bic.w	r5, r5, #3
 800a026:	3508      	adds	r5, #8
 800a028:	2d0c      	cmp	r5, #12
 800a02a:	bf38      	it	cc
 800a02c:	250c      	movcc	r5, #12
 800a02e:	2d00      	cmp	r5, #0
 800a030:	4607      	mov	r7, r0
 800a032:	db01      	blt.n	800a038 <_malloc_r+0x1c>
 800a034:	42a9      	cmp	r1, r5
 800a036:	d905      	bls.n	800a044 <_malloc_r+0x28>
 800a038:	230c      	movs	r3, #12
 800a03a:	603b      	str	r3, [r7, #0]
 800a03c:	2600      	movs	r6, #0
 800a03e:	4630      	mov	r0, r6
 800a040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a044:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a118 <_malloc_r+0xfc>
 800a048:	f000 f868 	bl	800a11c <__malloc_lock>
 800a04c:	f8d8 3000 	ldr.w	r3, [r8]
 800a050:	461c      	mov	r4, r3
 800a052:	bb5c      	cbnz	r4, 800a0ac <_malloc_r+0x90>
 800a054:	4629      	mov	r1, r5
 800a056:	4638      	mov	r0, r7
 800a058:	f7ff ffc0 	bl	8009fdc <sbrk_aligned>
 800a05c:	1c43      	adds	r3, r0, #1
 800a05e:	4604      	mov	r4, r0
 800a060:	d155      	bne.n	800a10e <_malloc_r+0xf2>
 800a062:	f8d8 4000 	ldr.w	r4, [r8]
 800a066:	4626      	mov	r6, r4
 800a068:	2e00      	cmp	r6, #0
 800a06a:	d145      	bne.n	800a0f8 <_malloc_r+0xdc>
 800a06c:	2c00      	cmp	r4, #0
 800a06e:	d048      	beq.n	800a102 <_malloc_r+0xe6>
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	4631      	mov	r1, r6
 800a074:	4638      	mov	r0, r7
 800a076:	eb04 0903 	add.w	r9, r4, r3
 800a07a:	f000 fb5d 	bl	800a738 <_sbrk_r>
 800a07e:	4581      	cmp	r9, r0
 800a080:	d13f      	bne.n	800a102 <_malloc_r+0xe6>
 800a082:	6821      	ldr	r1, [r4, #0]
 800a084:	1a6d      	subs	r5, r5, r1
 800a086:	4629      	mov	r1, r5
 800a088:	4638      	mov	r0, r7
 800a08a:	f7ff ffa7 	bl	8009fdc <sbrk_aligned>
 800a08e:	3001      	adds	r0, #1
 800a090:	d037      	beq.n	800a102 <_malloc_r+0xe6>
 800a092:	6823      	ldr	r3, [r4, #0]
 800a094:	442b      	add	r3, r5
 800a096:	6023      	str	r3, [r4, #0]
 800a098:	f8d8 3000 	ldr.w	r3, [r8]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d038      	beq.n	800a112 <_malloc_r+0xf6>
 800a0a0:	685a      	ldr	r2, [r3, #4]
 800a0a2:	42a2      	cmp	r2, r4
 800a0a4:	d12b      	bne.n	800a0fe <_malloc_r+0xe2>
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	605a      	str	r2, [r3, #4]
 800a0aa:	e00f      	b.n	800a0cc <_malloc_r+0xb0>
 800a0ac:	6822      	ldr	r2, [r4, #0]
 800a0ae:	1b52      	subs	r2, r2, r5
 800a0b0:	d41f      	bmi.n	800a0f2 <_malloc_r+0xd6>
 800a0b2:	2a0b      	cmp	r2, #11
 800a0b4:	d917      	bls.n	800a0e6 <_malloc_r+0xca>
 800a0b6:	1961      	adds	r1, r4, r5
 800a0b8:	42a3      	cmp	r3, r4
 800a0ba:	6025      	str	r5, [r4, #0]
 800a0bc:	bf18      	it	ne
 800a0be:	6059      	strne	r1, [r3, #4]
 800a0c0:	6863      	ldr	r3, [r4, #4]
 800a0c2:	bf08      	it	eq
 800a0c4:	f8c8 1000 	streq.w	r1, [r8]
 800a0c8:	5162      	str	r2, [r4, r5]
 800a0ca:	604b      	str	r3, [r1, #4]
 800a0cc:	4638      	mov	r0, r7
 800a0ce:	f104 060b 	add.w	r6, r4, #11
 800a0d2:	f000 f829 	bl	800a128 <__malloc_unlock>
 800a0d6:	f026 0607 	bic.w	r6, r6, #7
 800a0da:	1d23      	adds	r3, r4, #4
 800a0dc:	1af2      	subs	r2, r6, r3
 800a0de:	d0ae      	beq.n	800a03e <_malloc_r+0x22>
 800a0e0:	1b9b      	subs	r3, r3, r6
 800a0e2:	50a3      	str	r3, [r4, r2]
 800a0e4:	e7ab      	b.n	800a03e <_malloc_r+0x22>
 800a0e6:	42a3      	cmp	r3, r4
 800a0e8:	6862      	ldr	r2, [r4, #4]
 800a0ea:	d1dd      	bne.n	800a0a8 <_malloc_r+0x8c>
 800a0ec:	f8c8 2000 	str.w	r2, [r8]
 800a0f0:	e7ec      	b.n	800a0cc <_malloc_r+0xb0>
 800a0f2:	4623      	mov	r3, r4
 800a0f4:	6864      	ldr	r4, [r4, #4]
 800a0f6:	e7ac      	b.n	800a052 <_malloc_r+0x36>
 800a0f8:	4634      	mov	r4, r6
 800a0fa:	6876      	ldr	r6, [r6, #4]
 800a0fc:	e7b4      	b.n	800a068 <_malloc_r+0x4c>
 800a0fe:	4613      	mov	r3, r2
 800a100:	e7cc      	b.n	800a09c <_malloc_r+0x80>
 800a102:	230c      	movs	r3, #12
 800a104:	603b      	str	r3, [r7, #0]
 800a106:	4638      	mov	r0, r7
 800a108:	f000 f80e 	bl	800a128 <__malloc_unlock>
 800a10c:	e797      	b.n	800a03e <_malloc_r+0x22>
 800a10e:	6025      	str	r5, [r4, #0]
 800a110:	e7dc      	b.n	800a0cc <_malloc_r+0xb0>
 800a112:	605b      	str	r3, [r3, #4]
 800a114:	deff      	udf	#255	; 0xff
 800a116:	bf00      	nop
 800a118:	2000089c 	.word	0x2000089c

0800a11c <__malloc_lock>:
 800a11c:	4801      	ldr	r0, [pc, #4]	; (800a124 <__malloc_lock+0x8>)
 800a11e:	f7ff bef9 	b.w	8009f14 <__retarget_lock_acquire_recursive>
 800a122:	bf00      	nop
 800a124:	20000898 	.word	0x20000898

0800a128 <__malloc_unlock>:
 800a128:	4801      	ldr	r0, [pc, #4]	; (800a130 <__malloc_unlock+0x8>)
 800a12a:	f7ff bef4 	b.w	8009f16 <__retarget_lock_release_recursive>
 800a12e:	bf00      	nop
 800a130:	20000898 	.word	0x20000898

0800a134 <__ssputs_r>:
 800a134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a138:	688e      	ldr	r6, [r1, #8]
 800a13a:	461f      	mov	r7, r3
 800a13c:	42be      	cmp	r6, r7
 800a13e:	680b      	ldr	r3, [r1, #0]
 800a140:	4682      	mov	sl, r0
 800a142:	460c      	mov	r4, r1
 800a144:	4690      	mov	r8, r2
 800a146:	d82c      	bhi.n	800a1a2 <__ssputs_r+0x6e>
 800a148:	898a      	ldrh	r2, [r1, #12]
 800a14a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a14e:	d026      	beq.n	800a19e <__ssputs_r+0x6a>
 800a150:	6965      	ldr	r5, [r4, #20]
 800a152:	6909      	ldr	r1, [r1, #16]
 800a154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a158:	eba3 0901 	sub.w	r9, r3, r1
 800a15c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a160:	1c7b      	adds	r3, r7, #1
 800a162:	444b      	add	r3, r9
 800a164:	106d      	asrs	r5, r5, #1
 800a166:	429d      	cmp	r5, r3
 800a168:	bf38      	it	cc
 800a16a:	461d      	movcc	r5, r3
 800a16c:	0553      	lsls	r3, r2, #21
 800a16e:	d527      	bpl.n	800a1c0 <__ssputs_r+0x8c>
 800a170:	4629      	mov	r1, r5
 800a172:	f7ff ff53 	bl	800a01c <_malloc_r>
 800a176:	4606      	mov	r6, r0
 800a178:	b360      	cbz	r0, 800a1d4 <__ssputs_r+0xa0>
 800a17a:	6921      	ldr	r1, [r4, #16]
 800a17c:	464a      	mov	r2, r9
 800a17e:	f7ff fed3 	bl	8009f28 <memcpy>
 800a182:	89a3      	ldrh	r3, [r4, #12]
 800a184:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a18c:	81a3      	strh	r3, [r4, #12]
 800a18e:	6126      	str	r6, [r4, #16]
 800a190:	6165      	str	r5, [r4, #20]
 800a192:	444e      	add	r6, r9
 800a194:	eba5 0509 	sub.w	r5, r5, r9
 800a198:	6026      	str	r6, [r4, #0]
 800a19a:	60a5      	str	r5, [r4, #8]
 800a19c:	463e      	mov	r6, r7
 800a19e:	42be      	cmp	r6, r7
 800a1a0:	d900      	bls.n	800a1a4 <__ssputs_r+0x70>
 800a1a2:	463e      	mov	r6, r7
 800a1a4:	6820      	ldr	r0, [r4, #0]
 800a1a6:	4632      	mov	r2, r6
 800a1a8:	4641      	mov	r1, r8
 800a1aa:	f000 faab 	bl	800a704 <memmove>
 800a1ae:	68a3      	ldr	r3, [r4, #8]
 800a1b0:	1b9b      	subs	r3, r3, r6
 800a1b2:	60a3      	str	r3, [r4, #8]
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	4433      	add	r3, r6
 800a1b8:	6023      	str	r3, [r4, #0]
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c0:	462a      	mov	r2, r5
 800a1c2:	f000 fac9 	bl	800a758 <_realloc_r>
 800a1c6:	4606      	mov	r6, r0
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d1e0      	bne.n	800a18e <__ssputs_r+0x5a>
 800a1cc:	6921      	ldr	r1, [r4, #16]
 800a1ce:	4650      	mov	r0, sl
 800a1d0:	f7ff feb8 	bl	8009f44 <_free_r>
 800a1d4:	230c      	movs	r3, #12
 800a1d6:	f8ca 3000 	str.w	r3, [sl]
 800a1da:	89a3      	ldrh	r3, [r4, #12]
 800a1dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1e0:	81a3      	strh	r3, [r4, #12]
 800a1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e6:	e7e9      	b.n	800a1bc <__ssputs_r+0x88>

0800a1e8 <_svfiprintf_r>:
 800a1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ec:	4698      	mov	r8, r3
 800a1ee:	898b      	ldrh	r3, [r1, #12]
 800a1f0:	061b      	lsls	r3, r3, #24
 800a1f2:	b09d      	sub	sp, #116	; 0x74
 800a1f4:	4607      	mov	r7, r0
 800a1f6:	460d      	mov	r5, r1
 800a1f8:	4614      	mov	r4, r2
 800a1fa:	d50e      	bpl.n	800a21a <_svfiprintf_r+0x32>
 800a1fc:	690b      	ldr	r3, [r1, #16]
 800a1fe:	b963      	cbnz	r3, 800a21a <_svfiprintf_r+0x32>
 800a200:	2140      	movs	r1, #64	; 0x40
 800a202:	f7ff ff0b 	bl	800a01c <_malloc_r>
 800a206:	6028      	str	r0, [r5, #0]
 800a208:	6128      	str	r0, [r5, #16]
 800a20a:	b920      	cbnz	r0, 800a216 <_svfiprintf_r+0x2e>
 800a20c:	230c      	movs	r3, #12
 800a20e:	603b      	str	r3, [r7, #0]
 800a210:	f04f 30ff 	mov.w	r0, #4294967295
 800a214:	e0d0      	b.n	800a3b8 <_svfiprintf_r+0x1d0>
 800a216:	2340      	movs	r3, #64	; 0x40
 800a218:	616b      	str	r3, [r5, #20]
 800a21a:	2300      	movs	r3, #0
 800a21c:	9309      	str	r3, [sp, #36]	; 0x24
 800a21e:	2320      	movs	r3, #32
 800a220:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a224:	f8cd 800c 	str.w	r8, [sp, #12]
 800a228:	2330      	movs	r3, #48	; 0x30
 800a22a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a3d0 <_svfiprintf_r+0x1e8>
 800a22e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a232:	f04f 0901 	mov.w	r9, #1
 800a236:	4623      	mov	r3, r4
 800a238:	469a      	mov	sl, r3
 800a23a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a23e:	b10a      	cbz	r2, 800a244 <_svfiprintf_r+0x5c>
 800a240:	2a25      	cmp	r2, #37	; 0x25
 800a242:	d1f9      	bne.n	800a238 <_svfiprintf_r+0x50>
 800a244:	ebba 0b04 	subs.w	fp, sl, r4
 800a248:	d00b      	beq.n	800a262 <_svfiprintf_r+0x7a>
 800a24a:	465b      	mov	r3, fp
 800a24c:	4622      	mov	r2, r4
 800a24e:	4629      	mov	r1, r5
 800a250:	4638      	mov	r0, r7
 800a252:	f7ff ff6f 	bl	800a134 <__ssputs_r>
 800a256:	3001      	adds	r0, #1
 800a258:	f000 80a9 	beq.w	800a3ae <_svfiprintf_r+0x1c6>
 800a25c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a25e:	445a      	add	r2, fp
 800a260:	9209      	str	r2, [sp, #36]	; 0x24
 800a262:	f89a 3000 	ldrb.w	r3, [sl]
 800a266:	2b00      	cmp	r3, #0
 800a268:	f000 80a1 	beq.w	800a3ae <_svfiprintf_r+0x1c6>
 800a26c:	2300      	movs	r3, #0
 800a26e:	f04f 32ff 	mov.w	r2, #4294967295
 800a272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a276:	f10a 0a01 	add.w	sl, sl, #1
 800a27a:	9304      	str	r3, [sp, #16]
 800a27c:	9307      	str	r3, [sp, #28]
 800a27e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a282:	931a      	str	r3, [sp, #104]	; 0x68
 800a284:	4654      	mov	r4, sl
 800a286:	2205      	movs	r2, #5
 800a288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a28c:	4850      	ldr	r0, [pc, #320]	; (800a3d0 <_svfiprintf_r+0x1e8>)
 800a28e:	f7f5 ffd7 	bl	8000240 <memchr>
 800a292:	9a04      	ldr	r2, [sp, #16]
 800a294:	b9d8      	cbnz	r0, 800a2ce <_svfiprintf_r+0xe6>
 800a296:	06d0      	lsls	r0, r2, #27
 800a298:	bf44      	itt	mi
 800a29a:	2320      	movmi	r3, #32
 800a29c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2a0:	0711      	lsls	r1, r2, #28
 800a2a2:	bf44      	itt	mi
 800a2a4:	232b      	movmi	r3, #43	; 0x2b
 800a2a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ae:	2b2a      	cmp	r3, #42	; 0x2a
 800a2b0:	d015      	beq.n	800a2de <_svfiprintf_r+0xf6>
 800a2b2:	9a07      	ldr	r2, [sp, #28]
 800a2b4:	4654      	mov	r4, sl
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	f04f 0c0a 	mov.w	ip, #10
 800a2bc:	4621      	mov	r1, r4
 800a2be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2c2:	3b30      	subs	r3, #48	; 0x30
 800a2c4:	2b09      	cmp	r3, #9
 800a2c6:	d94d      	bls.n	800a364 <_svfiprintf_r+0x17c>
 800a2c8:	b1b0      	cbz	r0, 800a2f8 <_svfiprintf_r+0x110>
 800a2ca:	9207      	str	r2, [sp, #28]
 800a2cc:	e014      	b.n	800a2f8 <_svfiprintf_r+0x110>
 800a2ce:	eba0 0308 	sub.w	r3, r0, r8
 800a2d2:	fa09 f303 	lsl.w	r3, r9, r3
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	9304      	str	r3, [sp, #16]
 800a2da:	46a2      	mov	sl, r4
 800a2dc:	e7d2      	b.n	800a284 <_svfiprintf_r+0x9c>
 800a2de:	9b03      	ldr	r3, [sp, #12]
 800a2e0:	1d19      	adds	r1, r3, #4
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	9103      	str	r1, [sp, #12]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	bfbb      	ittet	lt
 800a2ea:	425b      	neglt	r3, r3
 800a2ec:	f042 0202 	orrlt.w	r2, r2, #2
 800a2f0:	9307      	strge	r3, [sp, #28]
 800a2f2:	9307      	strlt	r3, [sp, #28]
 800a2f4:	bfb8      	it	lt
 800a2f6:	9204      	strlt	r2, [sp, #16]
 800a2f8:	7823      	ldrb	r3, [r4, #0]
 800a2fa:	2b2e      	cmp	r3, #46	; 0x2e
 800a2fc:	d10c      	bne.n	800a318 <_svfiprintf_r+0x130>
 800a2fe:	7863      	ldrb	r3, [r4, #1]
 800a300:	2b2a      	cmp	r3, #42	; 0x2a
 800a302:	d134      	bne.n	800a36e <_svfiprintf_r+0x186>
 800a304:	9b03      	ldr	r3, [sp, #12]
 800a306:	1d1a      	adds	r2, r3, #4
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	9203      	str	r2, [sp, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	bfb8      	it	lt
 800a310:	f04f 33ff 	movlt.w	r3, #4294967295
 800a314:	3402      	adds	r4, #2
 800a316:	9305      	str	r3, [sp, #20]
 800a318:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a3e0 <_svfiprintf_r+0x1f8>
 800a31c:	7821      	ldrb	r1, [r4, #0]
 800a31e:	2203      	movs	r2, #3
 800a320:	4650      	mov	r0, sl
 800a322:	f7f5 ff8d 	bl	8000240 <memchr>
 800a326:	b138      	cbz	r0, 800a338 <_svfiprintf_r+0x150>
 800a328:	9b04      	ldr	r3, [sp, #16]
 800a32a:	eba0 000a 	sub.w	r0, r0, sl
 800a32e:	2240      	movs	r2, #64	; 0x40
 800a330:	4082      	lsls	r2, r0
 800a332:	4313      	orrs	r3, r2
 800a334:	3401      	adds	r4, #1
 800a336:	9304      	str	r3, [sp, #16]
 800a338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a33c:	4825      	ldr	r0, [pc, #148]	; (800a3d4 <_svfiprintf_r+0x1ec>)
 800a33e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a342:	2206      	movs	r2, #6
 800a344:	f7f5 ff7c 	bl	8000240 <memchr>
 800a348:	2800      	cmp	r0, #0
 800a34a:	d038      	beq.n	800a3be <_svfiprintf_r+0x1d6>
 800a34c:	4b22      	ldr	r3, [pc, #136]	; (800a3d8 <_svfiprintf_r+0x1f0>)
 800a34e:	bb1b      	cbnz	r3, 800a398 <_svfiprintf_r+0x1b0>
 800a350:	9b03      	ldr	r3, [sp, #12]
 800a352:	3307      	adds	r3, #7
 800a354:	f023 0307 	bic.w	r3, r3, #7
 800a358:	3308      	adds	r3, #8
 800a35a:	9303      	str	r3, [sp, #12]
 800a35c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a35e:	4433      	add	r3, r6
 800a360:	9309      	str	r3, [sp, #36]	; 0x24
 800a362:	e768      	b.n	800a236 <_svfiprintf_r+0x4e>
 800a364:	fb0c 3202 	mla	r2, ip, r2, r3
 800a368:	460c      	mov	r4, r1
 800a36a:	2001      	movs	r0, #1
 800a36c:	e7a6      	b.n	800a2bc <_svfiprintf_r+0xd4>
 800a36e:	2300      	movs	r3, #0
 800a370:	3401      	adds	r4, #1
 800a372:	9305      	str	r3, [sp, #20]
 800a374:	4619      	mov	r1, r3
 800a376:	f04f 0c0a 	mov.w	ip, #10
 800a37a:	4620      	mov	r0, r4
 800a37c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a380:	3a30      	subs	r2, #48	; 0x30
 800a382:	2a09      	cmp	r2, #9
 800a384:	d903      	bls.n	800a38e <_svfiprintf_r+0x1a6>
 800a386:	2b00      	cmp	r3, #0
 800a388:	d0c6      	beq.n	800a318 <_svfiprintf_r+0x130>
 800a38a:	9105      	str	r1, [sp, #20]
 800a38c:	e7c4      	b.n	800a318 <_svfiprintf_r+0x130>
 800a38e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a392:	4604      	mov	r4, r0
 800a394:	2301      	movs	r3, #1
 800a396:	e7f0      	b.n	800a37a <_svfiprintf_r+0x192>
 800a398:	ab03      	add	r3, sp, #12
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	462a      	mov	r2, r5
 800a39e:	4b0f      	ldr	r3, [pc, #60]	; (800a3dc <_svfiprintf_r+0x1f4>)
 800a3a0:	a904      	add	r1, sp, #16
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	f3af 8000 	nop.w
 800a3a8:	1c42      	adds	r2, r0, #1
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	d1d6      	bne.n	800a35c <_svfiprintf_r+0x174>
 800a3ae:	89ab      	ldrh	r3, [r5, #12]
 800a3b0:	065b      	lsls	r3, r3, #25
 800a3b2:	f53f af2d 	bmi.w	800a210 <_svfiprintf_r+0x28>
 800a3b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3b8:	b01d      	add	sp, #116	; 0x74
 800a3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3be:	ab03      	add	r3, sp, #12
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	462a      	mov	r2, r5
 800a3c4:	4b05      	ldr	r3, [pc, #20]	; (800a3dc <_svfiprintf_r+0x1f4>)
 800a3c6:	a904      	add	r1, sp, #16
 800a3c8:	4638      	mov	r0, r7
 800a3ca:	f000 f879 	bl	800a4c0 <_printf_i>
 800a3ce:	e7eb      	b.n	800a3a8 <_svfiprintf_r+0x1c0>
 800a3d0:	0800a810 	.word	0x0800a810
 800a3d4:	0800a81a 	.word	0x0800a81a
 800a3d8:	00000000 	.word	0x00000000
 800a3dc:	0800a135 	.word	0x0800a135
 800a3e0:	0800a816 	.word	0x0800a816

0800a3e4 <_printf_common>:
 800a3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e8:	4616      	mov	r6, r2
 800a3ea:	4699      	mov	r9, r3
 800a3ec:	688a      	ldr	r2, [r1, #8]
 800a3ee:	690b      	ldr	r3, [r1, #16]
 800a3f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	bfb8      	it	lt
 800a3f8:	4613      	movlt	r3, r2
 800a3fa:	6033      	str	r3, [r6, #0]
 800a3fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a400:	4607      	mov	r7, r0
 800a402:	460c      	mov	r4, r1
 800a404:	b10a      	cbz	r2, 800a40a <_printf_common+0x26>
 800a406:	3301      	adds	r3, #1
 800a408:	6033      	str	r3, [r6, #0]
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	0699      	lsls	r1, r3, #26
 800a40e:	bf42      	ittt	mi
 800a410:	6833      	ldrmi	r3, [r6, #0]
 800a412:	3302      	addmi	r3, #2
 800a414:	6033      	strmi	r3, [r6, #0]
 800a416:	6825      	ldr	r5, [r4, #0]
 800a418:	f015 0506 	ands.w	r5, r5, #6
 800a41c:	d106      	bne.n	800a42c <_printf_common+0x48>
 800a41e:	f104 0a19 	add.w	sl, r4, #25
 800a422:	68e3      	ldr	r3, [r4, #12]
 800a424:	6832      	ldr	r2, [r6, #0]
 800a426:	1a9b      	subs	r3, r3, r2
 800a428:	42ab      	cmp	r3, r5
 800a42a:	dc26      	bgt.n	800a47a <_printf_common+0x96>
 800a42c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a430:	1e13      	subs	r3, r2, #0
 800a432:	6822      	ldr	r2, [r4, #0]
 800a434:	bf18      	it	ne
 800a436:	2301      	movne	r3, #1
 800a438:	0692      	lsls	r2, r2, #26
 800a43a:	d42b      	bmi.n	800a494 <_printf_common+0xb0>
 800a43c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a440:	4649      	mov	r1, r9
 800a442:	4638      	mov	r0, r7
 800a444:	47c0      	blx	r8
 800a446:	3001      	adds	r0, #1
 800a448:	d01e      	beq.n	800a488 <_printf_common+0xa4>
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	6922      	ldr	r2, [r4, #16]
 800a44e:	f003 0306 	and.w	r3, r3, #6
 800a452:	2b04      	cmp	r3, #4
 800a454:	bf02      	ittt	eq
 800a456:	68e5      	ldreq	r5, [r4, #12]
 800a458:	6833      	ldreq	r3, [r6, #0]
 800a45a:	1aed      	subeq	r5, r5, r3
 800a45c:	68a3      	ldr	r3, [r4, #8]
 800a45e:	bf0c      	ite	eq
 800a460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a464:	2500      	movne	r5, #0
 800a466:	4293      	cmp	r3, r2
 800a468:	bfc4      	itt	gt
 800a46a:	1a9b      	subgt	r3, r3, r2
 800a46c:	18ed      	addgt	r5, r5, r3
 800a46e:	2600      	movs	r6, #0
 800a470:	341a      	adds	r4, #26
 800a472:	42b5      	cmp	r5, r6
 800a474:	d11a      	bne.n	800a4ac <_printf_common+0xc8>
 800a476:	2000      	movs	r0, #0
 800a478:	e008      	b.n	800a48c <_printf_common+0xa8>
 800a47a:	2301      	movs	r3, #1
 800a47c:	4652      	mov	r2, sl
 800a47e:	4649      	mov	r1, r9
 800a480:	4638      	mov	r0, r7
 800a482:	47c0      	blx	r8
 800a484:	3001      	adds	r0, #1
 800a486:	d103      	bne.n	800a490 <_printf_common+0xac>
 800a488:	f04f 30ff 	mov.w	r0, #4294967295
 800a48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a490:	3501      	adds	r5, #1
 800a492:	e7c6      	b.n	800a422 <_printf_common+0x3e>
 800a494:	18e1      	adds	r1, r4, r3
 800a496:	1c5a      	adds	r2, r3, #1
 800a498:	2030      	movs	r0, #48	; 0x30
 800a49a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a49e:	4422      	add	r2, r4
 800a4a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4a8:	3302      	adds	r3, #2
 800a4aa:	e7c7      	b.n	800a43c <_printf_common+0x58>
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	4622      	mov	r2, r4
 800a4b0:	4649      	mov	r1, r9
 800a4b2:	4638      	mov	r0, r7
 800a4b4:	47c0      	blx	r8
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	d0e6      	beq.n	800a488 <_printf_common+0xa4>
 800a4ba:	3601      	adds	r6, #1
 800a4bc:	e7d9      	b.n	800a472 <_printf_common+0x8e>
	...

0800a4c0 <_printf_i>:
 800a4c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c4:	7e0f      	ldrb	r7, [r1, #24]
 800a4c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a4c8:	2f78      	cmp	r7, #120	; 0x78
 800a4ca:	4691      	mov	r9, r2
 800a4cc:	4680      	mov	r8, r0
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	469a      	mov	sl, r3
 800a4d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a4d6:	d807      	bhi.n	800a4e8 <_printf_i+0x28>
 800a4d8:	2f62      	cmp	r7, #98	; 0x62
 800a4da:	d80a      	bhi.n	800a4f2 <_printf_i+0x32>
 800a4dc:	2f00      	cmp	r7, #0
 800a4de:	f000 80d4 	beq.w	800a68a <_printf_i+0x1ca>
 800a4e2:	2f58      	cmp	r7, #88	; 0x58
 800a4e4:	f000 80c0 	beq.w	800a668 <_printf_i+0x1a8>
 800a4e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a4f0:	e03a      	b.n	800a568 <_printf_i+0xa8>
 800a4f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a4f6:	2b15      	cmp	r3, #21
 800a4f8:	d8f6      	bhi.n	800a4e8 <_printf_i+0x28>
 800a4fa:	a101      	add	r1, pc, #4	; (adr r1, 800a500 <_printf_i+0x40>)
 800a4fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a500:	0800a559 	.word	0x0800a559
 800a504:	0800a56d 	.word	0x0800a56d
 800a508:	0800a4e9 	.word	0x0800a4e9
 800a50c:	0800a4e9 	.word	0x0800a4e9
 800a510:	0800a4e9 	.word	0x0800a4e9
 800a514:	0800a4e9 	.word	0x0800a4e9
 800a518:	0800a56d 	.word	0x0800a56d
 800a51c:	0800a4e9 	.word	0x0800a4e9
 800a520:	0800a4e9 	.word	0x0800a4e9
 800a524:	0800a4e9 	.word	0x0800a4e9
 800a528:	0800a4e9 	.word	0x0800a4e9
 800a52c:	0800a671 	.word	0x0800a671
 800a530:	0800a599 	.word	0x0800a599
 800a534:	0800a62b 	.word	0x0800a62b
 800a538:	0800a4e9 	.word	0x0800a4e9
 800a53c:	0800a4e9 	.word	0x0800a4e9
 800a540:	0800a693 	.word	0x0800a693
 800a544:	0800a4e9 	.word	0x0800a4e9
 800a548:	0800a599 	.word	0x0800a599
 800a54c:	0800a4e9 	.word	0x0800a4e9
 800a550:	0800a4e9 	.word	0x0800a4e9
 800a554:	0800a633 	.word	0x0800a633
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	1d1a      	adds	r2, r3, #4
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	602a      	str	r2, [r5, #0]
 800a560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a568:	2301      	movs	r3, #1
 800a56a:	e09f      	b.n	800a6ac <_printf_i+0x1ec>
 800a56c:	6820      	ldr	r0, [r4, #0]
 800a56e:	682b      	ldr	r3, [r5, #0]
 800a570:	0607      	lsls	r7, r0, #24
 800a572:	f103 0104 	add.w	r1, r3, #4
 800a576:	6029      	str	r1, [r5, #0]
 800a578:	d501      	bpl.n	800a57e <_printf_i+0xbe>
 800a57a:	681e      	ldr	r6, [r3, #0]
 800a57c:	e003      	b.n	800a586 <_printf_i+0xc6>
 800a57e:	0646      	lsls	r6, r0, #25
 800a580:	d5fb      	bpl.n	800a57a <_printf_i+0xba>
 800a582:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a586:	2e00      	cmp	r6, #0
 800a588:	da03      	bge.n	800a592 <_printf_i+0xd2>
 800a58a:	232d      	movs	r3, #45	; 0x2d
 800a58c:	4276      	negs	r6, r6
 800a58e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a592:	485a      	ldr	r0, [pc, #360]	; (800a6fc <_printf_i+0x23c>)
 800a594:	230a      	movs	r3, #10
 800a596:	e012      	b.n	800a5be <_printf_i+0xfe>
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	6820      	ldr	r0, [r4, #0]
 800a59c:	1d19      	adds	r1, r3, #4
 800a59e:	6029      	str	r1, [r5, #0]
 800a5a0:	0605      	lsls	r5, r0, #24
 800a5a2:	d501      	bpl.n	800a5a8 <_printf_i+0xe8>
 800a5a4:	681e      	ldr	r6, [r3, #0]
 800a5a6:	e002      	b.n	800a5ae <_printf_i+0xee>
 800a5a8:	0641      	lsls	r1, r0, #25
 800a5aa:	d5fb      	bpl.n	800a5a4 <_printf_i+0xe4>
 800a5ac:	881e      	ldrh	r6, [r3, #0]
 800a5ae:	4853      	ldr	r0, [pc, #332]	; (800a6fc <_printf_i+0x23c>)
 800a5b0:	2f6f      	cmp	r7, #111	; 0x6f
 800a5b2:	bf0c      	ite	eq
 800a5b4:	2308      	moveq	r3, #8
 800a5b6:	230a      	movne	r3, #10
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a5be:	6865      	ldr	r5, [r4, #4]
 800a5c0:	60a5      	str	r5, [r4, #8]
 800a5c2:	2d00      	cmp	r5, #0
 800a5c4:	bfa2      	ittt	ge
 800a5c6:	6821      	ldrge	r1, [r4, #0]
 800a5c8:	f021 0104 	bicge.w	r1, r1, #4
 800a5cc:	6021      	strge	r1, [r4, #0]
 800a5ce:	b90e      	cbnz	r6, 800a5d4 <_printf_i+0x114>
 800a5d0:	2d00      	cmp	r5, #0
 800a5d2:	d04b      	beq.n	800a66c <_printf_i+0x1ac>
 800a5d4:	4615      	mov	r5, r2
 800a5d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a5da:	fb03 6711 	mls	r7, r3, r1, r6
 800a5de:	5dc7      	ldrb	r7, [r0, r7]
 800a5e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a5e4:	4637      	mov	r7, r6
 800a5e6:	42bb      	cmp	r3, r7
 800a5e8:	460e      	mov	r6, r1
 800a5ea:	d9f4      	bls.n	800a5d6 <_printf_i+0x116>
 800a5ec:	2b08      	cmp	r3, #8
 800a5ee:	d10b      	bne.n	800a608 <_printf_i+0x148>
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	07de      	lsls	r6, r3, #31
 800a5f4:	d508      	bpl.n	800a608 <_printf_i+0x148>
 800a5f6:	6923      	ldr	r3, [r4, #16]
 800a5f8:	6861      	ldr	r1, [r4, #4]
 800a5fa:	4299      	cmp	r1, r3
 800a5fc:	bfde      	ittt	le
 800a5fe:	2330      	movle	r3, #48	; 0x30
 800a600:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a604:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a608:	1b52      	subs	r2, r2, r5
 800a60a:	6122      	str	r2, [r4, #16]
 800a60c:	f8cd a000 	str.w	sl, [sp]
 800a610:	464b      	mov	r3, r9
 800a612:	aa03      	add	r2, sp, #12
 800a614:	4621      	mov	r1, r4
 800a616:	4640      	mov	r0, r8
 800a618:	f7ff fee4 	bl	800a3e4 <_printf_common>
 800a61c:	3001      	adds	r0, #1
 800a61e:	d14a      	bne.n	800a6b6 <_printf_i+0x1f6>
 800a620:	f04f 30ff 	mov.w	r0, #4294967295
 800a624:	b004      	add	sp, #16
 800a626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	f043 0320 	orr.w	r3, r3, #32
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	4833      	ldr	r0, [pc, #204]	; (800a700 <_printf_i+0x240>)
 800a634:	2778      	movs	r7, #120	; 0x78
 800a636:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	6829      	ldr	r1, [r5, #0]
 800a63e:	061f      	lsls	r7, r3, #24
 800a640:	f851 6b04 	ldr.w	r6, [r1], #4
 800a644:	d402      	bmi.n	800a64c <_printf_i+0x18c>
 800a646:	065f      	lsls	r7, r3, #25
 800a648:	bf48      	it	mi
 800a64a:	b2b6      	uxthmi	r6, r6
 800a64c:	07df      	lsls	r7, r3, #31
 800a64e:	bf48      	it	mi
 800a650:	f043 0320 	orrmi.w	r3, r3, #32
 800a654:	6029      	str	r1, [r5, #0]
 800a656:	bf48      	it	mi
 800a658:	6023      	strmi	r3, [r4, #0]
 800a65a:	b91e      	cbnz	r6, 800a664 <_printf_i+0x1a4>
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	f023 0320 	bic.w	r3, r3, #32
 800a662:	6023      	str	r3, [r4, #0]
 800a664:	2310      	movs	r3, #16
 800a666:	e7a7      	b.n	800a5b8 <_printf_i+0xf8>
 800a668:	4824      	ldr	r0, [pc, #144]	; (800a6fc <_printf_i+0x23c>)
 800a66a:	e7e4      	b.n	800a636 <_printf_i+0x176>
 800a66c:	4615      	mov	r5, r2
 800a66e:	e7bd      	b.n	800a5ec <_printf_i+0x12c>
 800a670:	682b      	ldr	r3, [r5, #0]
 800a672:	6826      	ldr	r6, [r4, #0]
 800a674:	6961      	ldr	r1, [r4, #20]
 800a676:	1d18      	adds	r0, r3, #4
 800a678:	6028      	str	r0, [r5, #0]
 800a67a:	0635      	lsls	r5, r6, #24
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	d501      	bpl.n	800a684 <_printf_i+0x1c4>
 800a680:	6019      	str	r1, [r3, #0]
 800a682:	e002      	b.n	800a68a <_printf_i+0x1ca>
 800a684:	0670      	lsls	r0, r6, #25
 800a686:	d5fb      	bpl.n	800a680 <_printf_i+0x1c0>
 800a688:	8019      	strh	r1, [r3, #0]
 800a68a:	2300      	movs	r3, #0
 800a68c:	6123      	str	r3, [r4, #16]
 800a68e:	4615      	mov	r5, r2
 800a690:	e7bc      	b.n	800a60c <_printf_i+0x14c>
 800a692:	682b      	ldr	r3, [r5, #0]
 800a694:	1d1a      	adds	r2, r3, #4
 800a696:	602a      	str	r2, [r5, #0]
 800a698:	681d      	ldr	r5, [r3, #0]
 800a69a:	6862      	ldr	r2, [r4, #4]
 800a69c:	2100      	movs	r1, #0
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f7f5 fdce 	bl	8000240 <memchr>
 800a6a4:	b108      	cbz	r0, 800a6aa <_printf_i+0x1ea>
 800a6a6:	1b40      	subs	r0, r0, r5
 800a6a8:	6060      	str	r0, [r4, #4]
 800a6aa:	6863      	ldr	r3, [r4, #4]
 800a6ac:	6123      	str	r3, [r4, #16]
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6b4:	e7aa      	b.n	800a60c <_printf_i+0x14c>
 800a6b6:	6923      	ldr	r3, [r4, #16]
 800a6b8:	462a      	mov	r2, r5
 800a6ba:	4649      	mov	r1, r9
 800a6bc:	4640      	mov	r0, r8
 800a6be:	47d0      	blx	sl
 800a6c0:	3001      	adds	r0, #1
 800a6c2:	d0ad      	beq.n	800a620 <_printf_i+0x160>
 800a6c4:	6823      	ldr	r3, [r4, #0]
 800a6c6:	079b      	lsls	r3, r3, #30
 800a6c8:	d413      	bmi.n	800a6f2 <_printf_i+0x232>
 800a6ca:	68e0      	ldr	r0, [r4, #12]
 800a6cc:	9b03      	ldr	r3, [sp, #12]
 800a6ce:	4298      	cmp	r0, r3
 800a6d0:	bfb8      	it	lt
 800a6d2:	4618      	movlt	r0, r3
 800a6d4:	e7a6      	b.n	800a624 <_printf_i+0x164>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	4632      	mov	r2, r6
 800a6da:	4649      	mov	r1, r9
 800a6dc:	4640      	mov	r0, r8
 800a6de:	47d0      	blx	sl
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	d09d      	beq.n	800a620 <_printf_i+0x160>
 800a6e4:	3501      	adds	r5, #1
 800a6e6:	68e3      	ldr	r3, [r4, #12]
 800a6e8:	9903      	ldr	r1, [sp, #12]
 800a6ea:	1a5b      	subs	r3, r3, r1
 800a6ec:	42ab      	cmp	r3, r5
 800a6ee:	dcf2      	bgt.n	800a6d6 <_printf_i+0x216>
 800a6f0:	e7eb      	b.n	800a6ca <_printf_i+0x20a>
 800a6f2:	2500      	movs	r5, #0
 800a6f4:	f104 0619 	add.w	r6, r4, #25
 800a6f8:	e7f5      	b.n	800a6e6 <_printf_i+0x226>
 800a6fa:	bf00      	nop
 800a6fc:	0800a821 	.word	0x0800a821
 800a700:	0800a832 	.word	0x0800a832

0800a704 <memmove>:
 800a704:	4288      	cmp	r0, r1
 800a706:	b510      	push	{r4, lr}
 800a708:	eb01 0402 	add.w	r4, r1, r2
 800a70c:	d902      	bls.n	800a714 <memmove+0x10>
 800a70e:	4284      	cmp	r4, r0
 800a710:	4623      	mov	r3, r4
 800a712:	d807      	bhi.n	800a724 <memmove+0x20>
 800a714:	1e43      	subs	r3, r0, #1
 800a716:	42a1      	cmp	r1, r4
 800a718:	d008      	beq.n	800a72c <memmove+0x28>
 800a71a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a71e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a722:	e7f8      	b.n	800a716 <memmove+0x12>
 800a724:	4402      	add	r2, r0
 800a726:	4601      	mov	r1, r0
 800a728:	428a      	cmp	r2, r1
 800a72a:	d100      	bne.n	800a72e <memmove+0x2a>
 800a72c:	bd10      	pop	{r4, pc}
 800a72e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a736:	e7f7      	b.n	800a728 <memmove+0x24>

0800a738 <_sbrk_r>:
 800a738:	b538      	push	{r3, r4, r5, lr}
 800a73a:	4d06      	ldr	r5, [pc, #24]	; (800a754 <_sbrk_r+0x1c>)
 800a73c:	2300      	movs	r3, #0
 800a73e:	4604      	mov	r4, r0
 800a740:	4608      	mov	r0, r1
 800a742:	602b      	str	r3, [r5, #0]
 800a744:	f7f6 fc22 	bl	8000f8c <_sbrk>
 800a748:	1c43      	adds	r3, r0, #1
 800a74a:	d102      	bne.n	800a752 <_sbrk_r+0x1a>
 800a74c:	682b      	ldr	r3, [r5, #0]
 800a74e:	b103      	cbz	r3, 800a752 <_sbrk_r+0x1a>
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	bd38      	pop	{r3, r4, r5, pc}
 800a754:	20000894 	.word	0x20000894

0800a758 <_realloc_r>:
 800a758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a75c:	4680      	mov	r8, r0
 800a75e:	4614      	mov	r4, r2
 800a760:	460e      	mov	r6, r1
 800a762:	b921      	cbnz	r1, 800a76e <_realloc_r+0x16>
 800a764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a768:	4611      	mov	r1, r2
 800a76a:	f7ff bc57 	b.w	800a01c <_malloc_r>
 800a76e:	b92a      	cbnz	r2, 800a77c <_realloc_r+0x24>
 800a770:	f7ff fbe8 	bl	8009f44 <_free_r>
 800a774:	4625      	mov	r5, r4
 800a776:	4628      	mov	r0, r5
 800a778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a77c:	f000 f81b 	bl	800a7b6 <_malloc_usable_size_r>
 800a780:	4284      	cmp	r4, r0
 800a782:	4607      	mov	r7, r0
 800a784:	d802      	bhi.n	800a78c <_realloc_r+0x34>
 800a786:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a78a:	d812      	bhi.n	800a7b2 <_realloc_r+0x5a>
 800a78c:	4621      	mov	r1, r4
 800a78e:	4640      	mov	r0, r8
 800a790:	f7ff fc44 	bl	800a01c <_malloc_r>
 800a794:	4605      	mov	r5, r0
 800a796:	2800      	cmp	r0, #0
 800a798:	d0ed      	beq.n	800a776 <_realloc_r+0x1e>
 800a79a:	42bc      	cmp	r4, r7
 800a79c:	4622      	mov	r2, r4
 800a79e:	4631      	mov	r1, r6
 800a7a0:	bf28      	it	cs
 800a7a2:	463a      	movcs	r2, r7
 800a7a4:	f7ff fbc0 	bl	8009f28 <memcpy>
 800a7a8:	4631      	mov	r1, r6
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	f7ff fbca 	bl	8009f44 <_free_r>
 800a7b0:	e7e1      	b.n	800a776 <_realloc_r+0x1e>
 800a7b2:	4635      	mov	r5, r6
 800a7b4:	e7df      	b.n	800a776 <_realloc_r+0x1e>

0800a7b6 <_malloc_usable_size_r>:
 800a7b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ba:	1f18      	subs	r0, r3, #4
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	bfbc      	itt	lt
 800a7c0:	580b      	ldrlt	r3, [r1, r0]
 800a7c2:	18c0      	addlt	r0, r0, r3
 800a7c4:	4770      	bx	lr
	...

0800a7c8 <_init>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	bf00      	nop
 800a7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ce:	bc08      	pop	{r3}
 800a7d0:	469e      	mov	lr, r3
 800a7d2:	4770      	bx	lr

0800a7d4 <_fini>:
 800a7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d6:	bf00      	nop
 800a7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7da:	bc08      	pop	{r3}
 800a7dc:	469e      	mov	lr, r3
 800a7de:	4770      	bx	lr
